var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"mcb_pmsm_qep_offset_f28379d","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"mcb_pmsm_qep_offset_f28379d.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"MW_target_hardware_resources.h\"\r\n\r\nvolatile int IsrOverrun = 0;\r\nstatic boolean_T OverrunFlag = 0;\r\nvoid rt_OneStep(void)\r\n{\r\n  /* Check for overrun. Protect OverrunFlag against preemption */\r\n  if (OverrunFlag++) {\r\n    IsrOverrun = 1;\r\n    OverrunFlag--;\r\n    return;\r\n  }\r\n\r\n  enableTimer0Interrupt();\r\n  mcb_pmsm_qep_offset_f28379d_step();\r\n\r\n  /* Get model outputs here */\r\n  disableTimer0Interrupt();\r\n  OverrunFlag--;\r\n}\r\n\r\nvolatile boolean_T stopRequested;\r\nvolatile boolean_T runModel;\r\nint main(void)\r\n{\r\n  float modelBaseRate = 0.5;\r\n  float systemClock = 200;\r\n\r\n  /* Initialize variables */\r\n  stopRequested = false;\r\n  runModel = false;\r\n  HWI_TIC28x_EnablePeripheralInterrupt();\r\n  c2000_flash_init();\r\n  init_board();\r\n\r\n#if defined(MW_EXEC_PROFILER_ON) || (defined(MW_EXTMODE_RUNNING) && !defined(XCP_TIMESTAMP_BASED_ON_SIMULATION_TIME))\r\n\r\n  hardwareTimer1Init();\r\n\r\n#endif\r\n\r\n  ;\r\n  rtmSetErrorStatus(mcb_pmsm_qep_offset_f28379d_M, 0);\r\n  mcb_pmsm_qep_offset_f28379d_initialize();\r\n  globalInterruptDisable();\r\n  configureTimer0(modelBaseRate, systemClock);\r\n  runModel =\r\n    rtmGetErrorStatus(mcb_pmsm_qep_offset_f28379d_M) == (NULL);\r\n  enableTimer0Interrupt();\r\n  config_ePWM_TBSync();\r\n  mcb_pmsm_qep_offset_f28379d_configure_interrupts();\r\n  globalInterruptEnable();\r\n  while (runModel) {\r\n    stopRequested = !(\r\n                      rtmGetErrorStatus(mcb_pmsm_qep_offset_f28379d_M) == (NULL));\r\n  }\r\n\r\n  mcb_pmsm_qep_offset_f28379d_unconfigure_interrupts();\r\n\r\n  /* Terminate model */\r\n  mcb_pmsm_qep_offset_f28379d_terminate();\r\n  HWI_TIC28x_DisablePeripheralInterrupt();\r\n  globalInterruptDisable();\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mcb_pmsm_qep_offset_f28379d.c","type":"source","group":"model","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mcb_pmsm_qep_offset_f28379d.c\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"mcb_pmsm_qep_offset_f28379d.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d_private.h\"\r\n#include <math.h>\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n#include <string.h>\r\n\r\n/* Block signals (default storage) */\r\nBlockIO_mcb_pmsm_qep_offset_f28 mcb_pmsm_qep_offset_f28379d_B;\r\n\r\n/* Block states (default storage) */\r\nD_Work_mcb_pmsm_qep_offset_f283 mcb_pmsm_qep_offset_f2837_DWork;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_mcb_pmsm_qep_offset_f2 mcb_pmsm_qep_offset_f28379d_M_;\r\nRT_MODEL_mcb_pmsm_qep_offset_f2 *const mcb_pmsm_qep_offset_f28379d_M =\r\n  &mcb_pmsm_qep_offset_f28379d_M_;\r\n\r\n#ifndef __TMS320C28XX_CLA__\r\n\r\nuint16_T MW_adcBInitFlag = 0;\r\n\r\n#endif\r\n\r\n#ifndef __TMS320C28XX_CLA__\r\n\r\nuint16_T MW_adcCInitFlag = 0;\r\n\r\n#endif\r\n\r\n/* Model step function */\r\nvoid mcb_pmsm_qep_offset_f28379d_step(void)\r\n{\r\n  /* Outputs for Atomic SubSystem: '<Root>/Heartbeat LED' */\r\n  /* S-Function (c280xgpio_do): '<S2>/Digital Output2' incorporates:\r\n   *  Constant: '<S2>/LED 1 Hz'\r\n   */\r\n  {\r\n    GpioDataRegs.GPBTOGGLE.bit.GPIO34 = (uint16_T)((1U) != 0);\r\n  }\r\n\r\n  /* End of Outputs for SubSystem: '<Root>/Heartbeat LED' */\r\n}\r\n\r\n/* Model initialize function */\r\nvoid mcb_pmsm_qep_offset_f28379d_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize non-finites */\r\n  rt_InitInfAndNaN(sizeof(real_T));\r\n\r\n  /* initialize error status */\r\n  rtmSetErrorStatus(mcb_pmsm_qep_offset_f28379d_M, (NULL));\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) &mcb_pmsm_qep_offset_f28379d_B), 0,\r\n                sizeof(BlockIO_mcb_pmsm_qep_offset_f28));\r\n\r\n  {\r\n    mcb_pmsm_qep_offset_f28379d_B.SCIReceive = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.DTC = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Product = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Switch = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Merge = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Numberofpolepairs = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Floor = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Add_c = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Switch_k = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.TmpSignalConversionAtBytePackIn[0] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.TmpSignalConversionAtBytePackIn[1] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Merge_f = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.indexing = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Lookup[0] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Lookup[1] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Lookup[2] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Lookup[3] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Sum3 = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion1 = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Sum2 = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Product_j = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Sum4 = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Sum5 = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Product1 = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Sum6 = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Switch4[0] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Switch4[1] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Switch4[2] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.sqrt3_by_two = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.one_by_two = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.add_c = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.add_b = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Min = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Max = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Add_i = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.one_by_two_b = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Add2 = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Add1_m = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Add3 = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Gain[0] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Gain[1] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Gain[2] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Sum_d[0] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Sum_d[1] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Sum_d[2] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Gain_h[0] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Gain_h[1] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Gain_h[2] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Convert_back = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Convert_back_g = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Merge_g = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.UnitDelay = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Switch_b = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Multiply = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Add_d = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion1_c = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Add1_j = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Input = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Delay_f = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Add1_a = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.SaturatetomotorcalibSpeedRPM = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.qcos = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.dsin = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.sum_beta = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.dcos = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.qsin = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.sum_alpha = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Switch_k5[0] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.Switch_k5[1] = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.algDD_o1 = 0.0F;\r\n    mcb_pmsm_qep_offset_f28379d_B.algDD_o2 = 0.0F;\r\n  }\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)&mcb_pmsm_qep_offset_f2837_DWork, 0,\r\n                sizeof(D_Work_mcb_pmsm_qep_offset_f283));\r\n  mcb_pmsm_qep_offset_f2837_DWork.UnitDelay_DSTATE = 0.0F;\r\n  mcb_pmsm_qep_offset_f2837_DWork.Delay_DSTATE = 0.0F;\r\n\r\n  /* SystemInitialize for S-Function (HardwareInterrupt_sfun): '<S8>/Hardware Interrupt' incorporates:\r\n   *  SubSystem: '<Root>/Offset Calculation'\r\n   */\r\n\r\n  /* System initialize for function-call system: '<Root>/Offset Calculation' */\r\n\r\n  /* Start for S-Function (c280xqep): '<S3>/eQEP' */\r\n  config_QEP_eQEP1((uint32_T)65535U,(uint32_T)0, (uint32_T)0, (uint32_T)0,\r\n                   (uint16_T)0, (uint16_T)448, (uint16_T)8232, (uint16_T)32768,\r\n                   (uint16_T)119,(uint16_T)0);\r\n\r\n  /* Start for S-Function (c2802xpwm): '<S15>/ePWM1' */\r\n  real32_T tbprdValue1 = (real32_T)EPwm1Regs.TBPRD;\r\n\r\n  /*** Initialize ePWM1 modules ***/\r\n  {\r\n    /*  -- Time Base Control Register\r\n       EPwm1Regs.TBCTL.bit.CTRMODE              = 2U;          -- Counter Mode\r\n       EPwm1Regs.TBCTL.bit.SYNCOSEL             = 1U;          -- Sync Output Select\r\n\r\n       EPwm1Regs.TBCTL.bit.PRDLD                = 0U;          -- Shadow select\r\n\r\n       EPwm1Regs.TBCTL2.bit.PRDLDSYNC           = 0U;          -- Shadow select\r\n\r\n       EPwm1Regs.TBCTL.bit.PHSEN                = 0U;          -- Phase Load Enable\r\n       EPwm1Regs.TBCTL.bit.PHSDIR               = 0U;          -- Phase Direction Bit\r\n       EPwm1Regs.TBCTL.bit.HSPCLKDIV            = 0U;          -- High Speed TBCLK Pre-scaler\r\n       EPwm1Regs.TBCTL.bit.CLKDIV               = 0U;          -- Time Base Clock Pre-scaler\r\n     */\r\n    EPwm1Regs.TBCTL.all = (EPwm1Regs.TBCTL.all & ~0x3FFFU) | 0x12U;\r\n    EPwm1Regs.TBCTL2.all = (EPwm1Regs.TBCTL2.all & ~0xC000U) | 0x0U;\r\n\r\n    /*-- Setup Time-Base (TB) Submodule --*/\r\n    EPwm1Regs.TBPRD = 5000U;           // Time Base Period Register\r\n\r\n    /* -- Time-Base Phase Register\r\n       EPwm1Regs.TBPHS.bit.TBPHS               = 0U;          -- Phase offset register\r\n     */\r\n    EPwm1Regs.TBPHS.all = (EPwm1Regs.TBPHS.all & ~0xFFFF0000U) | 0x0U;\r\n\r\n    // Time Base Counter Register\r\n    EPwm1Regs.TBCTR = 0x0000U;         /* Clear counter*/\r\n\r\n    /*-- Setup Counter_Compare (CC) Submodule --*/\r\n    /*\t-- Counter Compare Control Register\r\n\r\n       EPwm1Regs.CMPCTL.bit.LOADASYNC           = 0U;          -- Active Compare A Load SYNC Option\r\n       EPwm1Regs.CMPCTL.bit.LOADBSYNC           = 0U;          -- Active Compare B Load SYNC Option\r\n       EPwm1Regs.CMPCTL.bit.LOADAMODE           = 0U;          -- Active Compare A Load\r\n       EPwm1Regs.CMPCTL.bit.LOADBMODE           = 0U;          -- Active Compare B Load\r\n       EPwm1Regs.CMPCTL.bit.SHDWAMODE           = 0U;          -- Compare A Register Block Operating Mode\r\n       EPwm1Regs.CMPCTL.bit.SHDWBMODE           = 0U;          -- Compare B Register Block Operating Mode\r\n     */\r\n    EPwm1Regs.CMPCTL.all = (EPwm1Regs.CMPCTL.all & ~0x3C5FU) | 0x0U;\r\n\r\n    /* EPwm1Regs.CMPCTL2.bit.SHDWCMODE           = 0U;          -- Compare C Register Block Operating Mode\r\n       EPwm1Regs.CMPCTL2.bit.SHDWDMODE           = 0U;          -- Compare D Register Block Operating Mode\r\n       EPwm1Regs.CMPCTL2.bit.LOADCSYNC           = 0U;          -- Active Compare C Load SYNC Option\r\n       EPwm1Regs.CMPCTL2.bit.LOADDSYNC           = 0U;          -- Active Compare D Load SYNC Option\r\n       EPwm1Regs.CMPCTL2.bit.LOADCMODE           = 0U;          -- Active Compare C Load\r\n       EPwm1Regs.CMPCTL2.bit.LOADDMODE           = 0U;          -- Active Compare D Load\r\n     */\r\n    EPwm1Regs.CMPCTL2.all = (EPwm1Regs.CMPCTL2.all & ~0x3C5FU) | 0x0U;\r\n    EPwm1Regs.CMPA.bit.CMPA = 2501U;   // Counter Compare A Register\r\n    EPwm1Regs.CMPB.bit.CMPB = 2501U;   // Counter Compare B Register\r\n    EPwm1Regs.CMPC = 32000U;           // Counter Compare C Register\r\n    EPwm1Regs.CMPD = 32000U;           // Counter Compare D Register\r\n\r\n    /*-- Setup Action-Qualifier (AQ) Submodule --*/\r\n    EPwm1Regs.AQCTLA.all = 144U;\r\n                               // Action Qualifier Control Register For Output A\r\n    EPwm1Regs.AQCTLB.all = 2310U;\r\n                               // Action Qualifier Control Register For Output B\r\n\r\n    /*\t-- Action Qualifier Software Force Register\r\n       EPwm1Regs.AQSFRC.bit.RLDCSF              = 0U;          -- Reload from Shadow Options\r\n     */\r\n    EPwm1Regs.AQSFRC.all = (EPwm1Regs.AQSFRC.all & ~0xC0U) | 0x0U;\r\n\r\n    /*\t-- Action Qualifier Continuous S/W Force Register\r\n       EPwm1Regs.AQCSFRC.bit.CSFA               = 0U;          -- Continuous Software Force on output A\r\n       EPwm1Regs.AQCSFRC.bit.CSFB               = 0U;          -- Continuous Software Force on output B\r\n     */\r\n    EPwm1Regs.AQCSFRC.all = (EPwm1Regs.AQCSFRC.all & ~0xFU) | 0x0U;\r\n\r\n    /*-- Setup Dead-Band Generator (DB) Submodule --*/\r\n    /*\t-- Dead-Band Generator Control Register\r\n       EPwm1Regs.DBCTL.bit.OUT_MODE             = 3U;          -- Dead Band Output Mode Control\r\n       EPwm1Regs.DBCTL.bit.IN_MODE              = 0U;          -- Dead Band Input Select Mode Control\r\n       EPwm1Regs.DBCTL.bit.POLSEL               = 2U;          -- Polarity Select Control\r\n       EPwm1Regs.DBCTL.bit.HALFCYCLE            = 0U;          -- Half Cycle Clocking Enable\r\n       EPwm1Regs.DBCTL.bit.SHDWDBREDMODE        = 0U;          -- DBRED shadow mode\r\n       EPwm1Regs.DBCTL.bit.SHDWDBFEDMODE        = 0U;          -- DBFED shadow mode\r\n       EPwm1Regs.DBCTL.bit.LOADREDMODE          = 4U;        -- DBRED load\r\n       EPwm1Regs.DBCTL.bit.LOADFEDMODE          = 4U;        -- DBFED load\r\n     */\r\n    EPwm1Regs.DBCTL.all = (EPwm1Regs.DBCTL.all & ~0x8FFFU) | 0xBU;\r\n    EPwm1Regs.DBRED.bit.DBRED = (uint16_T)(15.0);\r\n                         // Dead-Band Generator Rising Edge Delay Count Register\r\n    EPwm1Regs.DBFED.bit.DBFED = (uint16_T)(15.0);\r\n                        // Dead-Band Generator Falling Edge Delay Count Register\r\n\r\n    /*-- Setup Event-Trigger (ET) Submodule --*/\r\n    /*\t-- Event Trigger Selection and Pre-Scale Register\r\n       EPwm1Regs.ETSEL.bit.SOCAEN               = 1U;          -- Start of Conversion A Enable\r\n       EPwm1Regs.ETSEL.bit.SOCASELCMP           = 0U;\r\n       EPwm1Regs.ETSEL.bit.SOCASEL              = 2U;          -- Start of Conversion A Select\r\n       EPwm1Regs.ETPS.bit.SOCPSSEL              = 1U;          -- EPWM1SOC Period Select\r\n       EPwm1Regs.ETSOCPS.bit.SOCAPRD2           = 1U;\r\n       EPwm1Regs.ETSEL.bit.SOCBEN               = 0U;          -- Start of Conversion B Enable\r\n       EPwm1Regs.ETSEL.bit.SOCBSELCMP           = 0U;\r\n       EPwm1Regs.ETSEL.bit.SOCBSEL              = 1U;          -- Start of Conversion A Select\r\n       EPwm1Regs.ETPS.bit.SOCPSSEL              = 1;          -- EPWM1SOCB Period Select\r\n       EPwm1Regs.ETSOCPS.bit.SOCBPRD2           = 1U;\r\n       EPwm1Regs.ETSEL.bit.INTEN                = 0U;          -- EPWM1INTn Enable\r\n       EPwm1Regs.ETSEL.bit.INTSELCMP            = 0U;\r\n       EPwm1Regs.ETSEL.bit.INTSEL               = 1U;          -- Start of Conversion A Select\r\n       EPwm1Regs.ETPS.bit.INTPSSEL              = 1U;          // EPWM1INTn Period Select\r\n       EPwm1Regs.ETINTPS.bit.INTPRD2            = 1U;\r\n     */\r\n    EPwm1Regs.ETSEL.all = (EPwm1Regs.ETSEL.all & ~0xFF7FU) | 0x1A01U;\r\n    EPwm1Regs.ETPS.all = (EPwm1Regs.ETPS.all & ~0x30U) | 0x30U;\r\n    EPwm1Regs.ETSOCPS.all = (EPwm1Regs.ETSOCPS.all & ~0xF0FU) | 0x101U;\r\n    EPwm1Regs.ETINTPS.all = (EPwm1Regs.ETINTPS.all & ~0xFU) | 0x1U;\r\n\r\n    /*-- Setup PWM-Chopper (PC) Submodule --*/\r\n    /*\t-- PWM Chopper Control Register\r\n       EPwm1Regs.PCCTL.bit.CHPEN                = 0U;          -- PWM chopping enable\r\n       EPwm1Regs.PCCTL.bit.CHPFREQ              = 0U;          -- Chopping clock frequency\r\n       EPwm1Regs.PCCTL.bit.OSHTWTH              = 0U;          -- One-shot pulse width\r\n       EPwm1Regs.PCCTL.bit.CHPDUTY              = 0U;          -- Chopping clock Duty cycle\r\n     */\r\n    EPwm1Regs.PCCTL.all = (EPwm1Regs.PCCTL.all & ~0x7FFU) | 0x0U;\r\n\r\n    /*-- Set up Trip-Zone (TZ) Submodule --*/\r\n    EALLOW;\r\n    EPwm1Regs.TZSEL.all = 0U;          // Trip Zone Select Register\r\n\r\n    /*\t-- Trip Zone Control Register\r\n       EPwm1Regs.TZCTL.bit.TZA                  = 3U;          -- TZ1 to TZ6 Trip Action On EPWM1A\r\n       EPwm1Regs.TZCTL.bit.TZB                  = 3U;          -- TZ1 to TZ6 Trip Action On EPWM1B\r\n       EPwm1Regs.TZCTL.bit.DCAEVT1              = 3U;          -- EPWM1A action on DCAEVT1\r\n       EPwm1Regs.TZCTL.bit.DCAEVT2              = 3U;          -- EPWM1A action on DCAEVT2\r\n       EPwm1Regs.TZCTL.bit.DCBEVT1              = 3U;          -- EPWM1B action on DCBEVT1\r\n       EPwm1Regs.TZCTL.bit.DCBEVT2              = 3U;          -- EPWM1B action on DCBEVT2\r\n     */\r\n    EPwm1Regs.TZCTL.all = (EPwm1Regs.TZCTL.all & ~0xFFFU) | 0xFFFU;\r\n\r\n    /*\t-- Trip Zone Enable Interrupt Register\r\n       EPwm1Regs.TZEINT.bit.OST                 = 0U;          -- Trip Zones One Shot Int Enable\r\n       EPwm1Regs.TZEINT.bit.CBC                 = 0U;          -- Trip Zones Cycle By Cycle Int Enable\r\n       EPwm1Regs.TZEINT.bit.DCAEVT1             = 0U;          -- Digital Compare A Event 1 Int Enable\r\n       EPwm1Regs.TZEINT.bit.DCAEVT2             = 0U;          -- Digital Compare A Event 2 Int Enable\r\n       EPwm1Regs.TZEINT.bit.DCBEVT1             = 0U;          -- Digital Compare B Event 1 Int Enable\r\n       EPwm1Regs.TZEINT.bit.DCBEVT2             = 0U;          -- Digital Compare B Event 2 Int Enable\r\n     */\r\n    EPwm1Regs.TZEINT.all = (EPwm1Regs.TZEINT.all & ~0x7EU) | 0x0U;\r\n\r\n    /*\t-- Digital Compare A Control Register\r\n       EPwm1Regs.DCACTL.bit.EVT1SYNCE           = 0U;          -- DCAEVT1 SYNC Enable\r\n       EPwm1Regs.DCACTL.bit.EVT1SOCE            = 1U;          -- DCAEVT1 SOC Enable\r\n       EPwm1Regs.DCACTL.bit.EVT1FRCSYNCSEL      = 0U;          -- DCAEVT1 Force Sync Signal\r\n       EPwm1Regs.DCACTL.bit.EVT1SRCSEL          = 0U;          -- DCAEVT1 Source Signal\r\n       EPwm1Regs.DCACTL.bit.EVT2FRCSYNCSEL      = 0U;          -- DCAEVT2 Force Sync Signal\r\n       EPwm1Regs.DCACTL.bit.EVT2SRCSEL          = 0U;          -- DCAEVT2 Source Signal\r\n     */\r\n    EPwm1Regs.DCACTL.all = (EPwm1Regs.DCACTL.all & ~0x30FU) | 0x4U;\r\n\r\n    /*\t-- Digital Compare B Control Register\r\n       EPwm1Regs.DCBCTL.bit.EVT1SYNCE           = 0U;          -- DCBEVT1 SYNC Enable\r\n       EPwm1Regs.DCBCTL.bit.EVT1SOCE            = 0U;          -- DCBEVT1 SOC Enable\r\n       EPwm1Regs.DCBCTL.bit.EVT1FRCSYNCSEL      = 0U;          -- DCBEVT1 Force Sync Signal\r\n       EPwm1Regs.DCBCTL.bit.EVT1SRCSEL          = 0U;          -- DCBEVT1 Source Signal\r\n       EPwm1Regs.DCBCTL.bit.EVT2FRCSYNCSEL      = 0U;          -- DCBEVT2 Force Sync Signal\r\n       EPwm1Regs.DCBCTL.bit.EVT2SRCSEL          = 0U;          -- DCBEVT2 Source Signal\r\n     */\r\n    EPwm1Regs.DCBCTL.all = (EPwm1Regs.DCBCTL.all & ~0x30FU) | 0x0U;\r\n\r\n    /*\t-- Digital Compare Trip Select Register\r\n       EPwm1Regs.DCTRIPSEL.bit.DCAHCOMPSEL      = 0U;          -- Digital Compare A High COMP Input Select\r\n\r\n       EPwm1Regs.DCTRIPSEL.bit.DCALCOMPSEL      = 1U;          -- Digital Compare A Low COMP Input Select\r\n       EPwm1Regs.DCTRIPSEL.bit.DCBHCOMPSEL      = 0U;          -- Digital Compare B High COMP Input Select\r\n       EPwm1Regs.DCTRIPSEL.bit.DCBLCOMPSEL      = 1U;          -- Digital Compare B Low COMP Input Select\r\n     */\r\n    EPwm1Regs.DCTRIPSEL.all = (EPwm1Regs.DCTRIPSEL.all & ~ 0xFFFFU) | 0x1010U;\r\n\r\n    /*\t-- Trip Zone Digital Comparator Select Register\r\n       EPwm1Regs.TZDCSEL.bit.DCAEVT1            = 0U;          -- Digital Compare Output A Event 1\r\n       EPwm1Regs.TZDCSEL.bit.DCAEVT2            = 0U;          -- Digital Compare Output A Event 2\r\n       EPwm1Regs.TZDCSEL.bit.DCBEVT1            = 0U;          -- Digital Compare Output B Event 1\r\n       EPwm1Regs.TZDCSEL.bit.DCBEVT2            = 0U;          -- Digital Compare Output B Event 2\r\n     */\r\n    EPwm1Regs.TZDCSEL.all = (EPwm1Regs.TZDCSEL.all & ~0xFFFU) | 0x0U;\r\n\r\n    /*\t-- Digital Compare Filter Control Register\r\n       EPwm1Regs.DCFCTL.bit.BLANKE              = 0U;          -- Blanking Enable/Disable\r\n       EPwm1Regs.DCFCTL.bit.PULSESEL            = 1U;          -- Pulse Select for Blanking & Capture Alignment\r\n       EPwm1Regs.DCFCTL.bit.BLANKINV            = 0U;          -- Blanking Window Inversion\r\n       EPwm1Regs.DCFCTL.bit.SRCSEL              = 0U;          -- Filter Block Signal Source Select\r\n     */\r\n    EPwm1Regs.DCFCTL.all = (EPwm1Regs.DCFCTL.all & ~0x3FU) | 0x10U;\r\n    EPwm1Regs.DCFOFFSET = 0U;          // Digital Compare Filter Offset Register\r\n    EPwm1Regs.DCFWINDOW = 0U;          // Digital Compare Filter Window Register\r\n\r\n    /*\t-- Digital Compare Capture Control Register\r\n       EPwm1Regs.DCCAPCTL.bit.CAPE              = 0U;          -- Counter Capture Enable\r\n     */\r\n    EPwm1Regs.DCCAPCTL.all = (EPwm1Regs.DCCAPCTL.all & ~0x1U) | 0x0U;\r\n\r\n    /*\t-- HRPWM Configuration Register\r\n       EPwm1Regs.HRCNFG.bit.SWAPAB              = 0U;          -- Swap EPWMA and EPWMB Outputs Bit\r\n       EPwm1Regs.HRCNFG.bit.SELOUTB             = 0U;          -- EPWMB Output Selection Bit\r\n     */\r\n    EPwm1Regs.HRCNFG.all = (EPwm1Regs.HRCNFG.all & ~0xA0U) | 0x0U;\r\n\r\n    /* Update the Link Registers with the link value for all the Compare values and TBPRD */\r\n    /* No error is thrown if the ePWM register exists in the model or not */\r\n    EPwm1Regs.EPWMXLINK.bit.TBPRDLINK = 0U;\r\n    EPwm1Regs.EPWMXLINK.bit.CMPALINK = 0U;\r\n    EPwm1Regs.EPWMXLINK.bit.CMPBLINK = 0U;\r\n    EPwm1Regs.EPWMXLINK.bit.CMPCLINK = 0U;\r\n    EPwm1Regs.EPWMXLINK.bit.CMPDLINK = 0U;\r\n\r\n    /* SYNCPER - Peripheral synchronization output event\r\n       EPwm1Regs.HRPCTL.bit.PWMSYNCSEL            = 0U;          -- EPWMSYNCPER selection\r\n       EPwm1Regs.HRPCTL.bit.PWMSYNCSELX           = 0U;          --  EPWMSYNCPER selection\r\n     */\r\n    EPwm1Regs.HRPCTL.all = (EPwm1Regs.HRPCTL.all & ~0x72U) | 0x0U;\r\n    EDIS;\r\n  }\r\n\r\n  /* Start for S-Function (c2802xpwm): '<S15>/ePWM2' */\r\n  real32_T tbprdValue2 = (real32_T)EPwm2Regs.TBPRD;\r\n\r\n  /*** Initialize ePWM2 modules ***/\r\n  {\r\n    /*  -- Time Base Control Register\r\n       EPwm2Regs.TBCTL.bit.CTRMODE              = 2U;          -- Counter Mode\r\n       EPwm2Regs.TBCTL.bit.SYNCOSEL             = 0U;          -- Sync Output Select\r\n\r\n       EPwm2Regs.TBCTL.bit.PRDLD                = 0U;          -- Shadow select\r\n\r\n       EPwm2Regs.TBCTL2.bit.PRDLDSYNC           = 0U;          -- Shadow select\r\n\r\n       EPwm2Regs.TBCTL.bit.PHSEN                = 1U;          -- Phase Load Enable\r\n       EPwm2Regs.TBCTL.bit.PHSDIR               = 1U;          -- Phase Direction Bit\r\n       EPwm2Regs.TBCTL.bit.HSPCLKDIV            = 0U;          -- High Speed TBCLK Pre-scaler\r\n       EPwm2Regs.TBCTL.bit.CLKDIV               = 0U;          -- Time Base Clock Pre-scaler\r\n     */\r\n    EPwm2Regs.TBCTL.all = (EPwm2Regs.TBCTL.all & ~0x3FFFU) | 0x2006U;\r\n    EPwm2Regs.TBCTL2.all = (EPwm2Regs.TBCTL2.all & ~0xC000U) | 0x0U;\r\n\r\n    /*-- Setup Time-Base (TB) Submodule --*/\r\n    EPwm2Regs.TBPRD = 5000U;           // Time Base Period Register\r\n\r\n    /* -- Time-Base Phase Register\r\n       EPwm2Regs.TBPHS.bit.TBPHS               = 0U;          -- Phase offset register\r\n     */\r\n    EPwm2Regs.TBPHS.all = (EPwm2Regs.TBPHS.all & ~0xFFFF0000U) | 0x0U;\r\n\r\n    // Time Base Counter Register\r\n    EPwm2Regs.TBCTR = 0x0000U;         /* Clear counter*/\r\n\r\n    /*-- Setup Counter_Compare (CC) Submodule --*/\r\n    /*\t-- Counter Compare Control Register\r\n\r\n       EPwm2Regs.CMPCTL.bit.LOADASYNC           = 0U;          -- Active Compare A Load SYNC Option\r\n       EPwm2Regs.CMPCTL.bit.LOADBSYNC           = 0U;          -- Active Compare B Load SYNC Option\r\n       EPwm2Regs.CMPCTL.bit.LOADAMODE           = 0U;          -- Active Compare A Load\r\n       EPwm2Regs.CMPCTL.bit.LOADBMODE           = 0U;          -- Active Compare B Load\r\n       EPwm2Regs.CMPCTL.bit.SHDWAMODE           = 0U;          -- Compare A Register Block Operating Mode\r\n       EPwm2Regs.CMPCTL.bit.SHDWBMODE           = 0U;          -- Compare B Register Block Operating Mode\r\n     */\r\n    EPwm2Regs.CMPCTL.all = (EPwm2Regs.CMPCTL.all & ~0x3C5FU) | 0x0U;\r\n\r\n    /* EPwm2Regs.CMPCTL2.bit.SHDWCMODE           = 0U;          -- Compare C Register Block Operating Mode\r\n       EPwm2Regs.CMPCTL2.bit.SHDWDMODE           = 0U;          -- Compare D Register Block Operating Mode\r\n       EPwm2Regs.CMPCTL2.bit.LOADCSYNC           = 0U;          -- Active Compare C Load SYNC Option\r\n       EPwm2Regs.CMPCTL2.bit.LOADDSYNC           = 0U;          -- Active Compare D Load SYNC Option\r\n       EPwm2Regs.CMPCTL2.bit.LOADCMODE           = 0U;          -- Active Compare C Load\r\n       EPwm2Regs.CMPCTL2.bit.LOADDMODE           = 0U;          -- Active Compare D Load\r\n     */\r\n    EPwm2Regs.CMPCTL2.all = (EPwm2Regs.CMPCTL2.all & ~0x3C5FU) | 0x0U;\r\n    EPwm2Regs.CMPA.bit.CMPA = 2501U;   // Counter Compare A Register\r\n    EPwm2Regs.CMPB.bit.CMPB = 2501U;   // Counter Compare B Register\r\n    EPwm2Regs.CMPC = 32000U;           // Counter Compare C Register\r\n    EPwm2Regs.CMPD = 32000U;           // Counter Compare D Register\r\n\r\n    /*-- Setup Action-Qualifier (AQ) Submodule --*/\r\n    EPwm2Regs.AQCTLA.all = 144U;\r\n                               // Action Qualifier Control Register For Output A\r\n    EPwm2Regs.AQCTLB.all = 2310U;\r\n                               // Action Qualifier Control Register For Output B\r\n\r\n    /*\t-- Action Qualifier Software Force Register\r\n       EPwm2Regs.AQSFRC.bit.RLDCSF              = 0U;          -- Reload from Shadow Options\r\n     */\r\n    EPwm2Regs.AQSFRC.all = (EPwm2Regs.AQSFRC.all & ~0xC0U) | 0x0U;\r\n\r\n    /*\t-- Action Qualifier Continuous S/W Force Register\r\n       EPwm2Regs.AQCSFRC.bit.CSFA               = 0U;          -- Continuous Software Force on output A\r\n       EPwm2Regs.AQCSFRC.bit.CSFB               = 0U;          -- Continuous Software Force on output B\r\n     */\r\n    EPwm2Regs.AQCSFRC.all = (EPwm2Regs.AQCSFRC.all & ~0xFU) | 0x0U;\r\n\r\n    /*-- Setup Dead-Band Generator (DB) Submodule --*/\r\n    /*\t-- Dead-Band Generator Control Register\r\n       EPwm2Regs.DBCTL.bit.OUT_MODE             = 3U;          -- Dead Band Output Mode Control\r\n       EPwm2Regs.DBCTL.bit.IN_MODE              = 0U;          -- Dead Band Input Select Mode Control\r\n       EPwm2Regs.DBCTL.bit.POLSEL               = 2U;          -- Polarity Select Control\r\n       EPwm2Regs.DBCTL.bit.HALFCYCLE            = 0U;          -- Half Cycle Clocking Enable\r\n       EPwm2Regs.DBCTL.bit.SHDWDBREDMODE        = 0U;          -- DBRED shadow mode\r\n       EPwm2Regs.DBCTL.bit.SHDWDBFEDMODE        = 0U;          -- DBFED shadow mode\r\n       EPwm2Regs.DBCTL.bit.LOADREDMODE          = 4U;        -- DBRED load\r\n       EPwm2Regs.DBCTL.bit.LOADFEDMODE          = 4U;        -- DBFED load\r\n     */\r\n    EPwm2Regs.DBCTL.all = (EPwm2Regs.DBCTL.all & ~0x8FFFU) | 0xBU;\r\n    EPwm2Regs.DBRED.bit.DBRED = (uint16_T)(15.0);\r\n                         // Dead-Band Generator Rising Edge Delay Count Register\r\n    EPwm2Regs.DBFED.bit.DBFED = (uint16_T)(15.0);\r\n                        // Dead-Band Generator Falling Edge Delay Count Register\r\n\r\n    /*-- Setup Event-Trigger (ET) Submodule --*/\r\n    /*\t-- Event Trigger Selection and Pre-Scale Register\r\n       EPwm2Regs.ETSEL.bit.SOCAEN               = 0U;          -- Start of Conversion A Enable\r\n       EPwm2Regs.ETSEL.bit.SOCASELCMP           = 0U;\r\n       EPwm2Regs.ETSEL.bit.SOCASEL              = 2U;          -- Start of Conversion A Select\r\n       EPwm2Regs.ETPS.bit.SOCPSSEL              = 1U;          -- EPWM2SOC Period Select\r\n       EPwm2Regs.ETSOCPS.bit.SOCAPRD2           = 1U;\r\n       EPwm2Regs.ETSEL.bit.SOCBEN               = 0U;          -- Start of Conversion B Enable\r\n       EPwm2Regs.ETSEL.bit.SOCBSELCMP           = 0U;\r\n       EPwm2Regs.ETSEL.bit.SOCBSEL              = 1U;          -- Start of Conversion A Select\r\n       EPwm2Regs.ETPS.bit.SOCPSSEL              = 1;          -- EPWM2SOCB Period Select\r\n       EPwm2Regs.ETSOCPS.bit.SOCBPRD2           = 1U;\r\n       EPwm2Regs.ETSEL.bit.INTEN                = 0U;          -- EPWM2INTn Enable\r\n       EPwm2Regs.ETSEL.bit.INTSELCMP            = 0U;\r\n       EPwm2Regs.ETSEL.bit.INTSEL               = 1U;          -- Start of Conversion A Select\r\n       EPwm2Regs.ETPS.bit.INTPSSEL              = 1U;          // EPWM2INTn Period Select\r\n       EPwm2Regs.ETINTPS.bit.INTPRD2            = 1U;\r\n     */\r\n    EPwm2Regs.ETSEL.all = (EPwm2Regs.ETSEL.all & ~0xFF7FU) | 0x1201U;\r\n    EPwm2Regs.ETPS.all = (EPwm2Regs.ETPS.all & ~0x30U) | 0x30U;\r\n    EPwm2Regs.ETSOCPS.all = (EPwm2Regs.ETSOCPS.all & ~0xF0FU) | 0x101U;\r\n    EPwm2Regs.ETINTPS.all = (EPwm2Regs.ETINTPS.all & ~0xFU) | 0x1U;\r\n\r\n    /*-- Setup PWM-Chopper (PC) Submodule --*/\r\n    /*\t-- PWM Chopper Control Register\r\n       EPwm2Regs.PCCTL.bit.CHPEN                = 0U;          -- PWM chopping enable\r\n       EPwm2Regs.PCCTL.bit.CHPFREQ              = 0U;          -- Chopping clock frequency\r\n       EPwm2Regs.PCCTL.bit.OSHTWTH              = 0U;          -- One-shot pulse width\r\n       EPwm2Regs.PCCTL.bit.CHPDUTY              = 0U;          -- Chopping clock Duty cycle\r\n     */\r\n    EPwm2Regs.PCCTL.all = (EPwm2Regs.PCCTL.all & ~0x7FFU) | 0x0U;\r\n\r\n    /*-- Set up Trip-Zone (TZ) Submodule --*/\r\n    EALLOW;\r\n    EPwm2Regs.TZSEL.all = 0U;          // Trip Zone Select Register\r\n\r\n    /*\t-- Trip Zone Control Register\r\n       EPwm2Regs.TZCTL.bit.TZA                  = 3U;          -- TZ1 to TZ6 Trip Action On EPWM2A\r\n       EPwm2Regs.TZCTL.bit.TZB                  = 3U;          -- TZ1 to TZ6 Trip Action On EPWM2B\r\n       EPwm2Regs.TZCTL.bit.DCAEVT1              = 3U;          -- EPWM2A action on DCAEVT1\r\n       EPwm2Regs.TZCTL.bit.DCAEVT2              = 3U;          -- EPWM2A action on DCAEVT2\r\n       EPwm2Regs.TZCTL.bit.DCBEVT1              = 3U;          -- EPWM2B action on DCBEVT1\r\n       EPwm2Regs.TZCTL.bit.DCBEVT2              = 3U;          -- EPWM2B action on DCBEVT2\r\n     */\r\n    EPwm2Regs.TZCTL.all = (EPwm2Regs.TZCTL.all & ~0xFFFU) | 0xFFFU;\r\n\r\n    /*\t-- Trip Zone Enable Interrupt Register\r\n       EPwm2Regs.TZEINT.bit.OST                 = 0U;          -- Trip Zones One Shot Int Enable\r\n       EPwm2Regs.TZEINT.bit.CBC                 = 0U;          -- Trip Zones Cycle By Cycle Int Enable\r\n       EPwm2Regs.TZEINT.bit.DCAEVT1             = 0U;          -- Digital Compare A Event 1 Int Enable\r\n       EPwm2Regs.TZEINT.bit.DCAEVT2             = 0U;          -- Digital Compare A Event 2 Int Enable\r\n       EPwm2Regs.TZEINT.bit.DCBEVT1             = 0U;          -- Digital Compare B Event 1 Int Enable\r\n       EPwm2Regs.TZEINT.bit.DCBEVT2             = 0U;          -- Digital Compare B Event 2 Int Enable\r\n     */\r\n    EPwm2Regs.TZEINT.all = (EPwm2Regs.TZEINT.all & ~0x7EU) | 0x0U;\r\n\r\n    /*\t-- Digital Compare A Control Register\r\n       EPwm2Regs.DCACTL.bit.EVT1SYNCE           = 0U;          -- DCAEVT1 SYNC Enable\r\n       EPwm2Regs.DCACTL.bit.EVT1SOCE            = 1U;          -- DCAEVT1 SOC Enable\r\n       EPwm2Regs.DCACTL.bit.EVT1FRCSYNCSEL      = 0U;          -- DCAEVT1 Force Sync Signal\r\n       EPwm2Regs.DCACTL.bit.EVT1SRCSEL          = 0U;          -- DCAEVT1 Source Signal\r\n       EPwm2Regs.DCACTL.bit.EVT2FRCSYNCSEL      = 0U;          -- DCAEVT2 Force Sync Signal\r\n       EPwm2Regs.DCACTL.bit.EVT2SRCSEL          = 0U;          -- DCAEVT2 Source Signal\r\n     */\r\n    EPwm2Regs.DCACTL.all = (EPwm2Regs.DCACTL.all & ~0x30FU) | 0x4U;\r\n\r\n    /*\t-- Digital Compare B Control Register\r\n       EPwm2Regs.DCBCTL.bit.EVT1SYNCE           = 0U;          -- DCBEVT1 SYNC Enable\r\n       EPwm2Regs.DCBCTL.bit.EVT1SOCE            = 0U;          -- DCBEVT1 SOC Enable\r\n       EPwm2Regs.DCBCTL.bit.EVT1FRCSYNCSEL      = 0U;          -- DCBEVT1 Force Sync Signal\r\n       EPwm2Regs.DCBCTL.bit.EVT1SRCSEL          = 0U;          -- DCBEVT1 Source Signal\r\n       EPwm2Regs.DCBCTL.bit.EVT2FRCSYNCSEL      = 0U;          -- DCBEVT2 Force Sync Signal\r\n       EPwm2Regs.DCBCTL.bit.EVT2SRCSEL          = 0U;          -- DCBEVT2 Source Signal\r\n     */\r\n    EPwm2Regs.DCBCTL.all = (EPwm2Regs.DCBCTL.all & ~0x30FU) | 0x0U;\r\n\r\n    /*\t-- Digital Compare Trip Select Register\r\n       EPwm2Regs.DCTRIPSEL.bit.DCAHCOMPSEL      = 0U;          -- Digital Compare A High COMP Input Select\r\n\r\n       EPwm2Regs.DCTRIPSEL.bit.DCALCOMPSEL      = 1U;          -- Digital Compare A Low COMP Input Select\r\n       EPwm2Regs.DCTRIPSEL.bit.DCBHCOMPSEL      = 0U;          -- Digital Compare B High COMP Input Select\r\n       EPwm2Regs.DCTRIPSEL.bit.DCBLCOMPSEL      = 1U;          -- Digital Compare B Low COMP Input Select\r\n     */\r\n    EPwm2Regs.DCTRIPSEL.all = (EPwm2Regs.DCTRIPSEL.all & ~ 0xFFFFU) | 0x1010U;\r\n\r\n    /*\t-- Trip Zone Digital Comparator Select Register\r\n       EPwm2Regs.TZDCSEL.bit.DCAEVT1            = 0U;          -- Digital Compare Output A Event 1\r\n       EPwm2Regs.TZDCSEL.bit.DCAEVT2            = 0U;          -- Digital Compare Output A Event 2\r\n       EPwm2Regs.TZDCSEL.bit.DCBEVT1            = 0U;          -- Digital Compare Output B Event 1\r\n       EPwm2Regs.TZDCSEL.bit.DCBEVT2            = 0U;          -- Digital Compare Output B Event 2\r\n     */\r\n    EPwm2Regs.TZDCSEL.all = (EPwm2Regs.TZDCSEL.all & ~0xFFFU) | 0x0U;\r\n\r\n    /*\t-- Digital Compare Filter Control Register\r\n       EPwm2Regs.DCFCTL.bit.BLANKE              = 0U;          -- Blanking Enable/Disable\r\n       EPwm2Regs.DCFCTL.bit.PULSESEL            = 1U;          -- Pulse Select for Blanking & Capture Alignment\r\n       EPwm2Regs.DCFCTL.bit.BLANKINV            = 0U;          -- Blanking Window Inversion\r\n       EPwm2Regs.DCFCTL.bit.SRCSEL              = 0U;          -- Filter Block Signal Source Select\r\n     */\r\n    EPwm2Regs.DCFCTL.all = (EPwm2Regs.DCFCTL.all & ~0x3FU) | 0x10U;\r\n    EPwm2Regs.DCFOFFSET = 0U;          // Digital Compare Filter Offset Register\r\n    EPwm2Regs.DCFWINDOW = 0U;          // Digital Compare Filter Window Register\r\n\r\n    /*\t-- Digital Compare Capture Control Register\r\n       EPwm2Regs.DCCAPCTL.bit.CAPE              = 0U;          -- Counter Capture Enable\r\n     */\r\n    EPwm2Regs.DCCAPCTL.all = (EPwm2Regs.DCCAPCTL.all & ~0x1U) | 0x0U;\r\n\r\n    /*\t-- HRPWM Configuration Register\r\n       EPwm2Regs.HRCNFG.bit.SWAPAB              = 0U;          -- Swap EPWMA and EPWMB Outputs Bit\r\n       EPwm2Regs.HRCNFG.bit.SELOUTB             = 0U;          -- EPWMB Output Selection Bit\r\n     */\r\n    EPwm2Regs.HRCNFG.all = (EPwm2Regs.HRCNFG.all & ~0xA0U) | 0x0U;\r\n\r\n    /* Update the Link Registers with the link value for all the Compare values and TBPRD */\r\n    /* No error is thrown if the ePWM register exists in the model or not */\r\n    EPwm2Regs.EPWMXLINK.bit.TBPRDLINK = 1U;\r\n    EPwm2Regs.EPWMXLINK.bit.CMPALINK = 1U;\r\n    EPwm2Regs.EPWMXLINK.bit.CMPBLINK = 1U;\r\n    EPwm2Regs.EPWMXLINK.bit.CMPCLINK = 1U;\r\n    EPwm2Regs.EPWMXLINK.bit.CMPDLINK = 1U;\r\n\r\n    /* SYNCPER - Peripheral synchronization output event\r\n       EPwm2Regs.HRPCTL.bit.PWMSYNCSEL            = 0U;          -- EPWMSYNCPER selection\r\n       EPwm2Regs.HRPCTL.bit.PWMSYNCSELX           = 0U;          --  EPWMSYNCPER selection\r\n     */\r\n    EPwm2Regs.HRPCTL.all = (EPwm2Regs.HRPCTL.all & ~0x72U) | 0x0U;\r\n    EDIS;\r\n  }\r\n\r\n  /* Start for S-Function (c2802xpwm): '<S15>/ePWM3' */\r\n  real32_T tbprdValue3 = (real32_T)EPwm3Regs.TBPRD;\r\n\r\n  /*** Initialize ePWM3 modules ***/\r\n  {\r\n    /*  -- Time Base Control Register\r\n       EPwm3Regs.TBCTL.bit.CTRMODE              = 2U;          -- Counter Mode\r\n       EPwm3Regs.TBCTL.bit.SYNCOSEL             = 0U;          -- Sync Output Select\r\n\r\n       EPwm3Regs.TBCTL.bit.PRDLD                = 0U;          -- Shadow select\r\n\r\n       EPwm3Regs.TBCTL2.bit.PRDLDSYNC           = 0U;          -- Shadow select\r\n\r\n       EPwm3Regs.TBCTL.bit.PHSEN                = 1U;          -- Phase Load Enable\r\n       EPwm3Regs.TBCTL.bit.PHSDIR               = 1U;          -- Phase Direction Bit\r\n       EPwm3Regs.TBCTL.bit.HSPCLKDIV            = 0U;          -- High Speed TBCLK Pre-scaler\r\n       EPwm3Regs.TBCTL.bit.CLKDIV               = 0U;          -- Time Base Clock Pre-scaler\r\n     */\r\n    EPwm3Regs.TBCTL.all = (EPwm3Regs.TBCTL.all & ~0x3FFFU) | 0x2006U;\r\n    EPwm3Regs.TBCTL2.all = (EPwm3Regs.TBCTL2.all & ~0xC000U) | 0x0U;\r\n\r\n    /*-- Setup Time-Base (TB) Submodule --*/\r\n    EPwm3Regs.TBPRD = 5000U;           // Time Base Period Register\r\n\r\n    /* -- Time-Base Phase Register\r\n       EPwm3Regs.TBPHS.bit.TBPHS               = 0U;          -- Phase offset register\r\n     */\r\n    EPwm3Regs.TBPHS.all = (EPwm3Regs.TBPHS.all & ~0xFFFF0000U) | 0x0U;\r\n\r\n    // Time Base Counter Register\r\n    EPwm3Regs.TBCTR = 0x0000U;         /* Clear counter*/\r\n\r\n    /*-- Setup Counter_Compare (CC) Submodule --*/\r\n    /*\t-- Counter Compare Control Register\r\n\r\n       EPwm3Regs.CMPCTL.bit.LOADASYNC           = 0U;          -- Active Compare A Load SYNC Option\r\n       EPwm3Regs.CMPCTL.bit.LOADBSYNC           = 0U;          -- Active Compare B Load SYNC Option\r\n       EPwm3Regs.CMPCTL.bit.LOADAMODE           = 0U;          -- Active Compare A Load\r\n       EPwm3Regs.CMPCTL.bit.LOADBMODE           = 0U;          -- Active Compare B Load\r\n       EPwm3Regs.CMPCTL.bit.SHDWAMODE           = 0U;          -- Compare A Register Block Operating Mode\r\n       EPwm3Regs.CMPCTL.bit.SHDWBMODE           = 0U;          -- Compare B Register Block Operating Mode\r\n     */\r\n    EPwm3Regs.CMPCTL.all = (EPwm3Regs.CMPCTL.all & ~0x3C5FU) | 0x0U;\r\n\r\n    /* EPwm3Regs.CMPCTL2.bit.SHDWCMODE           = 0U;          -- Compare C Register Block Operating Mode\r\n       EPwm3Regs.CMPCTL2.bit.SHDWDMODE           = 0U;          -- Compare D Register Block Operating Mode\r\n       EPwm3Regs.CMPCTL2.bit.LOADCSYNC           = 0U;          -- Active Compare C Load SYNC Option\r\n       EPwm3Regs.CMPCTL2.bit.LOADDSYNC           = 0U;          -- Active Compare D Load SYNC Option\r\n       EPwm3Regs.CMPCTL2.bit.LOADCMODE           = 0U;          -- Active Compare C Load\r\n       EPwm3Regs.CMPCTL2.bit.LOADDMODE           = 0U;          -- Active Compare D Load\r\n     */\r\n    EPwm3Regs.CMPCTL2.all = (EPwm3Regs.CMPCTL2.all & ~0x3C5FU) | 0x0U;\r\n    EPwm3Regs.CMPA.bit.CMPA = 2501U;   // Counter Compare A Register\r\n    EPwm3Regs.CMPB.bit.CMPB = 2501U;   // Counter Compare B Register\r\n    EPwm3Regs.CMPC = 32000U;           // Counter Compare C Register\r\n    EPwm3Regs.CMPD = 32000U;           // Counter Compare D Register\r\n\r\n    /*-- Setup Action-Qualifier (AQ) Submodule --*/\r\n    EPwm3Regs.AQCTLA.all = 144U;\r\n                               // Action Qualifier Control Register For Output A\r\n    EPwm3Regs.AQCTLB.all = 2310U;\r\n                               // Action Qualifier Control Register For Output B\r\n\r\n    /*\t-- Action Qualifier Software Force Register\r\n       EPwm3Regs.AQSFRC.bit.RLDCSF              = 0U;          -- Reload from Shadow Options\r\n     */\r\n    EPwm3Regs.AQSFRC.all = (EPwm3Regs.AQSFRC.all & ~0xC0U) | 0x0U;\r\n\r\n    /*\t-- Action Qualifier Continuous S/W Force Register\r\n       EPwm3Regs.AQCSFRC.bit.CSFA               = 0U;          -- Continuous Software Force on output A\r\n       EPwm3Regs.AQCSFRC.bit.CSFB               = 0U;          -- Continuous Software Force on output B\r\n     */\r\n    EPwm3Regs.AQCSFRC.all = (EPwm3Regs.AQCSFRC.all & ~0xFU) | 0x0U;\r\n\r\n    /*-- Setup Dead-Band Generator (DB) Submodule --*/\r\n    /*\t-- Dead-Band Generator Control Register\r\n       EPwm3Regs.DBCTL.bit.OUT_MODE             = 3U;          -- Dead Band Output Mode Control\r\n       EPwm3Regs.DBCTL.bit.IN_MODE              = 0U;          -- Dead Band Input Select Mode Control\r\n       EPwm3Regs.DBCTL.bit.POLSEL               = 2U;          -- Polarity Select Control\r\n       EPwm3Regs.DBCTL.bit.HALFCYCLE            = 0U;          -- Half Cycle Clocking Enable\r\n       EPwm3Regs.DBCTL.bit.SHDWDBREDMODE        = 0U;          -- DBRED shadow mode\r\n       EPwm3Regs.DBCTL.bit.SHDWDBFEDMODE        = 0U;          -- DBFED shadow mode\r\n       EPwm3Regs.DBCTL.bit.LOADREDMODE          = 4U;        -- DBRED load\r\n       EPwm3Regs.DBCTL.bit.LOADFEDMODE          = 4U;        -- DBFED load\r\n     */\r\n    EPwm3Regs.DBCTL.all = (EPwm3Regs.DBCTL.all & ~0x8FFFU) | 0xBU;\r\n    EPwm3Regs.DBRED.bit.DBRED = (uint16_T)(15.0);\r\n                         // Dead-Band Generator Rising Edge Delay Count Register\r\n    EPwm3Regs.DBFED.bit.DBFED = (uint16_T)(15.0);\r\n                        // Dead-Band Generator Falling Edge Delay Count Register\r\n\r\n    /*-- Setup Event-Trigger (ET) Submodule --*/\r\n    /*\t-- Event Trigger Selection and Pre-Scale Register\r\n       EPwm3Regs.ETSEL.bit.SOCAEN               = 0U;          -- Start of Conversion A Enable\r\n       EPwm3Regs.ETSEL.bit.SOCASELCMP           = 0U;\r\n       EPwm3Regs.ETSEL.bit.SOCASEL              = 2U;          -- Start of Conversion A Select\r\n       EPwm3Regs.ETPS.bit.SOCPSSEL              = 1U;          -- EPWM3SOC Period Select\r\n       EPwm3Regs.ETSOCPS.bit.SOCAPRD2           = 1U;\r\n       EPwm3Regs.ETSEL.bit.SOCBEN               = 0U;          -- Start of Conversion B Enable\r\n       EPwm3Regs.ETSEL.bit.SOCBSELCMP           = 0U;\r\n       EPwm3Regs.ETSEL.bit.SOCBSEL              = 1U;          -- Start of Conversion A Select\r\n       EPwm3Regs.ETPS.bit.SOCPSSEL              = 1;          -- EPWM3SOCB Period Select\r\n       EPwm3Regs.ETSOCPS.bit.SOCBPRD2           = 1U;\r\n       EPwm3Regs.ETSEL.bit.INTEN                = 0U;          -- EPWM3INTn Enable\r\n       EPwm3Regs.ETSEL.bit.INTSELCMP            = 0U;\r\n       EPwm3Regs.ETSEL.bit.INTSEL               = 1U;          -- Start of Conversion A Select\r\n       EPwm3Regs.ETPS.bit.INTPSSEL              = 1U;          // EPWM3INTn Period Select\r\n       EPwm3Regs.ETINTPS.bit.INTPRD2            = 1U;\r\n     */\r\n    EPwm3Regs.ETSEL.all = (EPwm3Regs.ETSEL.all & ~0xFF7FU) | 0x1201U;\r\n    EPwm3Regs.ETPS.all = (EPwm3Regs.ETPS.all & ~0x30U) | 0x30U;\r\n    EPwm3Regs.ETSOCPS.all = (EPwm3Regs.ETSOCPS.all & ~0xF0FU) | 0x101U;\r\n    EPwm3Regs.ETINTPS.all = (EPwm3Regs.ETINTPS.all & ~0xFU) | 0x1U;\r\n\r\n    /*-- Setup PWM-Chopper (PC) Submodule --*/\r\n    /*\t-- PWM Chopper Control Register\r\n       EPwm3Regs.PCCTL.bit.CHPEN                = 0U;          -- PWM chopping enable\r\n       EPwm3Regs.PCCTL.bit.CHPFREQ              = 0U;          -- Chopping clock frequency\r\n       EPwm3Regs.PCCTL.bit.OSHTWTH              = 0U;          -- One-shot pulse width\r\n       EPwm3Regs.PCCTL.bit.CHPDUTY              = 0U;          -- Chopping clock Duty cycle\r\n     */\r\n    EPwm3Regs.PCCTL.all = (EPwm3Regs.PCCTL.all & ~0x7FFU) | 0x0U;\r\n\r\n    /*-- Set up Trip-Zone (TZ) Submodule --*/\r\n    EALLOW;\r\n    EPwm3Regs.TZSEL.all = 0U;          // Trip Zone Select Register\r\n\r\n    /*\t-- Trip Zone Control Register\r\n       EPwm3Regs.TZCTL.bit.TZA                  = 3U;          -- TZ1 to TZ6 Trip Action On EPWM3A\r\n       EPwm3Regs.TZCTL.bit.TZB                  = 3U;          -- TZ1 to TZ6 Trip Action On EPWM3B\r\n       EPwm3Regs.TZCTL.bit.DCAEVT1              = 3U;          -- EPWM3A action on DCAEVT1\r\n       EPwm3Regs.TZCTL.bit.DCAEVT2              = 3U;          -- EPWM3A action on DCAEVT2\r\n       EPwm3Regs.TZCTL.bit.DCBEVT1              = 3U;          -- EPWM3B action on DCBEVT1\r\n       EPwm3Regs.TZCTL.bit.DCBEVT2              = 3U;          -- EPWM3B action on DCBEVT2\r\n     */\r\n    EPwm3Regs.TZCTL.all = (EPwm3Regs.TZCTL.all & ~0xFFFU) | 0xFFFU;\r\n\r\n    /*\t-- Trip Zone Enable Interrupt Register\r\n       EPwm3Regs.TZEINT.bit.OST                 = 0U;          -- Trip Zones One Shot Int Enable\r\n       EPwm3Regs.TZEINT.bit.CBC                 = 0U;          -- Trip Zones Cycle By Cycle Int Enable\r\n       EPwm3Regs.TZEINT.bit.DCAEVT1             = 0U;          -- Digital Compare A Event 1 Int Enable\r\n       EPwm3Regs.TZEINT.bit.DCAEVT2             = 0U;          -- Digital Compare A Event 2 Int Enable\r\n       EPwm3Regs.TZEINT.bit.DCBEVT1             = 0U;          -- Digital Compare B Event 1 Int Enable\r\n       EPwm3Regs.TZEINT.bit.DCBEVT2             = 0U;          -- Digital Compare B Event 2 Int Enable\r\n     */\r\n    EPwm3Regs.TZEINT.all = (EPwm3Regs.TZEINT.all & ~0x7EU) | 0x0U;\r\n\r\n    /*\t-- Digital Compare A Control Register\r\n       EPwm3Regs.DCACTL.bit.EVT1SYNCE           = 0U;          -- DCAEVT1 SYNC Enable\r\n       EPwm3Regs.DCACTL.bit.EVT1SOCE            = 1U;          -- DCAEVT1 SOC Enable\r\n       EPwm3Regs.DCACTL.bit.EVT1FRCSYNCSEL      = 0U;          -- DCAEVT1 Force Sync Signal\r\n       EPwm3Regs.DCACTL.bit.EVT1SRCSEL          = 0U;          -- DCAEVT1 Source Signal\r\n       EPwm3Regs.DCACTL.bit.EVT2FRCSYNCSEL      = 0U;          -- DCAEVT2 Force Sync Signal\r\n       EPwm3Regs.DCACTL.bit.EVT2SRCSEL          = 0U;          -- DCAEVT2 Source Signal\r\n     */\r\n    EPwm3Regs.DCACTL.all = (EPwm3Regs.DCACTL.all & ~0x30FU) | 0x4U;\r\n\r\n    /*\t-- Digital Compare B Control Register\r\n       EPwm3Regs.DCBCTL.bit.EVT1SYNCE           = 0U;          -- DCBEVT1 SYNC Enable\r\n       EPwm3Regs.DCBCTL.bit.EVT1SOCE            = 0U;          -- DCBEVT1 SOC Enable\r\n       EPwm3Regs.DCBCTL.bit.EVT1FRCSYNCSEL      = 0U;          -- DCBEVT1 Force Sync Signal\r\n       EPwm3Regs.DCBCTL.bit.EVT1SRCSEL          = 0U;          -- DCBEVT1 Source Signal\r\n       EPwm3Regs.DCBCTL.bit.EVT2FRCSYNCSEL      = 0U;          -- DCBEVT2 Force Sync Signal\r\n       EPwm3Regs.DCBCTL.bit.EVT2SRCSEL          = 0U;          -- DCBEVT2 Source Signal\r\n     */\r\n    EPwm3Regs.DCBCTL.all = (EPwm3Regs.DCBCTL.all & ~0x30FU) | 0x0U;\r\n\r\n    /*\t-- Digital Compare Trip Select Register\r\n       EPwm3Regs.DCTRIPSEL.bit.DCAHCOMPSEL      = 0U;          -- Digital Compare A High COMP Input Select\r\n\r\n       EPwm3Regs.DCTRIPSEL.bit.DCALCOMPSEL      = 1U;          -- Digital Compare A Low COMP Input Select\r\n       EPwm3Regs.DCTRIPSEL.bit.DCBHCOMPSEL      = 0U;          -- Digital Compare B High COMP Input Select\r\n       EPwm3Regs.DCTRIPSEL.bit.DCBLCOMPSEL      = 1U;          -- Digital Compare B Low COMP Input Select\r\n     */\r\n    EPwm3Regs.DCTRIPSEL.all = (EPwm3Regs.DCTRIPSEL.all & ~ 0xFFFFU) | 0x1010U;\r\n\r\n    /*\t-- Trip Zone Digital Comparator Select Register\r\n       EPwm3Regs.TZDCSEL.bit.DCAEVT1            = 0U;          -- Digital Compare Output A Event 1\r\n       EPwm3Regs.TZDCSEL.bit.DCAEVT2            = 0U;          -- Digital Compare Output A Event 2\r\n       EPwm3Regs.TZDCSEL.bit.DCBEVT1            = 0U;          -- Digital Compare Output B Event 1\r\n       EPwm3Regs.TZDCSEL.bit.DCBEVT2            = 0U;          -- Digital Compare Output B Event 2\r\n     */\r\n    EPwm3Regs.TZDCSEL.all = (EPwm3Regs.TZDCSEL.all & ~0xFFFU) | 0x0U;\r\n\r\n    /*\t-- Digital Compare Filter Control Register\r\n       EPwm3Regs.DCFCTL.bit.BLANKE              = 0U;          -- Blanking Enable/Disable\r\n       EPwm3Regs.DCFCTL.bit.PULSESEL            = 1U;          -- Pulse Select for Blanking & Capture Alignment\r\n       EPwm3Regs.DCFCTL.bit.BLANKINV            = 0U;          -- Blanking Window Inversion\r\n       EPwm3Regs.DCFCTL.bit.SRCSEL              = 0U;          -- Filter Block Signal Source Select\r\n     */\r\n    EPwm3Regs.DCFCTL.all = (EPwm3Regs.DCFCTL.all & ~0x3FU) | 0x10U;\r\n    EPwm3Regs.DCFOFFSET = 0U;          // Digital Compare Filter Offset Register\r\n    EPwm3Regs.DCFWINDOW = 0U;          // Digital Compare Filter Window Register\r\n\r\n    /*\t-- Digital Compare Capture Control Register\r\n       EPwm3Regs.DCCAPCTL.bit.CAPE              = 0U;          -- Counter Capture Enable\r\n     */\r\n    EPwm3Regs.DCCAPCTL.all = (EPwm3Regs.DCCAPCTL.all & ~0x1U) | 0x0U;\r\n\r\n    /*\t-- HRPWM Configuration Register\r\n       EPwm3Regs.HRCNFG.bit.SWAPAB              = 0U;          -- Swap EPWMA and EPWMB Outputs Bit\r\n       EPwm3Regs.HRCNFG.bit.SELOUTB             = 0U;          -- EPWMB Output Selection Bit\r\n     */\r\n    EPwm3Regs.HRCNFG.all = (EPwm3Regs.HRCNFG.all & ~0xA0U) | 0x0U;\r\n\r\n    /* Update the Link Registers with the link value for all the Compare values and TBPRD */\r\n    /* No error is thrown if the ePWM register exists in the model or not */\r\n    EPwm3Regs.EPWMXLINK.bit.TBPRDLINK = 2U;\r\n    EPwm3Regs.EPWMXLINK.bit.CMPALINK = 2U;\r\n    EPwm3Regs.EPWMXLINK.bit.CMPBLINK = 2U;\r\n    EPwm3Regs.EPWMXLINK.bit.CMPCLINK = 2U;\r\n    EPwm3Regs.EPWMXLINK.bit.CMPDLINK = 2U;\r\n\r\n    /* SYNCPER - Peripheral synchronization output event\r\n       EPwm3Regs.HRPCTL.bit.PWMSYNCSEL            = 0U;          -- EPWMSYNCPER selection\r\n       EPwm3Regs.HRPCTL.bit.PWMSYNCSELX           = 0U;          --  EPWMSYNCPER selection\r\n     */\r\n    EPwm3Regs.HRPCTL.all = (EPwm3Regs.HRPCTL.all & ~0x72U) | 0x0U;\r\n    EDIS;\r\n  }\r\n\r\n  /* Start for S-Function (c280xgpio_do): '<S15>/DRV830x Enable' */\r\n  EALLOW;\r\n  GpioCtrlRegs.GPDMUX2.all &= 0xFCFFFFFFU;\r\n  GpioCtrlRegs.GPDDIR.all |= 0x10000000U;\r\n  EDIS;\r\n\r\n  /* Start for S-Function (c2802xadc): '<S3>/ADC_B_IN2' */\r\n  if (MW_adcBInitFlag == 0U) {\r\n    InitAdcB();\r\n    MW_adcBInitFlag = 1U;\r\n  }\r\n\r\n  config_ADCB_SOC0 ();\r\n\r\n  /* Start for S-Function (c2802xadc): '<S3>/ADC_C_IN2' */\r\n  if (MW_adcCInitFlag == 0U) {\r\n    InitAdcC();\r\n    MW_adcCInitFlag = 1U;\r\n  }\r\n\r\n  config_ADCC_SOC0 ();\r\n\r\n  /* SystemInitialize for Enabled SubSystem: '<S11>/PosGen' */\r\n  /* InitializeConditions for UnitDelay: '<S30>/Unit Delay' */\r\n  mcb_pmsm_qep_offset_f2837_DWork.UnitDelay_DSTATE = 0.0F;\r\n\r\n  /* SystemInitialize for Merge: '<S25>/Merge' */\r\n  mcb_pmsm_qep_offset_f28379d_B.Merge_g = 0.0F;\r\n\r\n  /* SystemInitialize for Enabled SubSystem: '<S18>/Up Counter' */\r\n  /* InitializeConditions for Delay: '<S26>/Delay' */\r\n  mcb_pmsm_qep_offset_f2837_DWork.Delay_DSTATE_n = 0UL;\r\n\r\n  /* End of SystemInitialize for SubSystem: '<S18>/Up Counter' */\r\n  /* End of SystemInitialize for SubSystem: '<S11>/PosGen' */\r\n\r\n  /* End of SystemInitialize for S-Function (HardwareInterrupt_sfun): '<S8>/Hardware Interrupt' */\r\n\r\n  /* SystemInitialize for S-Function (HardwareInterrupt_sfun): '<S10>/Hardware Interrupt' incorporates:\r\n   *  SubSystem: '<Root>/Serial Receive'\r\n   */\r\n\r\n  /* System initialize for function-call system: '<Root>/Serial Receive' */\r\n\r\n  /* Start for S-Function (c28xsci_rx): '<S80>/SCI Receive' */\r\n\r\n  /* Initialize out port */\r\n  {\r\n    mcb_pmsm_qep_offset_f28379d_B.SCIReceive = (real32_T)0.0;\r\n  }\r\n\r\n  /*Configure Timer2 when blocking mode is enabled and Timeout is not inf*/\r\n  {\r\n    /* InitCpuTimers() - CPU Timers are also initialized in\r\n     * MW_c28xx_board.c in the generated code.\r\n     */\r\n    CpuTimer2Regs.PRD.all = 0xFFFFFFFFU;/* max Period*/\r\n    CpuTimer2Regs.TIM.all = 0xFFFFFFFFU;/* set Ctr*/\r\n    CpuTimer2Regs.TPR.all = 0x00U;     /* no prescaler    */\r\n    StartCpuTimer2();\r\n  }\r\n\r\n  /* End of SystemInitialize for S-Function (HardwareInterrupt_sfun): '<S10>/Hardware Interrupt' */\r\n\r\n  /* SystemInitialize for Atomic SubSystem: '<Root>/Heartbeat LED' */\r\n  /* Start for S-Function (c280xgpio_do): '<S2>/Digital Output2' */\r\n  EALLOW;\r\n  GpioCtrlRegs.GPBMUX1.all &= 0xFFFFFFCFU;\r\n  GpioCtrlRegs.GPBDIR.all |= 0x4U;\r\n  EDIS;\r\n\r\n  /* End of SystemInitialize for SubSystem: '<Root>/Heartbeat LED' */\r\n}\r\n\r\n/* Model terminate function */\r\nvoid mcb_pmsm_qep_offset_f28379d_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n\r\nvoid mcb_pmsm_qep_offset_f28379d_configure_interrupts(void)\r\n{\r\n  /* Register interrupt service routine */\r\n  HWI_TIC28x_ConfigureIRQ(33,&ADCB1_INT,0);\r\n  HWI_TIC28x_EnableIRQ(33);\r\n\r\n  /* Register interrupt service routine */\r\n  HWI_TIC28x_ConfigureIRQ(96,&SCIA_RX_INT,2);\r\n  HWI_TIC28x_EnableIRQ(96);\r\n}\r\n\r\n/* Hardware Interrupt Block: '<S8>/Hardware Interrupt' */\r\ninterrupt void ADCB1_INT(void)\r\n{\r\n  volatile unsigned int PIEIER1_stack_save = PieCtrlRegs.PIEIER1.all;\r\n  volatile unsigned int PIEIER9_stack_save = PieCtrlRegs.PIEIER9.all;\r\n  PieCtrlRegs.PIEIER1.all &= ~66;\r\n                              /*disable group1 lower/equal priority interrupts*/\r\n  PieCtrlRegs.PIEIER9.all &= ~1;\r\n                              /*disable group9 lower/equal priority interrupts*/\r\n  asm(\" RPT #5 || NOP\");               /*wait 5 cycles        */\r\n  IFR &= ~257;    /*eventually disable lower/equal priority pending interrupts*/\r\n  PieCtrlRegs.PIEACK.all = 257;\r\n                   /*ACK to allow other interrupts from the same group to fire*/\r\n  IER |= 1;\r\n  EINT;\r\n\r\n  /* Event: Default Event */\r\n  if (1 == runModel) {\r\n    {\r\n      /* S-Function (HardwareInterrupt_sfun): '<S8>/Hardware Interrupt' */\r\n\r\n      /* Output and update for function-call system: '<Root>/Offset Calculation' */\r\n      {\r\n        uint64_T tmp;\r\n        real32_T Bias;\r\n        real32_T u0_p;\r\n        uint32_T Data;\r\n        int16_T s51_iter;\r\n        uint16_T u0;\r\n        uint16_T u1;\r\n        boolean_T tmp_e;\r\n        boolean_T tmp_p;\r\n\r\n        /* UnitDelay: '<S53>/Output' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Output =\r\n          mcb_pmsm_qep_offset_f2837_DWork.Output_DSTATE;\r\n\r\n        /* S-Function (c280xqep): '<S3>/eQEP' */\r\n        {\r\n          mcb_pmsm_qep_offset_f28379d_B.eQEP_o1 = EQep1Regs.QPOSCNT;/*eQEP Position Counter*/\r\n          mcb_pmsm_qep_offset_f28379d_B.eQEP_o2 = EQep1Regs.QPOSILAT;\r\n          /* The position-counter value is latched into this register on an IEL*/\r\n        }\r\n\r\n        /* Outputs for IfAction SubSystem: '<S61>/PositionNoReset' incorporates:\r\n         *  ActionPort: '<S71>/Action Port'\r\n         */\r\n        /* If: '<S61>/If1' incorporates:\r\n         *  Constant: '<S76>/Constant'\r\n         *  Merge: '<S61>/Merge'\r\n         *  MinMax: '<S71>/MinMax'\r\n         *  Sum: '<S71>/Sum3'\r\n         *  Sum: '<S71>/Sum7'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum3_n =\r\n          mcb_pmsm_qep_offset_f28379d_B.eQEP_o1 -\r\n          mcb_pmsm_qep_offset_f28379d_B.eQEP_o2;\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum7 =\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum3_n + 4000U;\r\n        u0 = mcb_pmsm_qep_offset_f28379d_B.Sum3_n;\r\n        u1 = mcb_pmsm_qep_offset_f28379d_B.Sum7;\r\n        if (u0 <= u1) {\r\n          u1 = u0;\r\n        }\r\n\r\n        mcb_pmsm_qep_offset_f28379d_B.Merge_j = u1;\r\n\r\n        /* End of If: '<S61>/If1' */\r\n        /* End of Outputs for SubSystem: '<S61>/PositionNoReset' */\r\n\r\n        /* DataTypeConversion: '<S74>/DTC' */\r\n        mcb_pmsm_qep_offset_f28379d_B.DTC =\r\n          mcb_pmsm_qep_offset_f28379d_B.Merge_j;\r\n\r\n        /* Product: '<S61>/Product' incorporates:\r\n         *  Constant: '<S77>/Constant'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.Product =\r\n          mcb_pmsm_qep_offset_f28379d_B.DTC * 0.00025F;\r\n\r\n        /* Switch: '<S63>/Switch' incorporates:\r\n         *  Constant: '<S63>/Constant1'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.Switch = 0.0F;\r\n\r\n        /* If: '<S64>/If' */\r\n        if (mcb_pmsm_qep_offset_f28379d_B.Product <= 0.0F) {\r\n          /* Outputs for IfAction SubSystem: '<S64>/If Action Subsystem' incorporates:\r\n           *  ActionPort: '<S66>/Action Port'\r\n           */\r\n          /* Merge: '<S64>/Merge' incorporates:\r\n           *  Sum: '<S66>/Add'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.Merge = 1.0F;\r\n\r\n          /* End of Outputs for SubSystem: '<S64>/If Action Subsystem' */\r\n        } else {\r\n          /* Outputs for IfAction SubSystem: '<S64>/If Action Subsystem1' incorporates:\r\n           *  ActionPort: '<S67>/Action Port'\r\n           */\r\n          /* Merge: '<S64>/Merge' incorporates:\r\n           *  Sum: '<S67>/Add'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.Merge =\r\n            mcb_pmsm_qep_offset_f28379d_B.Product;\r\n\r\n          /* End of Outputs for SubSystem: '<S64>/If Action Subsystem1' */\r\n        }\r\n\r\n        /* End of If: '<S64>/If' */\r\n\r\n        /* Gain: '<S69>/Number of pole pairs' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Numberofpolepairs = 4.0F *\r\n          mcb_pmsm_qep_offset_f28379d_B.Merge;\r\n\r\n        /* Rounding: '<S65>/Floor' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Floor = (real32_T)floor\r\n          (mcb_pmsm_qep_offset_f28379d_B.Numberofpolepairs);\r\n\r\n        /* Sum: '<S65>/Add' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Add_c =\r\n          mcb_pmsm_qep_offset_f28379d_B.Numberofpolepairs -\r\n          mcb_pmsm_qep_offset_f28379d_B.Floor;\r\n\r\n        /* DataStoreRead: '<S11>/Data Store Read' */\r\n        mcb_pmsm_qep_offset_f28379d_B.DataStoreRead =\r\n          mcb_pmsm_qep_offset_f2837_DWork.Enable;\r\n\r\n        /* Outputs for Enabled SubSystem: '<S11>/PosGen' incorporates:\r\n         *  EnablePort: '<S18>/Enable'\r\n         */\r\n        if (mcb_pmsm_qep_offset_f28379d_B.DataStoreRead) {\r\n          if (!mcb_pmsm_qep_offset_f2837_DWork.PosGen_MODE) {\r\n            /* InitializeConditions for UnitDelay: '<S30>/Unit Delay' */\r\n            mcb_pmsm_qep_offset_f2837_DWork.UnitDelay_DSTATE = 0.0F;\r\n            mcb_pmsm_qep_offset_f2837_DWork.PosGen_MODE = true;\r\n          }\r\n\r\n          /* Outputs for Enabled SubSystem: '<S18>/Up Counter' incorporates:\r\n           *  EnablePort: '<S26>/Enable'\r\n           */\r\n          if (!mcb_pmsm_qep_offset_f2837_DWork.UpCounter_MODE) {\r\n            /* InitializeConditions for Delay: '<S26>/Delay' */\r\n            mcb_pmsm_qep_offset_f2837_DWork.Delay_DSTATE_n = 0UL;\r\n            mcb_pmsm_qep_offset_f2837_DWork.UpCounter_MODE = true;\r\n          }\r\n\r\n          /* Delay: '<S26>/Delay' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Delay =\r\n            mcb_pmsm_qep_offset_f2837_DWork.Delay_DSTATE_n;\r\n\r\n          /* Sum: '<S26>/Add1' incorporates:\r\n           *  Constant: '<S26>/Constant'\r\n           */\r\n          tmp = mcb_pmsm_qep_offset_f28379d_B.Delay + 1ULL;\r\n          if (tmp > 4294967295ULL) {\r\n            tmp = 4294967295ULL;\r\n          }\r\n\r\n          /* Sum: '<S26>/Add1' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Add1 = (uint32_T)tmp;\r\n\r\n          /* Update for Delay: '<S26>/Delay' */\r\n          mcb_pmsm_qep_offset_f2837_DWork.Delay_DSTATE_n =\r\n            mcb_pmsm_qep_offset_f28379d_B.Add1;\r\n\r\n          /* End of Outputs for SubSystem: '<S18>/Up Counter' */\r\n\r\n          /* RelationalOperator: '<S23>/Compare' incorporates:\r\n           *  Constant: '<S23>/Constant'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.Compare_b =\r\n            (mcb_pmsm_qep_offset_f28379d_B.Add1 <= 300000UL);\r\n\r\n          /* Logic: '<S18>/NOT' */\r\n          mcb_pmsm_qep_offset_f28379d_B.NOT_p =\r\n            !mcb_pmsm_qep_offset_f28379d_B.Compare_b;\r\n\r\n          /* Outputs for Enabled SubSystem: '<S18>/Subsystem' incorporates:\r\n           *  EnablePort: '<S24>/Enable'\r\n           */\r\n          if (mcb_pmsm_qep_offset_f28379d_B.NOT_p) {\r\n            /* DataStoreWrite: '<S24>/Data Store Write' incorporates:\r\n             *  Constant: '<S24>/Constant'\r\n             */\r\n            mcb_pmsm_qep_offset_f2837_DWork.Enable = false;\r\n          }\r\n\r\n          /* End of Outputs for SubSystem: '<S18>/Subsystem' */\r\n\r\n          /* RelationalOperator: '<S27>/Compare' incorporates:\r\n           *  Constant: '<S27>/Constant'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.Compare_p =\r\n            (mcb_pmsm_qep_offset_f28379d_B.Add1 >= 200000UL);\r\n\r\n          /* If: '<S25>/If' incorporates:\r\n           *  Constant: '<S25>/Count for 10 sec'\r\n           *  Constant: '<S25>/Count for 2 sec'\r\n           */\r\n          if (mcb_pmsm_qep_offset_f28379d_B.Add1 < 40000UL) {\r\n            /* Outputs for IfAction SubSystem: '<S25>/If Action Subsystem' incorporates:\r\n             *  ActionPort: '<S28>/Action Port'\r\n             */\r\n            /* Merge: '<S25>/Merge' incorporates:\r\n             *  Constant: '<S28>/Constant'\r\n             */\r\n            mcb_pmsm_qep_offset_f28379d_B.Merge_g = 0.0F;\r\n\r\n            /* End of Outputs for SubSystem: '<S25>/If Action Subsystem' */\r\n          } else if (mcb_pmsm_qep_offset_f28379d_B.Add1 < 200000UL) {\r\n            /* Outputs for IfAction SubSystem: '<S25>/If Action Subsystem2' incorporates:\r\n             *  ActionPort: '<S29>/Action Port'\r\n             */\r\n            /* Delay: '<S29>/Delay' */\r\n            mcb_pmsm_qep_offset_f28379d_B.Delay_f =\r\n              mcb_pmsm_qep_offset_f2837_DWork.Delay_DSTATE;\r\n\r\n            /* Sum: '<S29>/Add1' incorporates:\r\n             *  Constant: '<S29>/Constant1'\r\n             */\r\n            mcb_pmsm_qep_offset_f28379d_B.Add1_a =\r\n              mcb_pmsm_qep_offset_f28379d_B.Delay_f + 0.001F;\r\n\r\n            /* Saturate: '<S29>/Saturate to 'motor.calibSpeed' RPM' */\r\n            u0_p = mcb_pmsm_qep_offset_f28379d_B.Add1_a;\r\n            if (u0_p > 4.0F) {\r\n              /* Saturate: '<S29>/Saturate to 'motor.calibSpeed' RPM' */\r\n              mcb_pmsm_qep_offset_f28379d_B.SaturatetomotorcalibSpeedRPM = 4.0F;\r\n            } else if (u0_p < 0.0F) {\r\n              /* Saturate: '<S29>/Saturate to 'motor.calibSpeed' RPM' */\r\n              mcb_pmsm_qep_offset_f28379d_B.SaturatetomotorcalibSpeedRPM = 0.0F;\r\n            } else {\r\n              /* Saturate: '<S29>/Saturate to 'motor.calibSpeed' RPM' */\r\n              mcb_pmsm_qep_offset_f28379d_B.SaturatetomotorcalibSpeedRPM = u0_p;\r\n            }\r\n\r\n            /* End of Saturate: '<S29>/Saturate to 'motor.calibSpeed' RPM' */\r\n\r\n            /* Merge: '<S25>/Merge' incorporates:\r\n             *  Gain: '<S29>/Multiply'\r\n             */\r\n            mcb_pmsm_qep_offset_f28379d_B.Merge_g = 5.0E-5F *\r\n              mcb_pmsm_qep_offset_f28379d_B.SaturatetomotorcalibSpeedRPM;\r\n\r\n            /* Update for Delay: '<S29>/Delay' */\r\n            mcb_pmsm_qep_offset_f2837_DWork.Delay_DSTATE =\r\n              mcb_pmsm_qep_offset_f28379d_B.SaturatetomotorcalibSpeedRPM;\r\n\r\n            /* End of Outputs for SubSystem: '<S25>/If Action Subsystem2' */\r\n          }\r\n\r\n          /* End of If: '<S25>/If' */\r\n\r\n          /* UnitDelay: '<S30>/Unit Delay' */\r\n          mcb_pmsm_qep_offset_f28379d_B.UnitDelay =\r\n            mcb_pmsm_qep_offset_f2837_DWork.UnitDelay_DSTATE;\r\n\r\n          /* Logic: '<S30>/NOT' incorporates:\r\n           *  Constant: '<S30>/Constant_Reset'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.NOT_j = true;\r\n\r\n          /* Outputs for Enabled SubSystem: '<S30>/Accumulate' incorporates:\r\n           *  EnablePort: '<S32>/Enable'\r\n           */\r\n          /* Delay: '<S32>/Delay' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Delay_i =\r\n            mcb_pmsm_qep_offset_f2837_DWork.Delay_DSTATE_o;\r\n\r\n          /* Outputs for Enabled SubSystem: '<S32>/Subsystem' incorporates:\r\n           *  EnablePort: '<S33>/Enable'\r\n           */\r\n          if (mcb_pmsm_qep_offset_f28379d_B.Delay_i) {\r\n            /* SignalConversion generated from: '<S33>/Input' */\r\n            mcb_pmsm_qep_offset_f28379d_B.Input =\r\n              mcb_pmsm_qep_offset_f28379d_B.Merge_g;\r\n          }\r\n\r\n          /* End of Outputs for SubSystem: '<S32>/Subsystem' */\r\n\r\n          /* Sum: '<S32>/Add' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Add_d =\r\n            mcb_pmsm_qep_offset_f28379d_B.Input +\r\n            mcb_pmsm_qep_offset_f28379d_B.UnitDelay;\r\n\r\n          /* DataTypeConversion: '<S32>/Data Type Conversion' */\r\n          mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion_i = (int16_T)\r\n            (real32_T)floor(mcb_pmsm_qep_offset_f28379d_B.Add_d);\r\n\r\n          /* DataTypeConversion: '<S32>/Data Type Conversion1' */\r\n          mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion1_c =\r\n            mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion_i;\r\n\r\n          /* Sum: '<S32>/Add1' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Add1_j =\r\n            mcb_pmsm_qep_offset_f28379d_B.Add_d -\r\n            mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion1_c;\r\n\r\n          /* Update for Delay: '<S32>/Delay' incorporates:\r\n           *  Constant: '<S32>/Constant'\r\n           */\r\n          mcb_pmsm_qep_offset_f2837_DWork.Delay_DSTATE_o = true;\r\n\r\n          /* End of Outputs for SubSystem: '<S30>/Accumulate' */\r\n\r\n          /* Outputs for Enabled SubSystem: '<S25>/Subsystem' incorporates:\r\n           *  EnablePort: '<S31>/Enable'\r\n           */\r\n          if (mcb_pmsm_qep_offset_f28379d_B.Compare_p) {\r\n            mcb_pmsm_qep_offset_f2837_DWork.Subsystem_MODE = true;\r\n\r\n            /* Gain: '<S31>/Multiply' */\r\n            mcb_pmsm_qep_offset_f28379d_B.Multiply = 0.25F *\r\n              mcb_pmsm_qep_offset_f28379d_B.Add_c;\r\n\r\n            /* Switch: '<S25>/Switch' incorporates:\r\n             *  Constant: '<S25>/Constant'\r\n             */\r\n            mcb_pmsm_qep_offset_f28379d_B.Switch_b = 0.0F;\r\n          } else {\r\n            if (mcb_pmsm_qep_offset_f2837_DWork.Subsystem_MODE) {\r\n              /* Disable for Gain: '<S31>/Multiply' incorporates:\r\n               *  Outport: '<S31>/Offset'\r\n               */\r\n              mcb_pmsm_qep_offset_f28379d_B.Multiply = 0.0F;\r\n              mcb_pmsm_qep_offset_f2837_DWork.Subsystem_MODE = false;\r\n            }\r\n\r\n            /* Switch: '<S25>/Switch' */\r\n            mcb_pmsm_qep_offset_f28379d_B.Switch_b =\r\n              mcb_pmsm_qep_offset_f28379d_B.Add1_j;\r\n          }\r\n\r\n          /* End of Outputs for SubSystem: '<S25>/Subsystem' */\r\n\r\n          /* Update for UnitDelay: '<S30>/Unit Delay' */\r\n          mcb_pmsm_qep_offset_f2837_DWork.UnitDelay_DSTATE =\r\n            mcb_pmsm_qep_offset_f28379d_B.Add1_j;\r\n        } else if (mcb_pmsm_qep_offset_f2837_DWork.PosGen_MODE) {\r\n          /* Disable for Enabled SubSystem: '<S18>/Up Counter' */\r\n          if (mcb_pmsm_qep_offset_f2837_DWork.UpCounter_MODE) {\r\n            /* Disable for Sum: '<S26>/Add1' incorporates:\r\n             *  Outport: '<S26>/Count'\r\n             */\r\n            mcb_pmsm_qep_offset_f28379d_B.Add1 = 0UL;\r\n            mcb_pmsm_qep_offset_f2837_DWork.UpCounter_MODE = false;\r\n          }\r\n\r\n          /* End of Disable for SubSystem: '<S18>/Up Counter' */\r\n\r\n          /* Disable for Enabled SubSystem: '<S25>/Subsystem' */\r\n          if (mcb_pmsm_qep_offset_f2837_DWork.Subsystem_MODE) {\r\n            /* Disable for Gain: '<S31>/Multiply' incorporates:\r\n             *  Outport: '<S31>/Offset'\r\n             */\r\n            mcb_pmsm_qep_offset_f28379d_B.Multiply = 0.0F;\r\n            mcb_pmsm_qep_offset_f2837_DWork.Subsystem_MODE = false;\r\n          }\r\n\r\n          /* End of Disable for SubSystem: '<S25>/Subsystem' */\r\n\r\n          /* Disable for RelationalOperator: '<S23>/Compare' incorporates:\r\n           *  Outport: '<S18>/EnPWM'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.Compare_b = false;\r\n          mcb_pmsm_qep_offset_f2837_DWork.PosGen_MODE = false;\r\n        }\r\n\r\n        /* End of Outputs for SubSystem: '<S11>/PosGen' */\r\n\r\n        /* Switch: '<S3>/Switch' */\r\n        if (mcb_pmsm_qep_offset_f28379d_B.Compare_b) {\r\n          /* Switch: '<S3>/Switch' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch_k =\r\n            mcb_pmsm_qep_offset_f28379d_B.Add_c;\r\n        } else {\r\n          /* Switch: '<S3>/Switch' incorporates:\r\n           *  Constant: '<S3>/Constant'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch_k = -1.0F;\r\n        }\r\n\r\n        /* End of Switch: '<S3>/Switch' */\r\n\r\n        /* SignalConversion generated from: '<S52>/Byte Pack' */\r\n        mcb_pmsm_qep_offset_f28379d_B.TmpSignalConversionAtBytePackIn[0] =\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch_k;\r\n        mcb_pmsm_qep_offset_f28379d_B.TmpSignalConversionAtBytePackIn[1] =\r\n          mcb_pmsm_qep_offset_f28379d_B.Multiply;\r\n\r\n        /* S-Function (any2byte_svd): '<S52>/Byte Pack' */\r\n\r\n        /* Pack: <S52>/Byte Pack */\r\n        {\r\n          uint32_T MW_outputPortOffset = 0U;\r\n          uint16_T MW_inputPortWidth = 0U;\r\n\r\n          /* Packed output data type - uint32_T */\r\n          void* packData = &mcb_pmsm_qep_offset_f28379d_B.BytePack[0];\r\n\r\n          /* Packing the values of Input 1 */\r\n          /* Input data type - real32_T, size - 2 */\r\n          {\r\n            MW_inputPortWidth = (uint16_T)2 * sizeof(real32_T);\r\n            memcpy((void *)&(((uint16_T *)packData)[MW_outputPortOffset]), (void*)\r\n                   &mcb_pmsm_qep_offset_f28379d_B.TmpSignalConversionAtBytePackIn\r\n                   [0], MW_inputPortWidth);\r\n          }\r\n        }\r\n\r\n        /* If: '<S50>/If' */\r\n        if (mcb_pmsm_qep_offset_f28379d_B.Output == 0U) {\r\n          /* Outputs for IfAction SubSystem: '<S50>/Start' incorporates:\r\n           *  ActionPort: '<S56>/Action Port'\r\n           */\r\n          /* Merge: '<S50>/Merge' incorporates:\r\n           *  Constant: '<S56>/Start'\r\n           *  SignalConversion generated from: '<S56>/Data_out'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Data[0] = 1397969747UL;\r\n\r\n          /* SignalConversion generated from: '<S56>/Data' */\r\n          Data = mcb_pmsm_qep_offset_f28379d_B.BytePack[0];\r\n\r\n          /* End of Outputs for SubSystem: '<S50>/Start' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Data_fw[0] = Data;\r\n\r\n          /* Outputs for IfAction SubSystem: '<S50>/Start' incorporates:\r\n           *  ActionPort: '<S56>/Action Port'\r\n           */\r\n          /* Merge: '<S50>/Merge' incorporates:\r\n           *  SignalConversion generated from: '<S56>/Data_out'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Data[1] = Data;\r\n\r\n          /* SignalConversion generated from: '<S56>/Data' */\r\n          Data = mcb_pmsm_qep_offset_f28379d_B.BytePack[1];\r\n\r\n          /* End of Outputs for SubSystem: '<S50>/Start' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Data_fw[1] = Data;\r\n\r\n          /* Outputs for IfAction SubSystem: '<S50>/Start' incorporates:\r\n           *  ActionPort: '<S56>/Action Port'\r\n           */\r\n          /* Merge: '<S50>/Merge' incorporates:\r\n           *  SignalConversion generated from: '<S56>/Data_out'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Data[2] = Data;\r\n\r\n          /* Merge: '<S50>/Merge1' incorporates:\r\n           *  Bias: '<S56>/Bias'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Iteration =\r\n            mcb_pmsm_qep_offset_f283_ConstB.Width + 1UL;\r\n\r\n          /* End of Outputs for SubSystem: '<S50>/Start' */\r\n        } else if (mcb_pmsm_qep_offset_f28379d_B.Output == 599U) {\r\n          /* Outputs for IfAction SubSystem: '<S50>/End' incorporates:\r\n           *  ActionPort: '<S55>/Action Port'\r\n           */\r\n          /* SignalConversion generated from: '<S55>/Data' */\r\n          Data = mcb_pmsm_qep_offset_f28379d_B.BytePack[0];\r\n\r\n          /* End of Outputs for SubSystem: '<S50>/End' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Data_f[0] = Data;\r\n\r\n          /* Outputs for IfAction SubSystem: '<S50>/End' incorporates:\r\n           *  ActionPort: '<S55>/Action Port'\r\n           */\r\n          /* Merge: '<S50>/Merge' incorporates:\r\n           *  SignalConversion generated from: '<S55>/Data_out'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Data[0] = Data;\r\n\r\n          /* SignalConversion generated from: '<S55>/Data' */\r\n          Data = mcb_pmsm_qep_offset_f28379d_B.BytePack[1];\r\n\r\n          /* End of Outputs for SubSystem: '<S50>/End' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Data_f[1] = Data;\r\n\r\n          /* Outputs for IfAction SubSystem: '<S50>/End' incorporates:\r\n           *  ActionPort: '<S55>/Action Port'\r\n           */\r\n          /* Merge: '<S50>/Merge' incorporates:\r\n           *  Constant: '<S55>/End'\r\n           *  SignalConversion generated from: '<S55>/Data_out'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Data[1] = Data;\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Data[2] = 1162167621UL;\r\n\r\n          /* Merge: '<S50>/Merge1' incorporates:\r\n           *  Bias: '<S55>/Bias'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Iteration =\r\n            mcb_pmsm_qep_offset_f283_ConstB.Width + 1UL;\r\n\r\n          /* End of Outputs for SubSystem: '<S50>/End' */\r\n        } else {\r\n          /* Outputs for IfAction SubSystem: '<S50>/Data' incorporates:\r\n           *  ActionPort: '<S54>/Action Port'\r\n           */\r\n          /* SignalConversion generated from: '<S54>/Data' */\r\n          Data = mcb_pmsm_qep_offset_f28379d_B.BytePack[0];\r\n\r\n          /* End of Outputs for SubSystem: '<S50>/Data' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Data[0] = Data;\r\n\r\n          /* Outputs for IfAction SubSystem: '<S50>/Data' incorporates:\r\n           *  ActionPort: '<S54>/Action Port'\r\n           */\r\n          /* Merge: '<S50>/Merge' incorporates:\r\n           *  SignalConversion generated from: '<S54>/Data_out'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Data[0] = Data;\r\n\r\n          /* SignalConversion generated from: '<S54>/Data' */\r\n          Data = mcb_pmsm_qep_offset_f28379d_B.BytePack[1];\r\n\r\n          /* End of Outputs for SubSystem: '<S50>/Data' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Data[1] = Data;\r\n\r\n          /* Outputs for IfAction SubSystem: '<S50>/Data' incorporates:\r\n           *  ActionPort: '<S54>/Action Port'\r\n           */\r\n          /* Merge: '<S50>/Merge' incorporates:\r\n           *  Constant: '<S54>/Dummy'\r\n           *  SignalConversion generated from: '<S54>/Data_out'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Data[1] = Data;\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Data[2] = 0UL;\r\n\r\n          /* Merge: '<S50>/Merge1' incorporates:\r\n           *  SignalConversion generated from: '<S54>/Data_width'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Iteration =\r\n            mcb_pmsm_qep_offset_f283_ConstB.Width;\r\n\r\n          /* End of Outputs for SubSystem: '<S50>/Data' */\r\n        }\r\n\r\n        /* End of If: '<S50>/If' */\r\n\r\n        /* Outputs for Iterator SubSystem: '<S12>/While Iterator Subsystem' incorporates:\r\n         *  WhileIterator: '<S51>/While Iterator'\r\n         */\r\n        s51_iter = 1;\r\n        do {\r\n          mcb_pmsm_qep_offset_f28379d_B.WhileIterator = s51_iter;\r\n          mcb_pmsm_qep_offset_f28379d_B.IndexVector =\r\n            mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Data[mcb_pmsm_qep_offset_f28379d_B.WhileIterator\r\n            - 1];\r\n\r\n          {\r\n            if (checkSCITransmitInProgressA != 1U) {\r\n              checkSCITransmitInProgressA = 1U;\r\n              int16_T errFlgHeader = NOERROR;\r\n              int16_T errFlgData = NOERROR;\r\n              int16_T errFlgTail = NOERROR;\r\n              errFlgData = scia_xmit((uchar_T*)\r\n                &mcb_pmsm_qep_offset_f28379d_B.IndexVector, 4, 4);\r\n              checkSCITransmitInProgressA = 0U;\r\n            }\r\n          }\r\n\r\n          mcb_pmsm_qep_offset_f28379d_B.Add =\r\n            mcb_pmsm_qep_offset_f28379d_B.SCI_Tx_Iteration - (uint32_T)\r\n            mcb_pmsm_qep_offset_f28379d_B.WhileIterator;\r\n          s51_iter++;\r\n        } while (mcb_pmsm_qep_offset_f28379d_B.Add != 0UL);\r\n\r\n        /* End of Outputs for SubSystem: '<S12>/While Iterator Subsystem' */\r\n\r\n        /* Sum: '<S57>/FixPt Sum1' incorporates:\r\n         *  Constant: '<S57>/FixPt Constant'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.FixPtSum1 =\r\n          mcb_pmsm_qep_offset_f28379d_B.Output + 1U;\r\n\r\n        /* Switch: '<S58>/FixPt Switch' */\r\n        if (mcb_pmsm_qep_offset_f28379d_B.FixPtSum1 > 599U) {\r\n          /* Switch: '<S58>/FixPt Switch' incorporates:\r\n           *  Constant: '<S58>/Constant'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.FixPtSwitch = 0U;\r\n        } else {\r\n          /* Switch: '<S58>/FixPt Switch' */\r\n          mcb_pmsm_qep_offset_f28379d_B.FixPtSwitch =\r\n            mcb_pmsm_qep_offset_f28379d_B.FixPtSum1;\r\n        }\r\n\r\n        /* End of Switch: '<S58>/FixPt Switch' */\r\n\r\n        /* RelationalOperator: '<S38>/Compare' incorporates:\r\n         *  Constant: '<S38>/Constant'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.Compare =\r\n          (mcb_pmsm_qep_offset_f28379d_B.Switch_b < 0.0F);\r\n\r\n        /* DataTypeConversion: '<S36>/Data Type Conversion' */\r\n        mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion =\r\n          mcb_pmsm_qep_offset_f28379d_B.Compare;\r\n\r\n        /* If: '<S36>/If' */\r\n        if (mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion > 0U) {\r\n          /* Outputs for IfAction SubSystem: '<S36>/If Action Subsystem' incorporates:\r\n           *  ActionPort: '<S39>/Action Port'\r\n           */\r\n          /* DataTypeConversion: '<S39>/Convert_uint16' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Convert_uint16_c = (int16_T)(real32_T)\r\n            floor(mcb_pmsm_qep_offset_f28379d_B.Switch_b);\r\n\r\n          /* DataTypeConversion: '<S39>/Convert_back' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Convert_back_g =\r\n            mcb_pmsm_qep_offset_f28379d_B.Convert_uint16_c;\r\n\r\n          /* Merge: '<S36>/Merge' incorporates:\r\n           *  Sum: '<S39>/Sum'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.Merge_f =\r\n            mcb_pmsm_qep_offset_f28379d_B.Switch_b -\r\n            mcb_pmsm_qep_offset_f28379d_B.Convert_back_g;\r\n\r\n          /* End of Outputs for SubSystem: '<S36>/If Action Subsystem' */\r\n        } else {\r\n          /* Outputs for IfAction SubSystem: '<S36>/If Action Subsystem1' incorporates:\r\n           *  ActionPort: '<S40>/Action Port'\r\n           */\r\n          /* DataTypeConversion: '<S40>/Convert_uint16' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Convert_uint16 = (int16_T)\r\n            mcb_pmsm_qep_offset_f28379d_B.Switch_b;\r\n\r\n          /* DataTypeConversion: '<S40>/Convert_back' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Convert_back =\r\n            mcb_pmsm_qep_offset_f28379d_B.Convert_uint16;\r\n\r\n          /* Merge: '<S36>/Merge' incorporates:\r\n           *  Sum: '<S40>/Sum'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.Merge_f =\r\n            mcb_pmsm_qep_offset_f28379d_B.Switch_b -\r\n            mcb_pmsm_qep_offset_f28379d_B.Convert_back;\r\n\r\n          /* End of Outputs for SubSystem: '<S36>/If Action Subsystem1' */\r\n        }\r\n\r\n        /* End of If: '<S36>/If' */\r\n\r\n        /* Gain: '<S34>/indexing' */\r\n        mcb_pmsm_qep_offset_f28379d_B.indexing = 800.0F *\r\n          mcb_pmsm_qep_offset_f28379d_B.Merge_f;\r\n\r\n        /* DataTypeConversion: '<S34>/Get_Integer' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Get_Integer = (uint16_T)\r\n          mcb_pmsm_qep_offset_f28379d_B.indexing;\r\n\r\n        /* Sum: '<S34>/Sum' incorporates:\r\n         *  Constant: '<S34>/offset'\r\n         */\r\n        Data = mcb_pmsm_qep_offset_f28379d_B.Get_Integer + 1UL;\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum[0] = Data;\r\n\r\n        /* Selector: '<S34>/Lookup' incorporates:\r\n         *  Constant: '<S34>/sine_table_values'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.Lookup[0] =\r\n          mcb_pmsm_qep_offset_f283_ConstP.sine_table_values_Value[(int16_T)Data];\r\n\r\n        /* Sum: '<S34>/Sum' */\r\n        Data = mcb_pmsm_qep_offset_f28379d_B.Get_Integer;\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum[1] = Data;\r\n\r\n        /* Selector: '<S34>/Lookup' incorporates:\r\n         *  Constant: '<S34>/sine_table_values'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.Lookup[1] =\r\n          mcb_pmsm_qep_offset_f283_ConstP.sine_table_values_Value[(int16_T)Data];\r\n\r\n        /* Sum: '<S34>/Sum' incorporates:\r\n         *  Constant: '<S34>/offset'\r\n         */\r\n        Data = mcb_pmsm_qep_offset_f28379d_B.Get_Integer + 201UL;\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum[2] = Data;\r\n\r\n        /* Selector: '<S34>/Lookup' incorporates:\r\n         *  Constant: '<S34>/sine_table_values'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.Lookup[2] =\r\n          mcb_pmsm_qep_offset_f283_ConstP.sine_table_values_Value[(int16_T)Data];\r\n\r\n        /* Sum: '<S34>/Sum' incorporates:\r\n         *  Constant: '<S34>/offset'\r\n         */\r\n        Data = mcb_pmsm_qep_offset_f28379d_B.Get_Integer + 200UL;\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum[3] = Data;\r\n\r\n        /* Selector: '<S34>/Lookup' incorporates:\r\n         *  Constant: '<S34>/sine_table_values'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.Lookup[3] =\r\n          mcb_pmsm_qep_offset_f283_ConstP.sine_table_values_Value[(int16_T)Data];\r\n\r\n        /* Sum: '<S35>/Sum3' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum3 =\r\n          mcb_pmsm_qep_offset_f28379d_B.Lookup[0] -\r\n          mcb_pmsm_qep_offset_f28379d_B.Lookup[1];\r\n\r\n        /* DataTypeConversion: '<S34>/Data Type Conversion1' */\r\n        mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion1 =\r\n          mcb_pmsm_qep_offset_f28379d_B.Get_Integer;\r\n\r\n        /* Sum: '<S34>/Sum2' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum2 =\r\n          mcb_pmsm_qep_offset_f28379d_B.indexing -\r\n          mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion1;\r\n\r\n        /* Product: '<S35>/Product' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Product_j =\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum3 *\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum2;\r\n\r\n        /* Sum: '<S35>/Sum4' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum4 =\r\n          mcb_pmsm_qep_offset_f28379d_B.Product_j +\r\n          mcb_pmsm_qep_offset_f28379d_B.Lookup[1];\r\n\r\n        /* Sum: '<S35>/Sum5' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum5 =\r\n          mcb_pmsm_qep_offset_f28379d_B.Lookup[2] -\r\n          mcb_pmsm_qep_offset_f28379d_B.Lookup[3];\r\n\r\n        /* Product: '<S35>/Product1' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Product1 =\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum5 *\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum2;\r\n\r\n        /* Sum: '<S35>/Sum6' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Sum6 =\r\n          mcb_pmsm_qep_offset_f28379d_B.Product1 +\r\n          mcb_pmsm_qep_offset_f28379d_B.Lookup[3];\r\n\r\n        /* Outputs for Atomic SubSystem: '<S17>/Two inputs CRL' */\r\n        /* Product: '<S21>/qcos' incorporates:\r\n         *  Constant: '<S11>/Constant'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.qcos = 0.0F *\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum6;\r\n\r\n        /* Product: '<S21>/dsin' incorporates:\r\n         *  Constant: '<S11>/Vd_Ref'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.dsin = 0.15F *\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum4;\r\n\r\n        /* Sum: '<S21>/sum_beta' */\r\n        mcb_pmsm_qep_offset_f28379d_B.sum_beta =\r\n          mcb_pmsm_qep_offset_f28379d_B.qcos +\r\n          mcb_pmsm_qep_offset_f28379d_B.dsin;\r\n\r\n        /* Product: '<S21>/dcos' incorporates:\r\n         *  Constant: '<S11>/Vd_Ref'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.dcos = 0.15F *\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum6;\r\n\r\n        /* Product: '<S21>/qsin' incorporates:\r\n         *  Constant: '<S11>/Constant'\r\n         */\r\n        mcb_pmsm_qep_offset_f28379d_B.qsin = 0.0F *\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum4;\r\n\r\n        /* Sum: '<S21>/sum_alpha' */\r\n        mcb_pmsm_qep_offset_f28379d_B.sum_alpha =\r\n          mcb_pmsm_qep_offset_f28379d_B.dcos -\r\n          mcb_pmsm_qep_offset_f28379d_B.qsin;\r\n\r\n        /* Switch: '<S22>/Switch' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Switch_k5[0] =\r\n          mcb_pmsm_qep_offset_f28379d_B.sum_alpha;\r\n        mcb_pmsm_qep_offset_f28379d_B.Switch_k5[1] =\r\n          mcb_pmsm_qep_offset_f28379d_B.sum_beta;\r\n\r\n        /* AlgorithmDescriptorDelegate generated from: '<S21>/a16' */\r\n        mcb_pmsm_qep_offset_f28379d_B.algDD_o1 =\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch_k5[0];\r\n\r\n        /* AlgorithmDescriptorDelegate generated from: '<S21>/a16' */\r\n        mcb_pmsm_qep_offset_f28379d_B.algDD_o2 =\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch_k5[1];\r\n\r\n        /* End of Outputs for SubSystem: '<S17>/Two inputs CRL' */\r\n\r\n        /* Switch: '<S14>/Switch4' */\r\n        if (mcb_pmsm_qep_offset_f28379d_B.Compare_b) {\r\n          /* Gain: '<S48>/sqrt3_by_two' */\r\n          mcb_pmsm_qep_offset_f28379d_B.sqrt3_by_two = 0.866025388F *\r\n            mcb_pmsm_qep_offset_f28379d_B.algDD_o2;\r\n\r\n          /* Gain: '<S48>/one_by_two' */\r\n          mcb_pmsm_qep_offset_f28379d_B.one_by_two = 0.5F *\r\n            mcb_pmsm_qep_offset_f28379d_B.algDD_o1;\r\n\r\n          /* Sum: '<S48>/add_c' */\r\n          mcb_pmsm_qep_offset_f28379d_B.add_c = (0.0F -\r\n            mcb_pmsm_qep_offset_f28379d_B.one_by_two) -\r\n            mcb_pmsm_qep_offset_f28379d_B.sqrt3_by_two;\r\n\r\n          /* Sum: '<S48>/add_b' */\r\n          mcb_pmsm_qep_offset_f28379d_B.add_b =\r\n            mcb_pmsm_qep_offset_f28379d_B.sqrt3_by_two -\r\n            mcb_pmsm_qep_offset_f28379d_B.one_by_two;\r\n\r\n          /* MinMax: '<S45>/Min' incorporates:\r\n           *  MinMax: '<S45>/Max'\r\n           */\r\n          u0_p = mcb_pmsm_qep_offset_f28379d_B.algDD_o1;\r\n          Bias = mcb_pmsm_qep_offset_f28379d_B.add_b;\r\n          tmp_p = rtIsNaNF(Bias);\r\n          if ((u0_p <= Bias) || tmp_p) {\r\n            Bias = u0_p;\r\n          }\r\n\r\n          u0_p = mcb_pmsm_qep_offset_f28379d_B.add_c;\r\n          tmp_e = rtIsNaNF(u0_p);\r\n          if ((!(Bias <= u0_p)) && (!tmp_e)) {\r\n            Bias = u0_p;\r\n          }\r\n\r\n          /* MinMax: '<S45>/Min' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Min = Bias;\r\n\r\n          /* MinMax: '<S45>/Max' */\r\n          u0_p = mcb_pmsm_qep_offset_f28379d_B.algDD_o1;\r\n          Bias = mcb_pmsm_qep_offset_f28379d_B.add_b;\r\n          if ((u0_p >= Bias) || tmp_p) {\r\n            Bias = u0_p;\r\n          }\r\n\r\n          u0_p = mcb_pmsm_qep_offset_f28379d_B.add_c;\r\n          if ((!(Bias >= u0_p)) && (!tmp_e)) {\r\n            Bias = u0_p;\r\n          }\r\n\r\n          /* MinMax: '<S45>/Max' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Max = Bias;\r\n\r\n          /* Sum: '<S45>/Add' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Add_i =\r\n            mcb_pmsm_qep_offset_f28379d_B.Max +\r\n            mcb_pmsm_qep_offset_f28379d_B.Min;\r\n\r\n          /* Gain: '<S45>/one_by_two' */\r\n          mcb_pmsm_qep_offset_f28379d_B.one_by_two_b = -0.5F *\r\n            mcb_pmsm_qep_offset_f28379d_B.Add_i;\r\n\r\n          /* Sum: '<S44>/Add2' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Add2 =\r\n            mcb_pmsm_qep_offset_f28379d_B.one_by_two_b +\r\n            mcb_pmsm_qep_offset_f28379d_B.add_c;\r\n\r\n          /* Sum: '<S44>/Add1' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Add1_m =\r\n            mcb_pmsm_qep_offset_f28379d_B.add_b +\r\n            mcb_pmsm_qep_offset_f28379d_B.one_by_two_b;\r\n\r\n          /* Sum: '<S44>/Add3' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Add3 =\r\n            mcb_pmsm_qep_offset_f28379d_B.algDD_o1 +\r\n            mcb_pmsm_qep_offset_f28379d_B.one_by_two_b;\r\n\r\n          /* Gain: '<S44>/Gain' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Gain[0] = 1.15470052F *\r\n            mcb_pmsm_qep_offset_f28379d_B.Add3;\r\n          mcb_pmsm_qep_offset_f28379d_B.Gain[1] = 1.15470052F *\r\n            mcb_pmsm_qep_offset_f28379d_B.Add1_m;\r\n          mcb_pmsm_qep_offset_f28379d_B.Gain[2] = 1.15470052F *\r\n            mcb_pmsm_qep_offset_f28379d_B.Add2;\r\n\r\n          /* Sum: '<S14>/Sum' incorporates:\r\n           *  Constant: '<S14>/Constant'\r\n           */\r\n          Bias = mcb_pmsm_qep_offset_f28379d_B.Gain[0] + 1.0F;\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum_d[0] = Bias;\r\n\r\n          /* Gain: '<S14>/Gain' */\r\n          Bias *= 0.5F;\r\n          mcb_pmsm_qep_offset_f28379d_B.Gain_h[0] = Bias;\r\n\r\n          /* Gain: '<S14>/Scale_to_PWM_Counter_PRD' */\r\n          u0 = (uint16_T)(5000.0F * Bias);\r\n          mcb_pmsm_qep_offset_f28379d_B.Scale_to_PWM_Counter_PRD[0] = u0;\r\n\r\n          /* Switch: '<S14>/Switch4' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch4[0] = u0;\r\n\r\n          /* Sum: '<S14>/Sum' incorporates:\r\n           *  Constant: '<S14>/Constant'\r\n           */\r\n          Bias = mcb_pmsm_qep_offset_f28379d_B.Gain[1] + 1.0F;\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum_d[1] = Bias;\r\n\r\n          /* Gain: '<S14>/Gain' */\r\n          Bias *= 0.5F;\r\n          mcb_pmsm_qep_offset_f28379d_B.Gain_h[1] = Bias;\r\n\r\n          /* Gain: '<S14>/Scale_to_PWM_Counter_PRD' */\r\n          u0 = (uint16_T)(5000.0F * Bias);\r\n          mcb_pmsm_qep_offset_f28379d_B.Scale_to_PWM_Counter_PRD[1] = u0;\r\n\r\n          /* Switch: '<S14>/Switch4' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch4[1] = u0;\r\n\r\n          /* Sum: '<S14>/Sum' incorporates:\r\n           *  Constant: '<S14>/Constant'\r\n           */\r\n          Bias = mcb_pmsm_qep_offset_f28379d_B.Gain[2] + 1.0F;\r\n          mcb_pmsm_qep_offset_f28379d_B.Sum_d[2] = Bias;\r\n\r\n          /* Gain: '<S14>/Gain' */\r\n          Bias *= 0.5F;\r\n          mcb_pmsm_qep_offset_f28379d_B.Gain_h[2] = Bias;\r\n\r\n          /* Gain: '<S14>/Scale_to_PWM_Counter_PRD' */\r\n          u0 = (uint16_T)(5000.0F * Bias);\r\n          mcb_pmsm_qep_offset_f28379d_B.Scale_to_PWM_Counter_PRD[2] = u0;\r\n\r\n          /* Switch: '<S14>/Switch4' */\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch4[2] = u0;\r\n        } else {\r\n          /* Switch: '<S14>/Switch4' incorporates:\r\n           *  Constant: '<S14>/stop'\r\n           */\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch4[0] = 0.0F;\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch4[1] = 0.0F;\r\n          mcb_pmsm_qep_offset_f28379d_B.Switch4[2] = 0.0F;\r\n        }\r\n\r\n        /* End of Switch: '<S14>/Switch4' */\r\n\r\n        /* S-Function (c2802xpwm): '<S15>/ePWM1' */\r\n        uint16_T tbprdValue1Outputs = EPwm1Regs.TBPRD;\r\n\r\n        /*-- Update CMPA value for ePWM1 --*/\r\n        {\r\n          EPwm1Regs.CMPA.bit.CMPA = (uint16_T)\r\n            (mcb_pmsm_qep_offset_f28379d_B.Switch4[0]);\r\n        }\r\n\r\n        /* S-Function (c2802xpwm): '<S15>/ePWM2' */\r\n        uint16_T tbprdValue2Outputs = EPwm2Regs.TBPRD;\r\n\r\n        /*-- Update CMPA value for ePWM2 --*/\r\n        {\r\n          EPwm2Regs.CMPA.bit.CMPA = (uint16_T)\r\n            (mcb_pmsm_qep_offset_f28379d_B.Switch4[1]);\r\n        }\r\n\r\n        /* S-Function (c2802xpwm): '<S15>/ePWM3' */\r\n        uint16_T tbprdValue3Outputs = EPwm3Regs.TBPRD;\r\n\r\n        /*-- Update CMPA value for ePWM3 --*/\r\n        {\r\n          EPwm3Regs.CMPA.bit.CMPA = (uint16_T)\r\n            (mcb_pmsm_qep_offset_f28379d_B.Switch4[2]);\r\n        }\r\n\r\n        /* Switch: '<S15>/Switch' */\r\n        mcb_pmsm_qep_offset_f28379d_B.Switch_j =\r\n          mcb_pmsm_qep_offset_f28379d_B.Compare_b;\r\n\r\n        /* S-Function (c280xgpio_do): '<S15>/DRV830x Enable' */\r\n        {\r\n          if (mcb_pmsm_qep_offset_f28379d_B.Switch_j) {\r\n            GpioDataRegs.GPDSET.bit.GPIO124 = 1U;\r\n          } else {\r\n            GpioDataRegs.GPDCLEAR.bit.GPIO124 = 1U;\r\n          }\r\n        }\r\n\r\n        /* S-Function (c2802xadc): '<S3>/ADC_B_IN2' */\r\n        {\r\n          /*  Internal Reference Voltage : Fixed scale 0 to 3.3 V range.  */\r\n          /*  External Reference Voltage : Allowable ranges of VREFHI(ADCINA0) = 3.3 and VREFLO(tied to ground) = 0  */\r\n          mcb_pmsm_qep_offset_f28379d_B.ADC_B_IN2 = (AdcbResultRegs.ADCRESULT0);\r\n        }\r\n\r\n        /* S-Function (c2802xadc): '<S3>/ADC_C_IN2' */\r\n        {\r\n          /*  Internal Reference Voltage : Fixed scale 0 to 3.3 V range.  */\r\n          /*  External Reference Voltage : Allowable ranges of VREFHI(ADCINA0) = 3.3 and VREFLO(tied to ground) = 0  */\r\n          mcb_pmsm_qep_offset_f28379d_B.ADC_C_IN2 = (AdccResultRegs.ADCRESULT0);\r\n        }\r\n\r\n        /* Update for UnitDelay: '<S53>/Output' */\r\n        mcb_pmsm_qep_offset_f2837_DWork.Output_DSTATE =\r\n          mcb_pmsm_qep_offset_f28379d_B.FixPtSwitch;\r\n      }\r\n\r\n      /* End of Outputs for S-Function (HardwareInterrupt_sfun): '<S8>/Hardware Interrupt' */\r\n    }\r\n  }\r\n\r\n  /* Clear occurred EOC event event */\r\n  AdcbRegs.ADCINTFLGCLR.bit.ADCINT1= 1;\r\n\r\n  /* Clear occurred Overflow event event */\r\n  AdcbRegs.ADCINTOVFCLR.bit.ADCINT1= 1;\r\n  DINT;\r\n  /* disable global interrupts during context switch, CPU will enable global interrupts after exiting ISR */\r\n  PieCtrlRegs.PIEIER1.all = PIEIER1_stack_save;\r\n                                   /*restore PIEIER register that was modified*/\r\n  PieCtrlRegs.PIEIER9.all = PIEIER9_stack_save;\r\n                                   /*restore PIEIER register that was modified*/\r\n  HWI_TIC28x_AcknowledgeIrq(33);\r\n}\r\n\r\n/* Hardware Interrupt Block: '<S10>/Hardware Interrupt' */\r\ninterrupt void SCIA_RX_INT(void)\r\n{\r\n  /* Event: Default Event */\r\n  if (1 == runModel) {\r\n    {\r\n      /* S-Function (HardwareInterrupt_sfun): '<S10>/Hardware Interrupt' */\r\n\r\n      /* Output and update for function-call system: '<Root>/Serial Receive' */\r\n\r\n      /* S-Function (c28xsci_rx): '<S80>/SCI Receive' */\r\n      {\r\n        int16_T i;\r\n        int16_T errFlg = NOERROR;\r\n        uint16_T isHeadReceived = 1U;\r\n\r\n        //get data as uint16 in recBuff\r\n        uint16_T recbuff[2];\r\n        for (i = 0; i < 2; i++) {\r\n          recbuff[i] = 0U;\r\n        }\r\n\r\n        errFlg = NOERROR;\r\n\r\n        /* Receiving data: For uint32 and uint16, rcvBuff will contain uint16 data */\r\n        if (isHeadReceived) {\r\n          errFlg = scia_rcv(recbuff, 4, 4);\r\n          if ((errFlg != NOERROR) && (errFlg != PARTIALDATA)) {\r\n            mcb_pmsm_qep_offset_f28379d_B.SCIReceive = 0.0;\r\n          }\r\n\r\n          if ((errFlg == NOERROR) || (errFlg == PARTIALDATA)) {\r\n            memcpy( &mcb_pmsm_qep_offset_f28379d_B.SCIReceive, recbuff,2);\r\n          }\r\n        }\r\n      }\r\n\r\n      /* DataTypeConversion: '<S4>/Data Type Conversion' */\r\n      mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion_o =\r\n        (mcb_pmsm_qep_offset_f28379d_B.SCIReceive != 0.0F);\r\n\r\n      /* DataStoreWrite: '<S4>/Data Store Write' */\r\n      mcb_pmsm_qep_offset_f2837_DWork.Enable =\r\n        mcb_pmsm_qep_offset_f28379d_B.DataTypeConversion_o;\r\n\r\n      /* End of Outputs for S-Function (HardwareInterrupt_sfun): '<S10>/Hardware Interrupt' */\r\n    }\r\n  }\r\n\r\n  /* Clear occurred Rx FIFO complete event */\r\n  EALLOW;\r\n  SciaRegs.SCIFFRX.bit.RXFFINTCLR= 1;\r\n  EDIS;\r\n\r\n  /* Clear occurred Rx FIFO overflow event */\r\n  EALLOW;\r\n  SciaRegs.SCIFFRX.bit.RXFFOVRCLR= 1;\r\n  EDIS;\r\n  HWI_TIC28x_AcknowledgeIrq(96);\r\n}\r\n\r\nvoid mcb_pmsm_qep_offset_f28379d_unconfigure_interrupts (void)\r\n{\r\n  HWI_TIC28x_DisableIRQ(33);\r\n  HWI_TIC28x_DisableIRQ(96);\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mcb_pmsm_qep_offset_f28379d.h","type":"header","group":"model","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mcb_pmsm_qep_offset_f28379d.h\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef mcb_pmsm_qep_offset_f28379d_h_\r\n#define mcb_pmsm_qep_offset_f28379d_h_\r\n#ifndef mcb_pmsm_qep_offset_f28379d_COMMON_INCLUDES_\r\n#define mcb_pmsm_qep_offset_f28379d_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"c2000BoardSupport.h\"\r\n#include \"MW_f2837xD_includes.h\"\r\n#include \"string.h\"\r\n#include \"DSP28xx_SciUtil.h\"\r\n#include \"IQmathLib.h\"\r\n#endif                        /* mcb_pmsm_qep_offset_f28379d_COMMON_INCLUDES_ */\r\n\r\n#include \"MW_c2000ISR.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d_types.h\"\r\n#include <stddef.h>\r\n#include <string.h>\r\n#include \"rt_nonfinite.h\"\r\n#include \"MW_target_hardware_resources.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\nextern void init_SCI(void);\r\nextern void init_SCI_GPIO(void);\r\nextern void config_ePWMSyncSource(void);\r\nextern void config_ePWM_GPIO (void);\r\nextern void config_ePWM_TBSync (void);\r\nextern void config_ePWM_XBAR(void);\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  uint32_T BytePack[2];                /* '<S52>/Byte Pack' */\r\n  uint32_T SCI_Tx_Data[3];             /* '<S50>/Merge' */\r\n  uint32_T SCI_Tx_Iteration;           /* '<S50>/Merge1' */\r\n  uint32_T Sum[4];                     /* '<S34>/Sum' */\r\n  uint32_T IndexVector;                /* '<S51>/Index Vector' */\r\n  uint32_T Add;                        /* '<S51>/Add' */\r\n  uint32_T Data[2];                    /* '<S54>/Data' */\r\n  uint32_T Data_f[2];                  /* '<S55>/Data' */\r\n  uint32_T Data_fw[2];                 /* '<S56>/Data' */\r\n  uint32_T Delay;                      /* '<S26>/Delay' */\r\n  uint32_T Add1;                       /* '<S26>/Add1' */\r\n  real32_T SCIReceive;                 /* '<S80>/SCI Receive' */\r\n  real32_T DTC;                        /* '<S74>/DTC' */\r\n  real32_T Product;                    /* '<S61>/Product' */\r\n  real32_T Switch;                     /* '<S63>/Switch' */\r\n  real32_T Merge;                      /* '<S64>/Merge' */\r\n  real32_T Numberofpolepairs;          /* '<S69>/Number of pole pairs' */\r\n  real32_T Floor;                      /* '<S65>/Floor' */\r\n  real32_T Add_c;                      /* '<S65>/Add' */\r\n  real32_T Switch_k;                   /* '<S3>/Switch' */\r\n  real32_T TmpSignalConversionAtBytePackIn[2];\r\n  real32_T Merge_f;                    /* '<S36>/Merge' */\r\n  real32_T indexing;                   /* '<S34>/indexing' */\r\n  real32_T Lookup[4];                  /* '<S34>/Lookup' */\r\n  real32_T Sum3;                       /* '<S35>/Sum3' */\r\n  real32_T DataTypeConversion1;        /* '<S34>/Data Type Conversion1' */\r\n  real32_T Sum2;                       /* '<S34>/Sum2' */\r\n  real32_T Product_j;                  /* '<S35>/Product' */\r\n  real32_T Sum4;                       /* '<S35>/Sum4' */\r\n  real32_T Sum5;                       /* '<S35>/Sum5' */\r\n  real32_T Product1;                   /* '<S35>/Product1' */\r\n  real32_T Sum6;                       /* '<S35>/Sum6' */\r\n  real32_T Switch4[3];                 /* '<S14>/Switch4' */\r\n  real32_T sqrt3_by_two;               /* '<S48>/sqrt3_by_two' */\r\n  real32_T one_by_two;                 /* '<S48>/one_by_two' */\r\n  real32_T add_c;                      /* '<S48>/add_c' */\r\n  real32_T add_b;                      /* '<S48>/add_b' */\r\n  real32_T Min;                        /* '<S45>/Min' */\r\n  real32_T Max;                        /* '<S45>/Max' */\r\n  real32_T Add_i;                      /* '<S45>/Add' */\r\n  real32_T one_by_two_b;               /* '<S45>/one_by_two' */\r\n  real32_T Add2;                       /* '<S44>/Add2' */\r\n  real32_T Add1_m;                     /* '<S44>/Add1' */\r\n  real32_T Add3;                       /* '<S44>/Add3' */\r\n  real32_T Gain[3];                    /* '<S44>/Gain' */\r\n  real32_T Sum_d[3];                   /* '<S14>/Sum' */\r\n  real32_T Gain_h[3];                  /* '<S14>/Gain' */\r\n  real32_T Convert_back;               /* '<S40>/Convert_back' */\r\n  real32_T Convert_back_g;             /* '<S39>/Convert_back' */\r\n  real32_T Merge_g;                    /* '<S25>/Merge' */\r\n  real32_T UnitDelay;                  /* '<S30>/Unit Delay' */\r\n  real32_T Switch_b;                   /* '<S25>/Switch' */\r\n  real32_T Multiply;                   /* '<S31>/Multiply' */\r\n  real32_T Add_d;                      /* '<S32>/Add' */\r\n  real32_T DataTypeConversion1_c;      /* '<S32>/Data Type Conversion1' */\r\n  real32_T Add1_j;                     /* '<S32>/Add1' */\r\n  real32_T Input;                      /* '<S33>/Input' */\r\n  real32_T Delay_f;                    /* '<S29>/Delay' */\r\n  real32_T Add1_a;                     /* '<S29>/Add1' */\r\n  real32_T SaturatetomotorcalibSpeedRPM;\r\n                                /* '<S29>/Saturate to 'motor.calibSpeed' RPM' */\r\n  real32_T qcos;                       /* '<S21>/qcos' */\r\n  real32_T dsin;                       /* '<S21>/dsin' */\r\n  real32_T sum_beta;                   /* '<S21>/sum_beta' */\r\n  real32_T dcos;                       /* '<S21>/dcos' */\r\n  real32_T qsin;                       /* '<S21>/qsin' */\r\n  real32_T sum_alpha;                  /* '<S21>/sum_alpha' */\r\n  real32_T Switch_k5[2];               /* '<S22>/Switch' */\r\n  real32_T algDD_o1;\r\n  real32_T algDD_o2;\r\n  uint16_T Output;                     /* '<S53>/Output' */\r\n  uint16_T eQEP_o1;                    /* '<S3>/eQEP' */\r\n  uint16_T eQEP_o2;                    /* '<S3>/eQEP' */\r\n  uint16_T Merge_j;                    /* '<S61>/Merge' */\r\n  uint16_T FixPtSum1;                  /* '<S57>/FixPt Sum1' */\r\n  uint16_T FixPtSwitch;                /* '<S58>/FixPt Switch' */\r\n  uint16_T DataTypeConversion;         /* '<S36>/Data Type Conversion' */\r\n  uint16_T Get_Integer;                /* '<S34>/Get_Integer' */\r\n  uint16_T ADC_B_IN2;                  /* '<S3>/ADC_B_IN2' */\r\n  uint16_T ADC_C_IN2;                  /* '<S3>/ADC_C_IN2' */\r\n  uint16_T Scale_to_PWM_Counter_PRD[3];/* '<S14>/Scale_to_PWM_Counter_PRD' */\r\n  uint16_T Sum3_n;                     /* '<S71>/Sum3' */\r\n  uint16_T Sum7;                       /* '<S71>/Sum7' */\r\n  int16_T WhileIterator;               /* '<S51>/While Iterator' */\r\n  int16_T Convert_uint16;              /* '<S40>/Convert_uint16' */\r\n  int16_T Convert_uint16_c;            /* '<S39>/Convert_uint16' */\r\n  int16_T DataTypeConversion_i;        /* '<S32>/Data Type Conversion' */\r\n  boolean_T DataTypeConversion_o;      /* '<S4>/Data Type Conversion' */\r\n  boolean_T DataStoreRead;             /* '<S11>/Data Store Read' */\r\n  boolean_T Compare;                   /* '<S38>/Compare' */\r\n  boolean_T Switch_j;                  /* '<S15>/Switch' */\r\n  boolean_T NOT;                       /* '<S15>/NOT' */\r\n  boolean_T Compare_b;                 /* '<S23>/Compare' */\r\n  boolean_T NOT_p;                     /* '<S18>/NOT' */\r\n  boolean_T Compare_p;                 /* '<S27>/Compare' */\r\n  boolean_T NOT_j;                     /* '<S30>/NOT' */\r\n  boolean_T Delay_i;                   /* '<S32>/Delay' */\r\n} BlockIO_mcb_pmsm_qep_offset_f28;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  uint64_T Add1_DWORK1;                /* '<S26>/Add1' */\r\n  real32_T UnitDelay_DSTATE;           /* '<S30>/Unit Delay' */\r\n  real32_T Delay_DSTATE;               /* '<S29>/Delay' */\r\n  uint32_T Delay_DSTATE_n;             /* '<S26>/Delay' */\r\n  int32_T DigitalOutput2_FRAC_LEN;     /* '<S2>/Digital Output2' */\r\n  int32_T DRV830xEnable_FRAC_LEN;      /* '<S15>/DRV830x Enable' */\r\n  uint32_T Sum_DWORK1[4];              /* '<S34>/Sum' */\r\n  uint32_T Add_DWORK1;                 /* '<S51>/Add' */\r\n  uint16_T Output_DSTATE;              /* '<S53>/Output' */\r\n  boolean_T Delay_DSTATE_o;            /* '<S32>/Delay' */\r\n  boolean_T Enable;                    /* '<Root>/Data Store Memory29' */\r\n  boolean_T PosGen_MODE;               /* '<S11>/PosGen' */\r\n  boolean_T UpCounter_MODE;            /* '<S18>/Up Counter' */\r\n  boolean_T Subsystem_MODE;            /* '<S25>/Subsystem' */\r\n} D_Work_mcb_pmsm_qep_offset_f283;\r\n\r\n/* Invariant block signals (default storage) */\r\ntypedef struct {\r\n  const uint32_T Width;                /* '<S50>/Width' */\r\n} ConstBlockIO_mcb_pmsm_qep_offse;\r\n\r\n/* Constant parameters (default storage) */\r\ntypedef struct {\r\n  /* Computed Parameter: sine_table_values_Value\r\n   * Referenced by: '<S34>/sine_table_values'\r\n   */\r\n  real32_T sine_table_values_Value[1002];\r\n} ConstParam_mcb_pmsm_qep_offset_;\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_mcb_pmsm_qep_offset_f28 {\r\n  const char_T * volatile errorStatus;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern BlockIO_mcb_pmsm_qep_offset_f28 mcb_pmsm_qep_offset_f28379d_B;\r\n\r\n/* Block states (default storage) */\r\nextern D_Work_mcb_pmsm_qep_offset_f283 mcb_pmsm_qep_offset_f2837_DWork;\r\nextern const ConstBlockIO_mcb_pmsm_qep_offse mcb_pmsm_qep_offset_f283_ConstB;/* constant block i/o */\r\n\r\n/* Constant parameters (default storage) */\r\nextern const ConstParam_mcb_pmsm_qep_offset_ mcb_pmsm_qep_offset_f283_ConstP;\r\n\r\n/* Model entry point functions */\r\nextern void mcb_pmsm_qep_offset_f28379d_initialize(void);\r\nextern void mcb_pmsm_qep_offset_f28379d_step(void);\r\nextern void mcb_pmsm_qep_offset_f28379d_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_mcb_pmsm_qep_offset_f2 *const mcb_pmsm_qep_offset_f28379d_M;\r\nextern volatile boolean_T stopRequested;\r\nextern volatile boolean_T runModel;\r\n\r\n#ifdef __cpluscplus\r\n\r\nextern \"C\"\r\n{\r\n\r\n#endif\r\n\r\n  interrupt void ADCB1_INT(void);\r\n  interrupt void SCIA_RX_INT(void);\r\n  void mcb_pmsm_qep_offset_f28379d_configure_interrupts (void);\r\n  void mcb_pmsm_qep_offset_f28379d_unconfigure_interrupts (void);\r\n\r\n#ifdef __cpluscplus\r\n\r\n}\r\n\r\n#endif\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'mcb_pmsm_qep_offset_f28379d'\r\n * '<S1>'   : 'mcb_pmsm_qep_offset_f28379d/HW Interrupt'\r\n * '<S2>'   : 'mcb_pmsm_qep_offset_f28379d/Heartbeat LED'\r\n * '<S3>'   : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation'\r\n * '<S4>'   : 'mcb_pmsm_qep_offset_f28379d/Serial Receive'\r\n * '<S5>'   : 'mcb_pmsm_qep_offset_f28379d/HW Interrupt/HWI_ADCB1_INT'\r\n * '<S6>'   : 'mcb_pmsm_qep_offset_f28379d/HW Interrupt/HWI_SCIA_RX_INT'\r\n * '<S7>'   : 'mcb_pmsm_qep_offset_f28379d/HW Interrupt/HWI_ADCB1_INT/ECSoC'\r\n * '<S8>'   : 'mcb_pmsm_qep_offset_f28379d/HW Interrupt/HWI_ADCB1_INT/ECSoC/ECSimCodegen'\r\n * '<S9>'   : 'mcb_pmsm_qep_offset_f28379d/HW Interrupt/HWI_SCIA_RX_INT/ECSoC'\r\n * '<S10>'  : 'mcb_pmsm_qep_offset_f28379d/HW Interrupt/HWI_SCIA_RX_INT/ECSoC/ECSimCodegen'\r\n * '<S11>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System'\r\n * '<S12>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output'\r\n * '<S13>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling'\r\n * '<S14>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Output Scaling'\r\n * '<S15>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/PWM Output'\r\n * '<S16>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Parameters'\r\n * '<S17>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Inverse Park Transform'\r\n * '<S18>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen'\r\n * '<S19>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Sine-Cosine Lookup'\r\n * '<S20>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Space Vector Generator'\r\n * '<S21>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Inverse Park Transform/Two inputs CRL'\r\n * '<S22>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Inverse Park Transform/Two inputs CRL/Switch_Axis'\r\n * '<S23>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Enable PWM for 15 seconds'\r\n * '<S24>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Subsystem'\r\n * '<S25>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Subsystem1'\r\n * '<S26>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Up Counter'\r\n * '<S27>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Subsystem1/Compare To Constant'\r\n * '<S28>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Subsystem1/If Action Subsystem'\r\n * '<S29>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Subsystem1/If Action Subsystem2'\r\n * '<S30>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Subsystem1/Position Generator'\r\n * '<S31>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Subsystem1/Subsystem'\r\n * '<S32>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Subsystem1/Position Generator/Accumulate'\r\n * '<S33>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/PosGen/Subsystem1/Position Generator/Accumulate/Subsystem'\r\n * '<S34>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup'\r\n * '<S35>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/Interpolation'\r\n * '<S36>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/WrapUp'\r\n * '<S37>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/datatype'\r\n * '<S38>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/WrapUp/Compare To Zero'\r\n * '<S39>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/WrapUp/If Action Subsystem'\r\n * '<S40>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/WrapUp/If Action Subsystem1'\r\n * '<S41>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Sine-Cosine Lookup/Sine-Cosine Lookup/datatype/datatype no change'\r\n * '<S42>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Space Vector Generator/Modulation method'\r\n * '<S43>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Space Vector Generator/Voltage Input'\r\n * '<S44>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Space Vector Generator/Modulation method/SVPWM'\r\n * '<S45>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Space Vector Generator/Modulation method/SVPWM/Half(Vmin+Vmax)'\r\n * '<S46>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Space Vector Generator/Voltage Input/Valphabeta'\r\n * '<S47>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Space Vector Generator/Voltage Input/Valphabeta/Inverse Clarke Transform'\r\n * '<S48>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Control_System/Space Vector Generator/Voltage Input/Valphabeta/Inverse Clarke Transform/Two phase input'\r\n * '<S49>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output/Data_Conditioning_Tx'\r\n * '<S50>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output/Data_Logging'\r\n * '<S51>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output/While Iterator Subsystem'\r\n * '<S52>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output/Data_Conditioning_Tx/Data_Type_Float'\r\n * '<S53>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output/Data_Logging/Counter Limited'\r\n * '<S54>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output/Data_Logging/Data'\r\n * '<S55>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output/Data_Logging/End'\r\n * '<S56>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output/Data_Logging/Start'\r\n * '<S57>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output/Data_Logging/Counter Limited/Increment Real World'\r\n * '<S58>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Data Serial Output/Data_Logging/Counter Limited/Wrap To Zero'\r\n * '<S59>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder'\r\n * '<S60>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Mechanical to Electrical Position'\r\n * '<S61>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Quadrature Decoder'\r\n * '<S62>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Mechanical to Electrical Position/MechToElec'\r\n * '<S63>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Mechanical to Electrical Position/MechToElec/floating-point'\r\n * '<S64>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Mechanical to Electrical Position/MechToElec/floating-point/Compensate Offset'\r\n * '<S65>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Mechanical to Electrical Position/MechToElec/floating-point/Mech To Elec'\r\n * '<S66>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Mechanical to Electrical Position/MechToElec/floating-point/Compensate Offset/If Action Subsystem'\r\n * '<S67>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Mechanical to Electrical Position/MechToElec/floating-point/Compensate Offset/If Action Subsystem1'\r\n * '<S68>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Mechanical to Electrical Position/MechToElec/floating-point/Mech To Elec/Variant Subsystem'\r\n * '<S69>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Mechanical to Electrical Position/MechToElec/floating-point/Mech To Elec/Variant Subsystem/Dialog'\r\n * '<S70>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Quadrature Decoder/DT_Handle'\r\n * '<S71>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Quadrature Decoder/PositionNoReset'\r\n * '<S72>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Quadrature Decoder/PositionResetAtIndex'\r\n * '<S73>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Quadrature Decoder/Variant Subsystem'\r\n * '<S74>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Quadrature Decoder/DT_Handle/floating-point'\r\n * '<S75>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Quadrature Decoder/PositionNoReset/Variant Subsystem'\r\n * '<S76>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Quadrature Decoder/PositionNoReset/Variant Subsystem/Dialog'\r\n * '<S77>'  : 'mcb_pmsm_qep_offset_f28379d/Offset Calculation/Input Scaling/eQEP_Decoder/Quadrature Decoder/Variant Subsystem/Dialog'\r\n * '<S78>'  : 'mcb_pmsm_qep_offset_f28379d/Serial Receive/Code Generation'\r\n * '<S79>'  : 'mcb_pmsm_qep_offset_f28379d/Serial Receive/Data_Conditioning_Rx'\r\n * '<S80>'  : 'mcb_pmsm_qep_offset_f28379d/Serial Receive/Code Generation/Data_Type_Float'\r\n * '<S81>'  : 'mcb_pmsm_qep_offset_f28379d/Serial Receive/Data_Conditioning_Rx/Data_Type_Float'\r\n */\r\n#endif                                 /* mcb_pmsm_qep_offset_f28379d_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mcb_pmsm_qep_offset_f28379d_private.h","type":"header","group":"model","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mcb_pmsm_qep_offset_f28379d_private.h\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef mcb_pmsm_qep_offset_f28379d_private_h_\r\n#define mcb_pmsm_qep_offset_f28379d_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d_types.h\"\r\n\r\nvoid config_QEP_eQEP1(uint32_T pcmaximumvalue, uint32_T pcInitialvalue, uint32_T\r\n                      unittimerperiod, uint32_T comparevalue, uint16_T\r\n                      watchdogtimer, uint16_T qdecctl, uint16_T qepctl, uint16_T\r\n                      qposctl, uint16_T qcapctl, uint16_T qeint);\r\nvoid InitAdcB (void);\r\nvoid config_ADCB_SOC0 (void);\r\nvoid InitAdcC (void);\r\nvoid config_ADCC_SOC0 (void);\r\nextern uint16_T MW_adcBInitFlag;\r\nextern uint16_T MW_adcCInitFlag;\r\n\r\n#endif                              /* mcb_pmsm_qep_offset_f28379d_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mcb_pmsm_qep_offset_f28379d_types.h","type":"header","group":"model","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mcb_pmsm_qep_offset_f28379d_types.h\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef mcb_pmsm_qep_offset_f28379d_types_h_\r\n#define mcb_pmsm_qep_offset_f28379d_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_mcb_pmsm_qep_offset_f28 RT_MODEL_mcb_pmsm_qep_offset_f2;\r\n\r\n#endif                                /* mcb_pmsm_qep_offset_f28379d_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"mcb_pmsm_qep_offset_f28379d_data.c","type":"source","group":"data","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: mcb_pmsm_qep_offset_f28379d_data.c\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"mcb_pmsm_qep_offset_f28379d.h\"\r\n\r\n/* Invariant block signals (default storage) */\r\nconst ConstBlockIO_mcb_pmsm_qep_offse mcb_pmsm_qep_offset_f283_ConstB = {\r\n  2U                                   /* '<S50>/Width' */\r\n};\r\n\r\n/* Constant parameters (default storage) */\r\nconst ConstParam_mcb_pmsm_qep_offset_ mcb_pmsm_qep_offset_f283_ConstP = {\r\n  /* Computed Parameter: sine_table_values_Value\r\n   * Referenced by: '<S34>/sine_table_values'\r\n   */\r\n  { 0.0F, 0.00785390101F, 0.0157073177F, 0.023559764F, 0.0314107575F,\r\n    0.0392598175F, 0.0471064523F, 0.0549501814F, 0.0627905205F, 0.070626989F,\r\n    0.0784591F, 0.086286366F, 0.0941083133F, 0.101924457F, 0.109734312F,\r\n    0.117537394F, 0.125333235F, 0.133121341F, 0.140901238F, 0.148672432F,\r\n    0.156434461F, 0.16418685F, 0.171929106F, 0.179660752F, 0.187381312F,\r\n    0.195090324F, 0.202787295F, 0.210471764F, 0.21814324F, 0.225801274F,\r\n    0.233445361F, 0.241075054F, 0.24868989F, 0.256289363F, 0.263873041F,\r\n    0.271440446F, 0.278991103F, 0.286524564F, 0.294040322F, 0.301537961F,\r\n    0.309017F, 0.316476971F, 0.323917419F, 0.331337899F, 0.338737935F,\r\n    0.346117049F, 0.353474855F, 0.360810816F, 0.368124545F, 0.375415564F,\r\n    0.382683426F, 0.389927685F, 0.397147894F, 0.404343605F, 0.411514372F,\r\n    0.418659747F, 0.425779283F, 0.432872593F, 0.439939171F, 0.446978629F,\r\n    0.453990489F, 0.460974365F, 0.46792981F, 0.474856377F, 0.481753677F,\r\n    0.488621235F, 0.495458663F, 0.502265513F, 0.509041429F, 0.515785873F,\r\n    0.522498548F, 0.529179F, 0.535826802F, 0.542441547F, 0.549022794F,\r\n    0.555570245F, 0.562083364F, 0.568561852F, 0.575005233F, 0.581413209F,\r\n    0.587785244F, 0.594121039F, 0.600420237F, 0.60668236F, 0.612907052F,\r\n    0.619093955F, 0.625242651F, 0.631352782F, 0.637424F, 0.643455863F,\r\n    0.649448037F, 0.655400157F, 0.661311865F, 0.667182744F, 0.673012495F,\r\n    0.678800762F, 0.684547126F, 0.690251231F, 0.695912778F, 0.70153141F,\r\n    0.707106769F, 0.712638497F, 0.718126297F, 0.723569751F, 0.72896862F,\r\n    0.734322488F, 0.739631116F, 0.744894F, 0.750111043F, 0.755281806F,\r\n    0.760405958F, 0.765483201F, 0.770513237F, 0.775495768F, 0.780430436F,\r\n    0.785316944F, 0.790155F, 0.794944346F, 0.799684644F, 0.804375648F, 0.809017F,\r\n    0.813608468F, 0.818149745F, 0.822640538F, 0.827080548F, 0.831469595F,\r\n    0.835807383F, 0.840093553F, 0.844327927F, 0.848510206F, 0.852640152F,\r\n    0.856717527F, 0.860742033F, 0.86471343F, 0.868631542F, 0.872496F,\r\n    0.876306653F, 0.880063295F, 0.883765638F, 0.887413442F, 0.891006529F,\r\n    0.894544661F, 0.898027599F, 0.901455104F, 0.904827058F, 0.908143163F,\r\n    0.911403298F, 0.914607167F, 0.91775465F, 0.920845509F, 0.923879504F,\r\n    0.926856577F, 0.92977649F, 0.932639F, 0.935444057F, 0.938191354F,\r\n    0.940880775F, 0.943512142F, 0.946085334F, 0.948600173F, 0.95105654F,\r\n    0.953454196F, 0.955793F, 0.958072901F, 0.96029371F, 0.962455213F,\r\n    0.964557409F, 0.96660012F, 0.968583167F, 0.970506489F, 0.972369909F,\r\n    0.974173367F, 0.975916743F, 0.977599919F, 0.979222834F, 0.980785251F,\r\n    0.982287228F, 0.983728647F, 0.985109329F, 0.986429274F, 0.987688363F,\r\n    0.988886476F, 0.990023673F, 0.991099775F, 0.992114723F, 0.993068457F,\r\n    0.993961F, 0.994792163F, 0.995561957F, 0.996270359F, 0.996917307F,\r\n    0.997502804F, 0.998026729F, 0.998489082F, 0.998889863F, 0.999229F,\r\n    0.999506533F, 0.999722421F, 0.999876618F, 0.999969184F, 1.0F, 0.999969184F,\r\n    0.999876618F, 0.999722421F, 0.999506533F, 0.999229F, 0.998889863F,\r\n    0.998489082F, 0.998026729F, 0.997502804F, 0.996917307F, 0.996270359F,\r\n    0.995561957F, 0.994792163F, 0.993961F, 0.993068457F, 0.992114723F,\r\n    0.991099775F, 0.990023673F, 0.988886476F, 0.987688363F, 0.986429274F,\r\n    0.985109329F, 0.983728647F, 0.982287228F, 0.980785251F, 0.979222834F,\r\n    0.977599919F, 0.975916743F, 0.974173367F, 0.972369909F, 0.970506489F,\r\n    0.968583167F, 0.96660012F, 0.964557409F, 0.962455213F, 0.96029371F,\r\n    0.958072901F, 0.955793F, 0.953454196F, 0.95105654F, 0.948600173F,\r\n    0.946085334F, 0.943512142F, 0.940880775F, 0.938191354F, 0.935444057F,\r\n    0.932639F, 0.92977649F, 0.926856577F, 0.923879504F, 0.920845509F,\r\n    0.91775465F, 0.914607167F, 0.911403298F, 0.908143163F, 0.904827058F,\r\n    0.901455104F, 0.898027599F, 0.894544661F, 0.891006529F, 0.887413442F,\r\n    0.883765638F, 0.880063295F, 0.876306653F, 0.872496F, 0.868631542F,\r\n    0.86471343F, 0.860742033F, 0.856717527F, 0.852640152F, 0.848510206F,\r\n    0.844327927F, 0.840093553F, 0.835807383F, 0.831469595F, 0.827080548F,\r\n    0.822640538F, 0.818149745F, 0.813608468F, 0.809017F, 0.804375648F,\r\n    0.799684644F, 0.794944346F, 0.790155F, 0.785316944F, 0.780430436F,\r\n    0.775495768F, 0.770513237F, 0.765483201F, 0.760405958F, 0.755281806F,\r\n    0.750111043F, 0.744894F, 0.739631116F, 0.734322488F, 0.72896862F,\r\n    0.723569751F, 0.718126297F, 0.712638497F, 0.707106769F, 0.70153141F,\r\n    0.695912778F, 0.690251231F, 0.684547126F, 0.678800762F, 0.673012495F,\r\n    0.667182744F, 0.661311865F, 0.655400157F, 0.649448037F, 0.643455863F,\r\n    0.637424F, 0.631352782F, 0.625242651F, 0.619093955F, 0.612907052F,\r\n    0.60668236F, 0.600420237F, 0.594121039F, 0.587785244F, 0.581413209F,\r\n    0.575005233F, 0.568561852F, 0.562083364F, 0.555570245F, 0.549022794F,\r\n    0.542441547F, 0.535826802F, 0.529179F, 0.522498548F, 0.515785873F,\r\n    0.509041429F, 0.502265513F, 0.495458663F, 0.488621235F, 0.481753677F,\r\n    0.474856377F, 0.46792981F, 0.460974365F, 0.453990489F, 0.446978629F,\r\n    0.439939171F, 0.432872593F, 0.425779283F, 0.418659747F, 0.411514372F,\r\n    0.404343605F, 0.397147894F, 0.389927685F, 0.382683426F, 0.375415564F,\r\n    0.368124545F, 0.360810816F, 0.353474855F, 0.346117049F, 0.338737935F,\r\n    0.331337899F, 0.323917419F, 0.316476971F, 0.309017F, 0.301537961F,\r\n    0.294040322F, 0.286524564F, 0.278991103F, 0.271440446F, 0.263873041F,\r\n    0.256289363F, 0.24868989F, 0.241075054F, 0.233445361F, 0.225801274F,\r\n    0.21814324F, 0.210471764F, 0.202787295F, 0.195090324F, 0.187381312F,\r\n    0.179660752F, 0.171929106F, 0.16418685F, 0.156434461F, 0.148672432F,\r\n    0.140901238F, 0.133121341F, 0.125333235F, 0.117537394F, 0.109734312F,\r\n    0.101924457F, 0.0941083133F, 0.086286366F, 0.0784591F, 0.070626989F,\r\n    0.0627905205F, 0.0549501814F, 0.0471064523F, 0.0392598175F, 0.0314107575F,\r\n    0.023559764F, 0.0157073177F, 0.00785390101F, 1.22464685E-16F,\r\n    -0.00785390101F, -0.0157073177F, -0.023559764F, -0.0314107575F,\r\n    -0.0392598175F, -0.0471064523F, -0.0549501814F, -0.0627905205F,\r\n    -0.070626989F, -0.0784591F, -0.086286366F, -0.0941083133F, -0.101924457F,\r\n    -0.109734312F, -0.117537394F, -0.125333235F, -0.133121341F, -0.140901238F,\r\n    -0.148672432F, -0.156434461F, -0.16418685F, -0.171929106F, -0.179660752F,\r\n    -0.187381312F, -0.195090324F, -0.202787295F, -0.210471764F, -0.21814324F,\r\n    -0.225801274F, -0.233445361F, -0.241075054F, -0.24868989F, -0.256289363F,\r\n    -0.263873041F, -0.271440446F, -0.278991103F, -0.286524564F, -0.294040322F,\r\n    -0.301537961F, -0.309017F, -0.316476971F, -0.323917419F, -0.331337899F,\r\n    -0.338737935F, -0.346117049F, -0.353474855F, -0.360810816F, -0.368124545F,\r\n    -0.375415564F, -0.382683426F, -0.389927685F, -0.397147894F, -0.404343605F,\r\n    -0.411514372F, -0.418659747F, -0.425779283F, -0.432872593F, -0.439939171F,\r\n    -0.446978629F, -0.453990489F, -0.460974365F, -0.46792981F, -0.474856377F,\r\n    -0.481753677F, -0.488621235F, -0.495458663F, -0.502265513F, -0.509041429F,\r\n    -0.515785873F, -0.522498548F, -0.529179F, -0.535826802F, -0.542441547F,\r\n    -0.549022794F, -0.555570245F, -0.562083364F, -0.568561852F, -0.575005233F,\r\n    -0.581413209F, -0.587785244F, -0.594121039F, -0.600420237F, -0.60668236F,\r\n    -0.612907052F, -0.619093955F, -0.625242651F, -0.631352782F, -0.637424F,\r\n    -0.643455863F, -0.649448037F, -0.655400157F, -0.661311865F, -0.667182744F,\r\n    -0.673012495F, -0.678800762F, -0.684547126F, -0.690251231F, -0.695912778F,\r\n    -0.70153141F, -0.707106769F, -0.712638497F, -0.718126297F, -0.723569751F,\r\n    -0.72896862F, -0.734322488F, -0.739631116F, -0.744894F, -0.750111043F,\r\n    -0.755281806F, -0.760405958F, -0.765483201F, -0.770513237F, -0.775495768F,\r\n    -0.780430436F, -0.785316944F, -0.790155F, -0.794944346F, -0.799684644F,\r\n    -0.804375648F, -0.809017F, -0.813608468F, -0.818149745F, -0.822640538F,\r\n    -0.827080548F, -0.831469595F, -0.835807383F, -0.840093553F, -0.844327927F,\r\n    -0.848510206F, -0.852640152F, -0.856717527F, -0.860742033F, -0.86471343F,\r\n    -0.868631542F, -0.872496F, -0.876306653F, -0.880063295F, -0.883765638F,\r\n    -0.887413442F, -0.891006529F, -0.894544661F, -0.898027599F, -0.901455104F,\r\n    -0.904827058F, -0.908143163F, -0.911403298F, -0.914607167F, -0.91775465F,\r\n    -0.920845509F, -0.923879504F, -0.926856577F, -0.92977649F, -0.932639F,\r\n    -0.935444057F, -0.938191354F, -0.940880775F, -0.943512142F, -0.946085334F,\r\n    -0.948600173F, -0.95105654F, -0.953454196F, -0.955793F, -0.958072901F,\r\n    -0.96029371F, -0.962455213F, -0.964557409F, -0.96660012F, -0.968583167F,\r\n    -0.970506489F, -0.972369909F, -0.974173367F, -0.975916743F, -0.977599919F,\r\n    -0.979222834F, -0.980785251F, -0.982287228F, -0.983728647F, -0.985109329F,\r\n    -0.986429274F, -0.987688363F, -0.988886476F, -0.990023673F, -0.991099775F,\r\n    -0.992114723F, -0.993068457F, -0.993961F, -0.994792163F, -0.995561957F,\r\n    -0.996270359F, -0.996917307F, -0.997502804F, -0.998026729F, -0.998489082F,\r\n    -0.998889863F, -0.999229F, -0.999506533F, -0.999722421F, -0.999876618F,\r\n    -0.999969184F, -1.0F, -0.999969184F, -0.999876618F, -0.999722421F,\r\n    -0.999506533F, -0.999229F, -0.998889863F, -0.998489082F, -0.998026729F,\r\n    -0.997502804F, -0.996917307F, -0.996270359F, -0.995561957F, -0.994792163F,\r\n    -0.993961F, -0.993068457F, -0.992114723F, -0.991099775F, -0.990023673F,\r\n    -0.988886476F, -0.987688363F, -0.986429274F, -0.985109329F, -0.983728647F,\r\n    -0.982287228F, -0.980785251F, -0.979222834F, -0.977599919F, -0.975916743F,\r\n    -0.974173367F, -0.972369909F, -0.970506489F, -0.968583167F, -0.96660012F,\r\n    -0.964557409F, -0.962455213F, -0.96029371F, -0.958072901F, -0.955793F,\r\n    -0.953454196F, -0.95105654F, -0.948600173F, -0.946085334F, -0.943512142F,\r\n    -0.940880775F, -0.938191354F, -0.935444057F, -0.932639F, -0.92977649F,\r\n    -0.926856577F, -0.923879504F, -0.920845509F, -0.91775465F, -0.914607167F,\r\n    -0.911403298F, -0.908143163F, -0.904827058F, -0.901455104F, -0.898027599F,\r\n    -0.894544661F, -0.891006529F, -0.887413442F, -0.883765638F, -0.880063295F,\r\n    -0.876306653F, -0.872496F, -0.868631542F, -0.86471343F, -0.860742033F,\r\n    -0.856717527F, -0.852640152F, -0.848510206F, -0.844327927F, -0.840093553F,\r\n    -0.835807383F, -0.831469595F, -0.827080548F, -0.822640538F, -0.818149745F,\r\n    -0.813608468F, -0.809017F, -0.804375648F, -0.799684644F, -0.794944346F,\r\n    -0.790155F, -0.785316944F, -0.780430436F, -0.775495768F, -0.770513237F,\r\n    -0.765483201F, -0.760405958F, -0.755281806F, -0.750111043F, -0.744894F,\r\n    -0.739631116F, -0.734322488F, -0.72896862F, -0.723569751F, -0.718126297F,\r\n    -0.712638497F, -0.707106769F, -0.70153141F, -0.695912778F, -0.690251231F,\r\n    -0.684547126F, -0.678800762F, -0.673012495F, -0.667182744F, -0.661311865F,\r\n    -0.655400157F, -0.649448037F, -0.643455863F, -0.637424F, -0.631352782F,\r\n    -0.625242651F, -0.619093955F, -0.612907052F, -0.60668236F, -0.600420237F,\r\n    -0.594121039F, -0.587785244F, -0.581413209F, -0.575005233F, -0.568561852F,\r\n    -0.562083364F, -0.555570245F, -0.549022794F, -0.542441547F, -0.535826802F,\r\n    -0.529179F, -0.522498548F, -0.515785873F, -0.509041429F, -0.502265513F,\r\n    -0.495458663F, -0.488621235F, -0.481753677F, -0.474856377F, -0.46792981F,\r\n    -0.460974365F, -0.453990489F, -0.446978629F, -0.439939171F, -0.432872593F,\r\n    -0.425779283F, -0.418659747F, -0.411514372F, -0.404343605F, -0.397147894F,\r\n    -0.389927685F, -0.382683426F, -0.375415564F, -0.368124545F, -0.360810816F,\r\n    -0.353474855F, -0.346117049F, -0.338737935F, -0.331337899F, -0.323917419F,\r\n    -0.316476971F, -0.309017F, -0.301537961F, -0.294040322F, -0.286524564F,\r\n    -0.278991103F, -0.271440446F, -0.263873041F, -0.256289363F, -0.24868989F,\r\n    -0.241075054F, -0.233445361F, -0.225801274F, -0.21814324F, -0.210471764F,\r\n    -0.202787295F, -0.195090324F, -0.187381312F, -0.179660752F, -0.171929106F,\r\n    -0.16418685F, -0.156434461F, -0.148672432F, -0.140901238F, -0.133121341F,\r\n    -0.125333235F, -0.117537394F, -0.109734312F, -0.101924457F, -0.0941083133F,\r\n    -0.086286366F, -0.0784591F, -0.070626989F, -0.0627905205F, -0.0549501814F,\r\n    -0.0471064523F, -0.0392598175F, -0.0314107575F, -0.023559764F,\r\n    -0.0157073177F, -0.00785390101F, -2.44929371E-16F, 0.00785390101F,\r\n    0.0157073177F, 0.023559764F, 0.0314107575F, 0.0392598175F, 0.0471064523F,\r\n    0.0549501814F, 0.0627905205F, 0.070626989F, 0.0784591F, 0.086286366F,\r\n    0.0941083133F, 0.101924457F, 0.109734312F, 0.117537394F, 0.125333235F,\r\n    0.133121341F, 0.140901238F, 0.148672432F, 0.156434461F, 0.16418685F,\r\n    0.171929106F, 0.179660752F, 0.187381312F, 0.195090324F, 0.202787295F,\r\n    0.210471764F, 0.21814324F, 0.225801274F, 0.233445361F, 0.241075054F,\r\n    0.24868989F, 0.256289363F, 0.263873041F, 0.271440446F, 0.278991103F,\r\n    0.286524564F, 0.294040322F, 0.301537961F, 0.309017F, 0.316476971F,\r\n    0.323917419F, 0.331337899F, 0.338737935F, 0.346117049F, 0.353474855F,\r\n    0.360810816F, 0.368124545F, 0.375415564F, 0.382683426F, 0.389927685F,\r\n    0.397147894F, 0.404343605F, 0.411514372F, 0.418659747F, 0.425779283F,\r\n    0.432872593F, 0.439939171F, 0.446978629F, 0.453990489F, 0.460974365F,\r\n    0.46792981F, 0.474856377F, 0.481753677F, 0.488621235F, 0.495458663F,\r\n    0.502265513F, 0.509041429F, 0.515785873F, 0.522498548F, 0.529179F,\r\n    0.535826802F, 0.542441547F, 0.549022794F, 0.555570245F, 0.562083364F,\r\n    0.568561852F, 0.575005233F, 0.581413209F, 0.587785244F, 0.594121039F,\r\n    0.600420237F, 0.60668236F, 0.612907052F, 0.619093955F, 0.625242651F,\r\n    0.631352782F, 0.637424F, 0.643455863F, 0.649448037F, 0.655400157F,\r\n    0.661311865F, 0.667182744F, 0.673012495F, 0.678800762F, 0.684547126F,\r\n    0.690251231F, 0.695912778F, 0.70153141F, 0.707106769F, 0.712638497F,\r\n    0.718126297F, 0.723569751F, 0.72896862F, 0.734322488F, 0.739631116F,\r\n    0.744894F, 0.750111043F, 0.755281806F, 0.760405958F, 0.765483201F,\r\n    0.770513237F, 0.775495768F, 0.780430436F, 0.785316944F, 0.790155F,\r\n    0.794944346F, 0.799684644F, 0.804375648F, 0.809017F, 0.813608468F,\r\n    0.818149745F, 0.822640538F, 0.827080548F, 0.831469595F, 0.835807383F,\r\n    0.840093553F, 0.844327927F, 0.848510206F, 0.852640152F, 0.856717527F,\r\n    0.860742033F, 0.86471343F, 0.868631542F, 0.872496F, 0.876306653F,\r\n    0.880063295F, 0.883765638F, 0.887413442F, 0.891006529F, 0.894544661F,\r\n    0.898027599F, 0.901455104F, 0.904827058F, 0.908143163F, 0.911403298F,\r\n    0.914607167F, 0.91775465F, 0.920845509F, 0.923879504F, 0.926856577F,\r\n    0.92977649F, 0.932639F, 0.935444057F, 0.938191354F, 0.940880775F,\r\n    0.943512142F, 0.946085334F, 0.948600173F, 0.95105654F, 0.953454196F,\r\n    0.955793F, 0.958072901F, 0.96029371F, 0.962455213F, 0.964557409F,\r\n    0.96660012F, 0.968583167F, 0.970506489F, 0.972369909F, 0.974173367F,\r\n    0.975916743F, 0.977599919F, 0.979222834F, 0.980785251F, 0.982287228F,\r\n    0.983728647F, 0.985109329F, 0.986429274F, 0.987688363F, 0.988886476F,\r\n    0.990023673F, 0.991099775F, 0.992114723F, 0.993068457F, 0.993961F,\r\n    0.994792163F, 0.995561957F, 0.996270359F, 0.996917307F, 0.997502804F,\r\n    0.998026729F, 0.998489082F, 0.998889863F, 0.999229F, 0.999506533F,\r\n    0.999722421F, 0.999876618F, 0.999969184F, 1.0F, 0.999969184F }\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetInf.c","type":"source","group":"utility","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtGetInf.c\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 16U\r\n\r\n/*\r\n * Initialize rtInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T inf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    inf = rtGetInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0x7FF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    inf = tmpVal.fltVal;\r\n  }\r\n\r\n  return inf;\r\n}\r\n\r\n/*\r\n * Initialize rtInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetInfF(void)\r\n{\r\n  IEEESingle infF;\r\n  infF.wordL.wordLuint = 0x7F800000U;\r\n  return infF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInf needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetMinusInf(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T minf = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    minf = rtGetMinusInfF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF00000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    minf = tmpVal.fltVal;\r\n  }\r\n\r\n  return minf;\r\n}\r\n\r\n/*\r\n * Initialize rtMinusInfF needed by the generated code.\r\n * Inf is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetMinusInfF(void)\r\n{\r\n  IEEESingle minfF;\r\n  minfF.wordL.wordLuint = 0xFF800000U;\r\n  return minfF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetInf.h","type":"header","group":"utility","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtGetInf.h\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtGetInf_h_\r\n#define rtGetInf_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetInf(void);\r\nextern real32_T rtGetInfF(void);\r\nextern real_T rtGetMinusInf(void);\r\nextern real32_T rtGetMinusInfF(void);\r\n\r\n#endif                                 /* rtGetInf_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.c","type":"source","group":"utility","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtGetNaN.c\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtwtypes.h\"\r\n#include \"rtGetNaN.h\"\r\n#include <stddef.h>\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 16U\r\n\r\n/*\r\n * Initialize rtNaN needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal_T rtGetNaN(void)\r\n{\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  real_T nan = 0.0;\r\n  if (bitsPerReal == 32U) {\r\n    nan = rtGetNaNF();\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.bitVal.words.wordH = 0xFFF80000U;\r\n    tmpVal.bitVal.words.wordL = 0x00000000U;\r\n    nan = tmpVal.fltVal;\r\n  }\r\n\r\n  return nan;\r\n}\r\n\r\n/*\r\n * Initialize rtNaNF needed by the generated code.\r\n * NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nreal32_T rtGetNaNF(void)\r\n{\r\n  IEEESingle nanF = { { 0.0F } };\r\n\r\n  nanF.wordL.wordLuint = 0xFFC00000U;\r\n  return nanF.wordL.wordLreal;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtGetNaN.h","type":"header","group":"utility","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtGetNaN.h\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtGetNaN_h_\r\n#define rtGetNaN_h_\r\n#include \"rt_nonfinite.h\"\r\n#include \"rtwtypes.h\"\r\n\r\nextern real_T rtGetNaN(void);\r\nextern real32_T rtGetNaNF(void);\r\n\r\n#endif                                 /* rtGetNaN_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.c","type":"source","group":"utility","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rt_nonfinite.c\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"rtGetNaN.h\"\r\n#include \"rtGetInf.h\"\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#include \"rt_nonfinite.h\"\r\n#define NumBitsPerChar                 16U\r\n\r\nreal_T rtInf;\r\nreal_T rtMinusInf;\r\nreal_T rtNaN;\r\nreal32_T rtInfF;\r\nreal32_T rtMinusInfF;\r\nreal32_T rtNaNF;\r\n\r\n/*\r\n * Initialize the rtInf, rtMinusInf, and rtNaN needed by the\r\n * generated code. NaN is initialized as non-signaling. Assumes IEEE.\r\n */\r\nvoid rt_InitInfAndNaN(size_t realSize)\r\n{\r\n  (void) (realSize);\r\n  rtNaN = rtGetNaN();\r\n  rtNaNF = rtGetNaNF();\r\n  rtInf = rtGetInf();\r\n  rtInfF = rtGetInfF();\r\n  rtMinusInf = rtGetMinusInf();\r\n  rtMinusInfF = rtGetMinusInfF();\r\n}\r\n\r\n/* Test if value is infinite */\r\nboolean_T rtIsInf(real_T value)\r\n{\r\n  return (boolean_T)((value==rtInf || value==rtMinusInf) ? 1U : 0U);\r\n}\r\n\r\n/* Test if single-precision value is infinite */\r\nboolean_T rtIsInfF(real32_T value)\r\n{\r\n  return (boolean_T)(((value)==rtInfF || (value)==rtMinusInfF) ? 1U : 0U);\r\n}\r\n\r\n/* Test if value is not a number */\r\nboolean_T rtIsNaN(real_T value)\r\n{\r\n  boolean_T result = (boolean_T) 0;\r\n  size_t bitsPerReal = sizeof(real_T) * (NumBitsPerChar);\r\n  if (bitsPerReal == 32U) {\r\n    result = rtIsNaNF((real32_T)value);\r\n  } else {\r\n    union {\r\n      LittleEndianIEEEDouble bitVal;\r\n      real_T fltVal;\r\n    } tmpVal;\r\n\r\n    tmpVal.fltVal = value;\r\n    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&\r\n                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||\r\n                          (tmpVal.bitVal.words.wordL != 0) ));\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Test if single-precision value is not a number */\r\nboolean_T rtIsNaNF(real32_T value)\r\n{\r\n  IEEESingle tmp;\r\n  tmp.wordL.wordLreal = value;\r\n  return (boolean_T)( (tmp.wordL.wordLuint & 0x7F800000) == 0x7F800000 &&\r\n                     (tmp.wordL.wordLuint & 0x007FFFFF) != 0 );\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rt_nonfinite.h","type":"header","group":"utility","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rt_nonfinite.h\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rt_nonfinite_h_\r\n#define rt_nonfinite_h_\r\n#include <stddef.h>\r\n#include \"rtwtypes.h\"\r\n#define NOT_USING_NONFINITE_LITERALS   1\r\n\r\nextern real_T rtInf;\r\nextern real_T rtMinusInf;\r\nextern real_T rtNaN;\r\nextern real32_T rtInfF;\r\nextern real32_T rtMinusInfF;\r\nextern real32_T rtNaNF;\r\nextern void rt_InitInfAndNaN(size_t realSize);\r\nextern boolean_T rtIsInf(real_T value);\r\nextern boolean_T rtIsInfF(real32_T value);\r\nextern boolean_T rtIsNaN(real_T value);\r\nextern boolean_T rtIsNaNF(real32_T value);\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordH;\r\n    uint32_T wordL;\r\n  } words;\r\n} BigEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  struct {\r\n    uint32_T wordL;\r\n    uint32_T wordH;\r\n  } words;\r\n} LittleEndianIEEEDouble;\r\n\r\ntypedef struct {\r\n  union {\r\n    real32_T wordLreal;\r\n    uint32_T wordLuint;\r\n  } wordL;\r\n} IEEESingle;\r\n\r\n#endif                                 /* rt_nonfinite_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Texas Instruments->C2000\r\n *   Number of bits:     char:  16    short:   16    int:  16\r\n *                       long:  32    long long:  64\r\n *                       native word size:  16\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *                                                                       *\r\n *                                                                       *\r\n *   Note:  Because the specified hardware does not have native support  *\r\n *          for all data sizes, some data types are actually typedef'ed  *\r\n *          from larger native data sizes.  The following data types are *\r\n *          not in the ideal native data types:                          *\r\n *                                                                       *\r\n *          int8_T, uint8_T                                              *\r\n *=======================================================================*/\r\ntypedef int int8_T;\r\ntypedef unsigned int uint8_T;\r\ntypedef int int16_T;\r\ntypedef unsigned int uint16_T;\r\ntypedef long int32_T;\r\ntypedef unsigned long uint32_T;\r\ntypedef long long int64_T;\r\ntypedef unsigned long long uint64_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T, ulonglong_T.           *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned int boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef unsigned long long ulonglong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647L))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647L-1L))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFUL))\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef rtmodel_h_\r\n#define rtmodel_h_\r\n#include \"mcb_pmsm_qep_offset_f28379d.h\"\r\n\r\n/* Macros generated for backwards compatibility  */\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((void*) 0)\r\n#endif\r\n#endif                                 /* rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"DSP28xx_SciUtil.c","type":"source","group":"","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: DSP28xx_SciUtil.c\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"DSP28xx_SciUtil.h\"\r\n\r\n// to prevent re-entrancy in SCI transmit function\r\nuint16_T checkSCITransmitInProgressA;\r\nuint32_T frameA1Count;\r\nuint16_T frameA1Transmitted;\r\n\r\n/* Transmit character(s) from the SCIa*/\r\nint16_T scia_xmit(uchar_T* pmsg, int16_T msglen, int16_T typeLen)\r\n/*Blocking mode*/\r\n{\r\n  int16_T i,j;\r\n  if (typeLen==1) {\r\n    for (i = 0; i < msglen; i++) {\r\n      while (SciaRegs.SCIFFTX.bit.TXFFST == 16U) {\r\n      }                                /* The buffer is full;*/\r\n\r\n      SciaRegs.SCITXBUF.bit.TXDT = pmsg[i];\r\n    }\r\n  } else {\r\n    for (i = 0; i < (msglen/2); i++) {\r\n      for (j = 0; j<=1; j++) {\r\n        while (SciaRegs.SCIFFTX.bit.TXFFST == 16U) {\r\n        }                              /* The buffer is full;*/\r\n\r\n        SciaRegs.SCITXBUF.bit.TXDT = pmsg[i]>>(8*j);\r\n      }\r\n    }\r\n  }\r\n\r\n  return 0;\r\n}\r\n\r\n/*\r\n * Receive character(s) from the SCIa\r\n * Received character(s) will be write to rcvBuff.\r\n * Return 0 if characters are received with no error.\r\n * Return 1 if waiting timeout.\r\n * Return 2 if data error.(receiving timeout or checksum error)\r\n * Return 3 if a parity error occurred.\r\n * Return 4 if a frame error occurred.\r\n */\r\nint16_T scia_rcv(uint16_T *rcvBuff, int16_T buffLen, int16_T typeLen)\r\n{\r\n  int16_T i;\r\n  int16_T errorVal = NOERROR;\r\n  uint16_T byte_cnt = 0;\r\n  Uint32 elapsedTimeCnt, startTimeCnt, currentTimeCnt;\r\n  uint32_T BlockingModeTimeoutCnt = 1.7500000000000002E+6;\r\n  for (i = 0; i<buffLen; i++) {\r\n    startTimeCnt = ReadCpuTimer2Counter();\r\n    elapsedTimeCnt = 0U;\r\n    while (SciaRegs.SCIFFRX.bit.RXFFST == 0U) {\r\n      /* wait until data received */\r\n      currentTimeCnt = (ReadCpuTimer2Counter());\r\n      if (currentTimeCnt <= startTimeCnt) {\r\n        elapsedTimeCnt = (Uint32)(startTimeCnt - currentTimeCnt);\r\n      } else {\r\n        elapsedTimeCnt = (Uint32)(0xFFFFFFFFU + startTimeCnt - currentTimeCnt);\r\n      }\r\n\r\n      if (elapsedTimeCnt >= BlockingModeTimeoutCnt) {\r\n        return TIMEOUT;\r\n      }\r\n    }\r\n\r\n    if (typeLen > 1) {\r\n      if (byte_cnt == 0U) {\r\n        rcvBuff[i/2] = (SciaRegs.SCIRXBUF.all & 0x00FFU);\r\n        byte_cnt = 1U;\r\n      } else {\r\n        rcvBuff[i/2] |= SciaRegs.SCIRXBUF.all << 8;\r\n        byte_cnt = 0U;\r\n      }\r\n    } else {\r\n      rcvBuff[i] = SciaRegs.SCIRXBUF.all;\r\n    }\r\n\r\n    //check flags\r\n    if (SciaRegs.SCIFFRX.bit.RXFFOVF == 1U)/* detect FIFO overflow*/\r\n    {\r\n      SciaRegs.SCIFFRX.bit.RXFFOVRCLR = 1U;\r\n\r\n      /*SciaRegs.SCIFFRX.bit.RXFIFORESET = 0U;    Reset the FIFO pointer to zero.\r\n       * SciaRegs.SCIFFRX.bit.RXFIFORESET = 1U;   Re-enable receive FIFO operation.\r\n       */\r\n    }\r\n\r\n    if (SciaRegs.SCIRXST.bit.FE) {\r\n      errorVal = FRAMERR;\r\n    }\r\n\r\n    if (SciaRegs.SCIRXST.bit.PE) {\r\n      errorVal = PRTYERR;\r\n    }\r\n\r\n    if (SciaRegs.SCIRXST.bit.OE) {\r\n      errorVal = OVRNERR;\r\n    }\r\n\r\n    if (SciaRegs.SCIRXST.bit.BRKDT) {\r\n      errorVal = BRKDTERR;\r\n    }\r\n\r\n    if (SciaRegs.SCIRXST.bit.RXERROR == 1U) {\r\n      SciaRegs.SCICTL1.bit.SWRESET = 1U;\r\n      SciaRegs.SCICTL1.bit.SWRESET = 0U;\r\n      SciaRegs.SCICTL1.bit.SWRESET = 1U;\r\n    }\r\n  }\r\n\r\n  return errorVal;\r\n}\r\n\r\n/*\r\n * Receive character(s) from the SCIa\r\n * Received character(s) will be write to rcvBuff.\r\n * Receive data until tail is received.\r\n * Once first byte of tail matches with received byte start tailCount\r\n * If in between tail byte is not matching with received byte then reset tailCount\r\n * When tailCount becomes equal to tailSize then update rcvBufferLen with received number of bytes, check forFlags and exit.\r\n *\r\n *\r\n * Return 0 if characters are received with no error.\r\n * Return 1 if waiting timeout.\r\n * Return 2 if data error.(receiving timeout or checksum error)\r\n * Return 3 if a parity error occurred.\r\n * Return 4 if a frame error occurred.\r\n */\r\nint16_T scia_rcv_varsize(uint16_T *rcvBuff, int16_T buffLen, int16_T typeLen,\r\n  uchar_T *expTail, int16_T tailsize, int16_T *rcvBufferLen)\r\n{\r\n  int16_T i = 0;\r\n  int16_T errorVal = NOERROR;\r\n  uint16_T byte_cnt = 0;\r\n  int16_T tailCount = 0;\r\n  int16_T totalLen = buffLen + tailsize;\r\n  *rcvBufferLen = 0;\r\n  while (i < totalLen) {\r\n    if (SciaRegs.SCIFFRX.bit.RXFFST > 0U) {/*Check if receive FIFO has data*/\r\n      if (typeLen > 1) {\r\n        int_T tempData = 0;\r\n        tempData = SciaRegs.SCIRXBUF.all;\r\n        if (byte_cnt == 0U) {\r\n          rcvBuff[i/2] = (tempData & 0x00FFU);\r\n          byte_cnt = 1U;\r\n        } else {\r\n          rcvBuff[i/2] |= tempData << 8;\r\n          byte_cnt = 0U;\r\n        }\r\n\r\n        if (tailsize != 0) {\r\n          // Do not check tail if tail is not provided\r\n          if (tempData == expTail[tailCount]) {\r\n            tailCount++;\r\n            if (tailCount == tailsize) {\r\n              *rcvBufferLen = i - tailsize + 1;\r\n              break;\r\n            }\r\n          } else {\r\n            tailCount = 0;\r\n          }\r\n        }\r\n      } else {\r\n        // for (typeLen<=1)\r\n        rcvBuff[i] = SciaRegs.SCIRXBUF.all;\r\n        if (tailsize != 0) {\r\n          // Do not check tail if tail is not provided\r\n          if (rcvBuff[i] == expTail[tailCount]) {\r\n            tailCount++;\r\n            if (tailCount == tailsize) {\r\n              *rcvBufferLen = i - tailsize + 1;\r\n              break;\r\n            }\r\n          }\r\n        } else {\r\n          tailCount = 0;\r\n        }\r\n      }\r\n    } else {\r\n      // If data is not available in FIFO i.e RXFFST == 0\r\n      if (i == 0) {\r\n        return DATANOTAVAILABLE;\r\n      } else {\r\n        *rcvBufferLen = i;\r\n        if (*rcvBufferLen > buffLen) {\r\n          *rcvBufferLen = buffLen;\r\n        }\r\n\r\n        errorVal = PARTIALDATA;\r\n        break;\r\n      }\r\n    }\r\n\r\n    i = i+1;\r\n\r\n    //Check flags\r\n    if (SciaRegs.SCIFFRX.bit.RXFFOVF == 1U)/* detect FIFO overflow*/\r\n    {\r\n      SciaRegs.SCIFFRX.bit.RXFFOVRCLR = 1U;\r\n\r\n      /*SciaRegs.SCIFFRX.bit.RXFIFORESET = 0U;    Reset the FIFO pointer to zero.\r\n       * SciaRegs.SCIFFRX.bit.RXFIFORESET = 1U;   Re-enable receive FIFO operation.\r\n       */\r\n    }\r\n\r\n    if (SciaRegs.SCIRXST.bit.FE) {\r\n      errorVal = FRAMERR;\r\n    }\r\n\r\n    if (SciaRegs.SCIRXST.bit.PE) {\r\n      errorVal = PRTYERR;\r\n    }\r\n\r\n    if (SciaRegs.SCIRXST.bit.OE) {\r\n      errorVal = OVRNERR;\r\n    }\r\n\r\n    if (SciaRegs.SCIRXST.bit.BRKDT) {\r\n      errorVal = BRKDTERR;\r\n    }\r\n\r\n    if (SciaRegs.SCIRXST.bit.RXERROR == 1U) {\r\n      SciaRegs.SCICTL1.bit.SWRESET = 1U;\r\n      SciaRegs.SCICTL1.bit.SWRESET = 0U;\r\n      SciaRegs.SCICTL1.bit.SWRESET = 1U;\r\n    }\r\n  }\r\n\r\n  if (0 == tailsize) {\r\n    if (errorVal != PARTIALDATA) {\r\n      //In case of tail not provided, error flag will NOERROR if data received is of max length\r\n      *rcvBufferLen = totalLen;\r\n    }\r\n  } else {\r\n    // error out as partial data received if tail is provided and not found till maximum length and output the length as max length\r\n    if (*rcvBufferLen == 0) {\r\n      if (tailCount != (i+1)) {\r\n        *rcvBufferLen = i-1;\r\n        errorVal = PARTIALDATA;\r\n      } else {\r\n        errorVal = DATANOTAVAILABLE;\r\n      }\r\n\r\n      if (*rcvBufferLen > buffLen) {\r\n        *rcvBufferLen = buffLen;\r\n      }\r\n\r\n      if (*rcvBufferLen < 0) {\r\n        *rcvBufferLen = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  return errorVal;\r\n}\r\n\r\nvoid init_SCIFrame(void)\r\n{\r\n  // to prevent re-entrancy in SCI transmit function\r\n  checkSCITransmitInProgressA = 0;\r\n  frameA1Count = 0U;\r\n  frameA1Transmitted = 1;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"DSP28xx_SciUtil.h","type":"header","group":"","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Other files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: DSP28xx_SciUtil.h\r\n *\r\n * Code generated for Simulink model 'mcb_pmsm_qep_offset_f28379d'.\r\n *\r\n * Model version                  : 9.3\r\n * Simulink Coder version         : 24.2 (R2024b) 21-Jun-2024\r\n * C/C++ source code generated on : Tue Dec 10 11:18:23 2024\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Texas Instruments->C2000\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef DSP28xx_SciUtil_h_\r\n#define DSP28xx_SciUtil_h_\r\n#include \"MW_f2837xD_includes.h\"\r\n#include \"F2837xD_device.h\"\r\n#include <string.h>\r\n#include \"rtwtypes.h\"\r\n#define NOERROR                        0                         /* no error*/\r\n#define TIMEOUT                        1                         /* waiting timeout*/\r\n#define DATAERR                        2                         /* data error (checksum error)*/\r\n#define PRTYERR                        3                         /* parity error*/\r\n#define FRAMERR                        4                         /* frame error*/\r\n#define OVRNERR                        5                         /* overrun error*/\r\n#define BRKDTERR                       6                         /* brake-detect error*/\r\n#define DATANOTAVAILABLE               7                         /* Data not available */\r\n#define PARTIALDATA                    8                         /* Partial Data available */\r\n\r\nextern uint16_T checkSCITransmitInProgressA;\r\nextern uint32_T frameA1Count;\r\nextern uint16_T frameA1Transmitted;\r\nint16_T scia_xmit(uchar_T* pmsg, int16_T msglen, int16_T typeLen);\r\nint16_T scia_rcv(uint16_T *rcvBuff, int16_T buffLen, int16_T typeLen);\r\nint16_T scia_rcv_varsize(uint16_T *rcvBuff, int16_T buffLen, int16_T typeLen,\r\n  uchar_T *expTail, int16_T tailsize, int16_T *rcvBufferLen);\r\nvoid init_SCIFrame(void);\r\n\r\n#endif                                 /* DSP28xx_SciUtil_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"F2837xD_Adc.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   F2837xD_Adc.c\n//\n// TITLE:  F2837xD Adc Support Functions.\n//\n//###########################################################################\n//\n// $Release Date: $\n// $Copyright:\n// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"F2837xD_device.h\"\n#include \"F2837xD_Examples.h\"\n\n//\n// AdcSetMode - Set the resolution and signalmode for a given ADC. This will\n//              ensure that the correct trim is loaded.\n//\n// NOTE!!! There is no EALLOW/EDIS in this function! You need to make sure you\n// perform the EALLOW before calling this function or else the ADC registers\n// will not be configured.\n//\nvoid AdcSetMode(Uint16 adc, Uint16 resolution, Uint16 signalmode)\n{\n    Uint16 adcOffsetTrimOTPIndex; //index into OTP table of ADC offset trims\n    Uint16 adcOffsetTrim;         //temporary ADC offset trim\n\n    //\n    //re-populate INL trim\n    //\n    CalAdcINL(adc);\n\n    if(0xFFFF != *((Uint16*)GetAdcOffsetTrimOTP))\n    {\n        //\n        //offset trim function is programmed into OTP, so call it\n        //\n\n        //\n        //calculate the index into OTP table of offset trims and call\n        //function to return the correct offset trim\n        //\n#ifndef _DUAL_HEADERS\n        if(ADC_RESOLUTION_12BIT == resolution)\n#else\n        if(ADC_BITRESOLUTION_12BIT == resolution)\n#endif\n        {\n            adcOffsetTrimOTPIndex = 4*adc + 1*signalmode;\n        }\n        else\n        {\n            adcOffsetTrimOTPIndex = 4*adc + 1*signalmode + 2;\n        }\n\n        adcOffsetTrim = (*GetAdcOffsetTrimOTP)(adcOffsetTrimOTPIndex);\n    }\n    else\n    {\n        //\n        //offset trim function is not populated, so set offset trim to 0\n        //\n        adcOffsetTrim = 0;\n    }\n\n    //\n    // Apply the resolution and signalmode to the specified ADC.\n    // Also apply the offset trim and, if needed, linearity trim correction.\n    //\n    switch(adc)\n    {\n        case ADC_ADCA:\n        {\n            AdcaRegs.ADCCTL2.bit.SIGNALMODE = signalmode;\n            if(adcOffsetTrim > 0x0)\n            {\n                AdcaRegs.ADCOFFTRIM.all = adcOffsetTrim;\n            }\n#ifndef _DUAL_HEADERS\n            if(ADC_RESOLUTION_12BIT == resolution)\n#else\n            if(ADC_BITRESOLUTION_12BIT == resolution)\n#endif\n            {\n                AdcaRegs.ADCCTL2.bit.RESOLUTION = 0;\n\n                //\n                //12-bit linearity trim workaround\n                //\n                AdcaRegs.ADCINLTRIM1 &= 0xFFFF0000;\n                AdcaRegs.ADCINLTRIM2 &= 0xFFFF0000;\n                AdcaRegs.ADCINLTRIM4 &= 0xFFFF0000;\n                AdcaRegs.ADCINLTRIM5 &= 0xFFFF0000;\n            }\n            else\n            {\n                AdcaRegs.ADCCTL2.bit.RESOLUTION = 1;\n            }\n            break;\n        }\n        case ADC_ADCB:\n        {\n            AdcbRegs.ADCCTL2.bit.SIGNALMODE = signalmode;\n            if(adcOffsetTrim > 0x0)\n            {\n                AdcbRegs.ADCOFFTRIM.all = adcOffsetTrim;\n            }\n#ifndef _DUAL_HEADERS\n            if(ADC_RESOLUTION_12BIT == resolution)\n#else\n            if(ADC_BITRESOLUTION_12BIT == resolution)\n#endif\n            {\n                AdcbRegs.ADCCTL2.bit.RESOLUTION = 0;\n\n                //\n                //12-bit linearity trim workaround\n                //\n                AdcbRegs.ADCINLTRIM1 &= 0xFFFF0000;\n                AdcbRegs.ADCINLTRIM2 &= 0xFFFF0000;\n                AdcbRegs.ADCINLTRIM4 &= 0xFFFF0000;\n                AdcbRegs.ADCINLTRIM5 &= 0xFFFF0000;\n            }\n            else\n            {\n                AdcbRegs.ADCCTL2.bit.RESOLUTION = 1;\n            }\n            break;\n        }\n        case ADC_ADCC:\n        {\n            AdccRegs.ADCCTL2.bit.SIGNALMODE = signalmode;\n            if(adcOffsetTrim > 0x0)\n            {\n                AdccRegs.ADCOFFTRIM.all = adcOffsetTrim;\n            }\n#ifndef _DUAL_HEADERS\n            if(ADC_RESOLUTION_12BIT == resolution)\n#else\n            if(ADC_BITRESOLUTION_12BIT == resolution)\n#endif\n            {\n                AdccRegs.ADCCTL2.bit.RESOLUTION = 0;\n                //\n                //12-bit linearity trim workaround\n                //\n                AdccRegs.ADCINLTRIM1 &= 0xFFFF0000;\n                AdccRegs.ADCINLTRIM2 &= 0xFFFF0000;\n                AdccRegs.ADCINLTRIM4 &= 0xFFFF0000;\n                AdccRegs.ADCINLTRIM5 &= 0xFFFF0000;\n            }\n            else\n            {\n                AdccRegs.ADCCTL2.bit.RESOLUTION = 1;\n            }\n            break;\n        }\n        case ADC_ADCD:\n        {\n            AdcdRegs.ADCCTL2.bit.SIGNALMODE = signalmode;\n            if(adcOffsetTrim > 0x0)\n            {\n                AdcdRegs.ADCOFFTRIM.all = adcOffsetTrim;\n            }\n#ifndef _DUAL_HEADERS\n            if(ADC_RESOLUTION_12BIT == resolution)\n#else\n            if(ADC_BITRESOLUTION_12BIT == resolution)\n#endif\n            {\n                AdcdRegs.ADCCTL2.bit.RESOLUTION = 0;\n\n                //\n                //12-bit linearity trim workaround\n                //\n                AdcdRegs.ADCINLTRIM1 &= 0xFFFF0000;\n                AdcdRegs.ADCINLTRIM2 &= 0xFFFF0000;\n                AdcdRegs.ADCINLTRIM4 &= 0xFFFF0000;\n                AdcdRegs.ADCINLTRIM5 &= 0xFFFF0000;\n            }\n            else\n            {\n                AdcdRegs.ADCCTL2.bit.RESOLUTION = 1;\n            }\n            break;\n        }\n    }\n}\n\n//\n// CalAdcINL - Loads INL trim values from OTP into the trim registers of the\n//             specified ADC. Use only as part of AdcSetMode function, since\n//             linearity trim correction is needed for some modes.\n//\nvoid CalAdcINL(Uint16 adc)\n{\n    switch(adc)\n    {\n        case ADC_ADCA:\n            if(0xFFFF != *((Uint16*)CalAdcaINL))\n            {\n                //\n                //trim function is programmed into OTP, so call it\n                //\n                (*CalAdcaINL)();\n            }\n            else\n            {\n                //\n                //do nothing, no INL trim function populated\n                //\n            }\n            break;\n        case ADC_ADCB:\n            if(0xFFFF != *((Uint16*)CalAdcbINL))\n            {\n                //\n                //trim function is programmed into OTP, so call it\n                //\n                (*CalAdcbINL)();\n            }\n            else\n            {\n                //\n                //do nothing, no INL trim function populated\n                //\n            }\n            break;\n        case ADC_ADCC:\n            if(0xFFFF != *((Uint16*)CalAdccINL))\n            {\n                //\n                //trim function is programmed into OTP, so call it\n                //\n                (*CalAdccINL)();\n            }\n            else\n            {\n                //\n                //do nothing, no INL trim function populated\n                //\n            }\n            break;\n        case ADC_ADCD:\n            if(0xFFFF != *((Uint16*)CalAdcdINL))\n            {\n                //\n                //trim function is programmed into OTP, so call it\n                //\n                (*CalAdcdINL)();\n            }\n            else\n            {\n                //\n                //do nothing, no INL trim function populated\n                //\n            }\n            break;\n    }\n}\n\n//\n// End of file\n//\n"},{"name":"F2837xD_CodeStartBranch.asm","type":"other","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":";//###########################################################################\n;//\n;// FILE:  F2837xD_CodeStartBranch.asm\n;//\n;// TITLE: Branch for redirecting code execution after boot.\n;//\n;// For these examples, code_start is the first code that is executed after\n;// exiting the boot ROM code.\n;//\n;// The codestart section in the linker cmd file is used to physically place\n;// this code at the correct memory location.  This section should be placed\n;// at the location the BOOT ROM will re-direct the code to.  For example,\n;// for boot to FLASH this code will be located at 0x3f7ff6.\n;//\n;// In addition, the example F2837xD projects are setup such that the codegen\n;// entry point is also set to the code_start label.  This is done by linker\n;// option -e in the project build options.  When the debugger loads the code,\n;// it will automatically set the PC to the \"entry point\" address indicated by\n;// the -e linker option.  In this case the debugger is simply assigning the PC,\n;// it is not the same as a full reset of the device.\n;//\n;// The compiler may warn that the entry point for the project is other then\n;//  _c_init00.  _c_init00 is the C environment setup and is run before\n;// main() is entered. The code_start code will re-direct the execution\n;// to _c_init00 and thus there is no worry and this warning can be ignored.\n;//\n;//###########################################################################\n;//\n;// $Release Date:  $\n;// $Copyright:\n;// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n;//\n;// Redistribution and use in source and binary forms, with or without \n;// modification, are permitted provided that the following conditions \n;// are met:\n;// \n;//   Redistributions of source code must retain the above copyright \n;//   notice, this list of conditions and the following disclaimer.\n;// \n;//   Redistributions in binary form must reproduce the above copyright\n;//   notice, this list of conditions and the following disclaimer in the \n;//   documentation and/or other materials provided with the   \n;//   distribution.\n;// \n;//   Neither the name of Texas Instruments Incorporated nor the names of\n;//   its contributors may be used to endorse or promote products derived\n;//   from this software without specific prior written permission.\n;// \n;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n;// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n;// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n;// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n;// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n;// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n;// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n;// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n;// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n;// $\n;//###########################################################################\n\n***********************************************************************\n\nWD_DISABLE  .set  1    ;set to 1 to disable WD, else set to 0\n\n    .ref _c_int00\n    .global code_start\n\n***********************************************************************\n* Function: codestart section\n*\n* Description: Branch to code starting point\n***********************************************************************\n\n    .sect \"codestart\"\n    .retain\n\ncode_start:\n    .if WD_DISABLE == 1\n        LB wd_disable       ;Branch to watchdog disable code\n    .else\n        LB _c_int00         ;Branch to start of boot._asm in RTS library\n    .endif\n\n;end codestart section\n\n***********************************************************************\n* Function: wd_disable\n*\n* Description: Disables the watchdog timer\n***********************************************************************\n    .if WD_DISABLE == 1\n\n    .text\nwd_disable:\n    SETC OBJMODE        ;Set OBJMODE for 28x object code\n    EALLOW              ;Enable EALLOW protected register access\n    MOVZ DP, #7029h>>6  ;Set data page for WDCR register\n    MOV @7029h, #0068h  ;Set WDDIS bit in WDCR to disable WD\n    EDIS                ;Disable EALLOW protected register access\n    LB _c_int00         ;Branch to start of boot._asm in RTS library\n\n    .endif\n\n;end wd_disable\n\n    .end\n\n;//\n;// End of file.\n;//\n"},{"name":"F2837xD_CpuTimers.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:    F2837xD_CpuTimers.c\n//\n// TITLE:   CPU 32-bit Timers Initialization & Support Functions.\n//\n//###########################################################################\n//\n// $Release Date:  $\n// $Copyright:\n// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"F2837xD_device.h\"\n#include \"F2837xD_Examples.h\"\n\n//\n// Globals\n//\nstruct CPUTIMER_VARS CpuTimer0;\nstruct CPUTIMER_VARS CpuTimer1;\nstruct CPUTIMER_VARS CpuTimer2;\n\n//\n// InitCpuTimers - This function initializes all three CPU timers to a known\n//                 state.\n//\nvoid InitCpuTimers(void)\n{\n    //\n    // CPU Timer 0\n    // Initialize address pointers to respective timer registers:\n    //\n    CpuTimer0.RegsAddr = &CpuTimer0Regs;\n\n    //\n    // Initialize timer period to maximum:\n    //\n    CpuTimer0Regs.PRD.all  = 0xFFFFFFFF;\n\n    //\n    // Initialize pre-scale counter to divide by 1 (SYSCLKOUT):\n    //\n    CpuTimer0Regs.TPR.all  = 0;\n    CpuTimer0Regs.TPRH.all = 0;\n\n    //\n    // Make sure timer is stopped:\n    //\n    CpuTimer0Regs.TCR.bit.TSS = 1;\n\n    //\n    // Reload all counter register with period value:\n    //\n    CpuTimer0Regs.TCR.bit.TRB = 1;\n\n    //\n    // Reset interrupt counters:\n    //\n    CpuTimer0.InterruptCount = 0;\n\n    //\n    // Initialize address pointers to respective timer registers:\n    //\n    CpuTimer1.RegsAddr = &CpuTimer1Regs;\n    CpuTimer2.RegsAddr = &CpuTimer2Regs;\n\n    //\n    // Initialize timer period to maximum:\n    //\n    CpuTimer1Regs.PRD.all  = 0xFFFFFFFF;\n    CpuTimer2Regs.PRD.all  = 0xFFFFFFFF;\n\n    //\n    // Initialize pre-scale counter to divide by 1 (SYSCLKOUT):\n    //\n    CpuTimer1Regs.TPR.all  = 0;\n    CpuTimer1Regs.TPRH.all = 0;\n    CpuTimer2Regs.TPR.all  = 0;\n    CpuTimer2Regs.TPRH.all = 0;\n\n    //\n    // Make sure timers are stopped:\n    //\n    CpuTimer1Regs.TCR.bit.TSS = 1;\n    CpuTimer2Regs.TCR.bit.TSS = 1;\n\n    //\n    // Reload all counter register with period value:\n    //\n    CpuTimer1Regs.TCR.bit.TRB = 1;\n    CpuTimer2Regs.TCR.bit.TRB = 1;\n\n    //\n    // Reset interrupt counters:\n    //\n    CpuTimer1.InterruptCount = 0;\n    CpuTimer2.InterruptCount = 0;\n}\n\n//\n// ConfigCpuTimer - This function initializes the selected timer to the period\n//                  specified by the \"Freq\" and \"Period\" parameters. The \"Freq\"\n//                  is entered as \"MHz\" and the period in \"uSeconds\". The timer\n//                  is held in the stopped state after configuration.\n//\nvoid ConfigCpuTimer(struct CPUTIMER_VARS *Timer, float Freq, float Period)\n{\n    Uint32 temp;\n\n    //\n    // Initialize timer period:\n    //\n    Timer->CPUFreqInMHz = Freq;\n    Timer->PeriodInUSec = Period;\n    temp = (long) (Freq * Period);\n\n    //\n    // Counter decrements PRD+1 times each period\n    //\n    Timer->RegsAddr->PRD.all = temp - 1;\n\n    //\n    // Set pre-scale counter to divide by 1 (SYSCLKOUT):\n    //\n    Timer->RegsAddr->TPR.all  = 0;\n    Timer->RegsAddr->TPRH.all  = 0;\n\n    //\n    // Initialize timer control register:\n    //\n    Timer->RegsAddr->TCR.bit.TSS = 1;     // 1 = Stop timer, 0 = Start/Restart\n                                          // Timer\n    Timer->RegsAddr->TCR.bit.TRB = 1;     // 1 = reload timer\n    Timer->RegsAddr->TCR.bit.SOFT = 0;\n    Timer->RegsAddr->TCR.bit.FREE = 0;    // Timer Free Run Disabled\n    Timer->RegsAddr->TCR.bit.TIE = 1;     // 0 = Disable/ 1 = Enable Timer\n                                          // Interrupt\n\n    //\n    // Reset interrupt counter:\n    //\n    Timer->InterruptCount = 0;\n}\n\n\n//\n// End of file\n//\n"},{"name":"F2837xD_DefaultISR.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   F2837xD_DefaultISR.c\n//\n// TITLE:  F2837xD Device Default Interrupt Service Routines\n//\n//###########################################################################\n//   $\n// $Release Date:   $\n// $Copyright:\n// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"F2837xD_device.h\"\n#include \"F2837xD_Examples.h\"\n\n//\n// CPU Timer 1 Interrupt\n//\ninterrupt void TIMER1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// CPU Timer 2 Interrupt\n//\ninterrupt void TIMER2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// Datalogging Interrupt\n//\ninterrupt void DATALOG_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// RTOS Interrupt\n//\ninterrupt void RTOS_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// Emulation Interrupt\n//\ninterrupt void EMU_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// Non-Maskable Interrupt\n//\ninterrupt void NMI_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// Illegal Operation Trap\n//\ninterrupt void ILLEGAL_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 1\n//\ninterrupt void USER1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 2\n//\ninterrupt void USER2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 3\n//\ninterrupt void USER3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 4\n//\ninterrupt void USER4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 5\n//\ninterrupt void USER5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 6\n//\ninterrupt void USER6_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 7\n//\ninterrupt void USER7_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 8\n//\ninterrupt void USER8_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 9\n//\ninterrupt void USER9_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 10\n//\ninterrupt void USER10_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 11\n//\ninterrupt void USER11_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// User Defined Trap 12\n//\ninterrupt void USER12_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.1 - ADCA Interrupt 1\n//\ninterrupt void ADCA1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.2 - ADCB Interrupt 1\n//\ninterrupt void ADCB1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.3 - ADCC Interrupt 1\n//\ninterrupt void ADCC1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.4 - XINT1 Interrupt\n//\ninterrupt void XINT1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.5 - XINT2 Interrupt\n//\ninterrupt void XINT2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.6 - ADCD Interrupt 1\n//\ninterrupt void ADCD1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.7 - Timer 0 Interrupt\n//\ninterrupt void TIMER0_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.8 - Standby and Halt Wakeup Interrupt\n//\ninterrupt void WAKE_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.1 - ePWM1 Trip Zone Interrupt\n//\ninterrupt void EPWM1_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.2 - ePWM2 Trip Zone Interrupt\n//\ninterrupt void EPWM2_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.3 - ePWM3 Trip Zone Interrupt\n//\ninterrupt void EPWM3_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.4 - ePWM4 Trip Zone Interrupt\n//\ninterrupt void EPWM4_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.5 - ePWM5 Trip Zone Interrupt\n//\ninterrupt void EPWM5_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.6 - ePWM6 Trip Zone Interrupt\n//\ninterrupt void EPWM6_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.7 - ePWM7 Trip Zone Interrupt\n//\ninterrupt void EPWM7_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.8 - ePWM8 Trip Zone Interrupt\n//\ninterrupt void EPWM8_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.1 - ePWM1 Interrupt\n//\ninterrupt void EPWM1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.2 - ePWM2 Interrupt\n//\ninterrupt void EPWM2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.3 - ePWM3 Interrupt\n//\ninterrupt void EPWM3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.4 - ePWM4 Interrupt\n//\ninterrupt void EPWM4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.5 - ePWM5 Interrupt\n//\ninterrupt void EPWM5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.6 - ePWM6 Interrupt\n//\ninterrupt void EPWM6_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.7 - ePWM7 Interrupt\n//\ninterrupt void EPWM7_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.8 - ePWM8 Interrupt\n//\ninterrupt void EPWM8_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 4.1 - eCAP1 Interrupt\n//\ninterrupt void ECAP1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 4.2 - eCAP2 Interrupt\n//\ninterrupt void ECAP2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 4.3 - eCAP3 Interrupt\n//\ninterrupt void ECAP3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 4.4 - eCAP4 Interrupt\n//\ninterrupt void ECAP4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 4.5 - eCAP5 Interrupt\n//\ninterrupt void ECAP5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 4.6 - eCAP6 Interrupt\n//\ninterrupt void ECAP6_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP4;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 5.1 - eQEP1 Interrupt\n//\ninterrupt void EQEP1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 5.2 - eQEP2 Interrupt\n//\ninterrupt void EQEP2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 5.3 - eQEP3 Interrupt\n//\ninterrupt void EQEP3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 6.1 - SPIA Receive Interrupt\n//\ninterrupt void SPIA_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 6.2 - SPIA Transmit Interrupt\n//\ninterrupt void SPIA_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 6.3 - SPIB Receive Interrupt\n//\ninterrupt void SPIB_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 6.4 - SPIB Transmit Interrupt\n//\ninterrupt void SPIB_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 6.5 - McBSPA Receive Interrupt\n//\ninterrupt void MCBSPA_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 6.6 - McBSPA Transmit Interrupt\n//\ninterrupt void MCBSPA_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 6.7 - McBSPB Receive Interrupt\n//\ninterrupt void MCBSPB_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 6.8 - McBSPB Transmit Interrupt\n//\ninterrupt void MCBSPB_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 7.1 - DMA Channel 1 Interrupt\n//\ninterrupt void DMA_CH1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 7.2 - DMA Channel 2 Interrupt\n//\ninterrupt void DMA_CH2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 7.3 - DMA Channel 3 Interrupt\n//\ninterrupt void DMA_CH3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 7.4 - DMA Channel 4 Interrupt\n//\ninterrupt void DMA_CH4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 7.5 - DMA Channel 5 Interrupt\n//\ninterrupt void DMA_CH5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 7.6 - DMA Channel 6 Interrupt\n//\ninterrupt void DMA_CH6_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP7;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 8.1 - I2CA Interrupt 1\n//\ninterrupt void I2CA_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 8.2 - I2CA Interrupt 2\n//\ninterrupt void I2CA_FIFO_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 8.3 - I2CB Interrupt 1\n//\ninterrupt void I2CB_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 8.4 - I2CB Interrupt 2\n//\ninterrupt void I2CB_FIFO_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 8.5 - SCIC Receive Interrupt\n//\ninterrupt void SCIC_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 8.6 - SCIC Transmit Interrupt\n//\ninterrupt void SCIC_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 8.7 - SCID Receive Interrupt\n//\ninterrupt void SCID_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 8.8 - SCID Transmit Interrupt\n//\ninterrupt void SCID_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 9.1 - SCIA Receive Interrupt\n//\ninterrupt void SCIA_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 9.2 - SCIA Transmit Interrupt\n//\ninterrupt void SCIA_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 9.3 - SCIB Receive Interrupt\n//\ninterrupt void SCIB_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 9.4 - SCIB Transmit Interrupt\n//\ninterrupt void SCIB_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 9.5 - CANA Interrupt 0\n//\ninterrupt void CANA0_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 9.6 - CANA Interrupt 1\n//\ninterrupt void CANA1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 9.7 - CANB Interrupt 0\n//\ninterrupt void CANB0_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 9.8 - CANB Interrupt 1\n//\ninterrupt void CANB1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.1 - ADCA Event Interrupt\n//\ninterrupt void ADCA_EVT_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.2 - ADCA Interrupt 2\n//\ninterrupt void ADCA2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.3 - ADCA Interrupt 3\n//\ninterrupt void ADCA3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.4 - ADCA Interrupt 4\n//\ninterrupt void ADCA4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.5 - ADCB Event Interrupt\n//\ninterrupt void ADCB_EVT_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.6 - ADCB Interrupt 2\n//\ninterrupt void ADCB2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.7 - ADCB Interrupt 3\n//\ninterrupt void ADCB3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.8 - ADCB Interrupt 4\n//\ninterrupt void ADCB4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 11.1 - CLA1 Interrupt 1\n//\ninterrupt void CLA1_1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 11.2 - CLA1 Interrupt 2\n//\ninterrupt void CLA1_2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 11.3 - CLA1 Interrupt 3\n//\ninterrupt void CLA1_3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 11.4 - CLA1 Interrupt 4\n//\ninterrupt void CLA1_4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 11.5 - CLA1 Interrupt 5\n//\ninterrupt void CLA1_5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 11.6 - CLA1 Interrupt 6\n//\ninterrupt void CLA1_6_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 11.7 - CLA1 Interrupt 7\n//\ninterrupt void CLA1_7_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 11.8 - CLA1 Interrupt 8\n//\ninterrupt void CLA1_8_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP11;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.1 - XINT3 Interrupt\n//\ninterrupt void XINT3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.2 - XINT4 Interrupt\n//\ninterrupt void XINT4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.3 - XINT5 Interrupt\n//\ninterrupt void XINT5_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.6 - VCU Interrupt\n//\ninterrupt void VCU_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.7 - FPU Overflow Interrupt\n//\ninterrupt void FPU_OVERFLOW_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.8 - FPU Underflow Interrupt\n//\ninterrupt void FPU_UNDERFLOW_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.13 - IPC Interrupt 0\n//\ninterrupt void IPC0_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.14 - IPC Interrupt 1\n//\ninterrupt void IPC1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.15 - IPC Interrupt 2\n//\ninterrupt void IPC2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 1.16 - IPC Interrupt 3\n//\ninterrupt void IPC3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.9 - ePWM9 Trip Zone Interrupt\n//\ninterrupt void EPWM9_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.10 - ePWM10 Trip Zone Interrupt\n//\ninterrupt void EPWM10_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.11 - ePWM11 Trip Zone Interrupt\n//\ninterrupt void EPWM11_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 2.12 - ePWM12 Trip Zone Interrupt\n//\ninterrupt void EPWM12_TZ_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP2;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.9 - ePWM9 Interrupt\n//\ninterrupt void EPWM9_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.10 - ePWM10 Interrupt\n//\ninterrupt void EPWM10_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.11 - ePWM11 Interrupt\n//\ninterrupt void EPWM11_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 3.12 - ePWM12 Interrupt\n//\ninterrupt void EPWM12_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP3;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 5.9 - SD1 Interrupt\n//\ninterrupt void SD1_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 5.10 - SD2 Interrupt\n//\ninterrupt void SD2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP5;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 6.9 - SPIC Receive Interrupt\n//\ninterrupt void SPIC_RX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 6.10 - SPIC Transmit Interrupt\n//\ninterrupt void SPIC_TX_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP6;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 8.15 - uPPA Interrupt\n//\ninterrupt void UPPA_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP8;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 9.15 - USBA Interrupt\n//\ninterrupt void USBA_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP9;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.9 - ADCC Event Interrupt\n//\ninterrupt void ADCC_EVT_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.10 - ADCC Interrupt 2\n//\ninterrupt void ADCC2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.11 - ADCC Interrupt 3\n//\ninterrupt void ADCC3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.12 - ADCC Interrupt 4\n//\ninterrupt void ADCC4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.13 - ADCD Event Interrupt\n//\ninterrupt void ADCD_EVT_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.14 - ADCD Interrupt 2\n//\ninterrupt void ADCD2_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.15 - ADCD Interrupt 3\n//\ninterrupt void ADCD3_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 10.16 - ADCD Interrupt 4\n//\ninterrupt void ADCD4_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP10;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.9 - EMIF Error Interrupt\n//\ninterrupt void EMIF_ERROR_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.10 - RAM Correctable Error Interrupt\n//\ninterrupt void RAM_CORRECTABLE_ERROR_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.11 - Flash Correctable Error Interrupt\n//\ninterrupt void FLASH_CORRECTABLE_ERROR_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.12 - RAM Access Violation Interrupt\n//\ninterrupt void RAM_ACCESS_VIOLATION_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.13 - System PLL Slip Interrupt\n//\ninterrupt void SYS_PLL_SLIP_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.14 - Auxiliary PLL Slip Interrupt\n//\ninterrupt void AUX_PLL_SLIP_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.15 - CLA Overflow Interrupt\n//\ninterrupt void CLA_OVERFLOW_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// 12.16 - CLA Underflow Interrupt\n//\ninterrupt void CLA_UNDERFLOW_ISR(void)\n{\n    //\n    // Insert ISR Code here\n    //\n\n    //\n    // To receive more interrupts from this PIE group,\n    // acknowledge this interrupt.\n    // PieCtrlRegs.PIEACK.all = PIEACK_GROUP12;\n    //\n\n    //\n    // Next two lines for debug only to halt the processor here\n    // Remove after inserting ISR Code\n    //\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// Catch-all Default ISRs:\n//\n\n//\n// PIE_RESERVED_ISR - Reserved ISR\n//\ninterrupt void PIE_RESERVED_ISR(void)\n{\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n//\n// EMPTY_ISR - Only does a return\n//\ninterrupt void EMPTY_ISR(void)\n{\n\n}\n\n//\n// NOTUSED_ISR - Unused ISR\n//\ninterrupt void NOTUSED_ISR(void)\n{\n    asm (\"      ESTOP0\");\n    for(;;);\n}\n\n"},{"name":"F2837xD_Dma.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:    F2837xD_DMA.c\n//\n// TITLE:   F2837xD Device DMA Initialization & Support Functions.\n//\n//###########################################################################\n//\n// $Release Date:  $\n// $Copyright:\n// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"F2837xD_device.h\"\n#include \"F2837xD_Examples.h\"\n\n//\n// DMAInitialize - This function initializes the DMA to a known state.\n//\nvoid DMAInitialize(void)\n{\n    EALLOW;\n\n    //\n    // Perform a hard reset on DMA\n    //\n    DmaRegs.DMACTRL.bit.HARDRESET = 1;\n   __asm (\" nop\"); // one NOP required after HARDRESET\n\n    //\n    // Allow DMA to run free on emulation suspend\n    //\n    DmaRegs.DEBUGCTRL.bit.FREE = 1;\n\n    EDIS;\n}\n\n//\n// DMACH1AddrConfig - DMA Channel 1 Address Configuration\n//\nvoid DMACH1AddrConfig(volatile Uint16 *DMA_Dest,volatile Uint16 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH1.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source;   // Point to\n                                                            // beginning of\n                                                            // source buffer\n    DmaRegs.CH1.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH1.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;  // Point to\n                                                         // beginning of\n                                                         // destination buffer\n    DmaRegs.CH1.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH1BurstConfig - DMA Channel 1 Burst size configuration\n//\nvoid DMACH1BurstConfig(Uint16 bsize, int16 srcbstep, int16 desbstep)\n{\n    EALLOW;\n\n    //\n    // Set up BURST registers:\n    //\n    DmaRegs.CH1.BURST_SIZE.all = bsize;      // Number of words(X-1)\n                                             // x-ferred in a burst.\n    DmaRegs.CH1.SRC_BURST_STEP = srcbstep;   // Increment source addr between\n                                             // each word x-ferred.\n    DmaRegs.CH1.DST_BURST_STEP = desbstep;   // Increment dest addr between\n                                             // each word x-ferred.\n\n    EDIS;\n}\n\n//\n// DMACH1TransferConfig - DMA Channel 1 Transfer size configuration\n//\nvoid DMACH1TransferConfig(Uint16 tsize, int16 srctstep, int16 deststep)\n{\n    EALLOW;\n\n    //\n    // Set up TRANSFER registers:\n    //\n    DmaRegs.CH1.TRANSFER_SIZE = tsize;        // Number of bursts per transfer,\n                                              // DMA interrupt will occur after\n                                              // completed transfer.\n    DmaRegs.CH1.SRC_TRANSFER_STEP = srctstep; // TRANSFER_STEP is ignored\n                                              // when WRAP occurs.\n    DmaRegs.CH1.DST_TRANSFER_STEP = deststep; // TRANSFER_STEP is ignored\n                                              // when WRAP occurs.\n\n    EDIS;\n}\n\n//\n// DMACH1WrapConfig - DMA Channel 1 Wrap size configuration\n//\nvoid DMACH1WrapConfig(Uint16 srcwsize, int16 srcwstep, Uint16 deswsize,\n                      int16 deswstep)\n{\n    EALLOW;\n\n    //\n    // Set up WRAP registers:\n    //\n    DmaRegs.CH1.SRC_WRAP_SIZE = srcwsize; // Wrap source address after N bursts\n    DmaRegs.CH1.SRC_WRAP_STEP = srcwstep; // Step for source wrap\n\n    DmaRegs.CH1.DST_WRAP_SIZE = deswsize; // Wrap destination address after\n                                          // N bursts.\n    DmaRegs.CH1.DST_WRAP_STEP = deswstep; // Step for destination wrap\n\n    EDIS;\n}\n\n//\n// DMACH1ModeConfig - DMA Channel 1 Mode configuration\n//\nvoid DMACH1ModeConfig(Uint16 persel, Uint16 perinte, Uint16 oneshot,\n                      Uint16 cont, Uint16 synce, Uint16 syncsel,\n                      Uint16 ovrinte, Uint16 datasize, Uint16 chintmode,\n                      Uint16 chinte)\n{\n    EALLOW;\n\n    //\n    // Set up MODE Register:\n    // persel - Source select\n    // PERINTSEL - Should be hard coded to channel, above now selects source\n    // PERINTE - Peripheral interrupt enable\n    // ONESHOT - Oneshot enable\n    // CONTINUOUS - Continuous enable\n    // OVRINTE - Enable/disable the overflow interrupt\n    // DATASIZE - 16-bit/32-bit data size transfers\n    // CHINTMODE - Generate interrupt to CPU at beginning/end of transfer\n    // CHINTE - Channel Interrupt to  CPU enable\n    //\n    DmaClaSrcSelRegs.DMACHSRCSEL1.bit.CH1 = persel;\n    DmaRegs.CH1.MODE.bit.PERINTSEL = 1;\n    DmaRegs.CH1.MODE.bit.PERINTE = perinte;\n    DmaRegs.CH1.MODE.bit.ONESHOT = oneshot;\n    DmaRegs.CH1.MODE.bit.CONTINUOUS = cont;\n    DmaRegs.CH1.MODE.bit.OVRINTE = ovrinte;\n    DmaRegs.CH1.MODE.bit.DATASIZE = datasize;\n    DmaRegs.CH1.MODE.bit.CHINTMODE = chintmode;\n    DmaRegs.CH1.MODE.bit.CHINTE = chinte;\n\n    //\n    // Clear any spurious flags: interrupt and sync error flags\n    //\n    DmaRegs.CH1.CONTROL.bit.PERINTCLR = 1;\n    DmaRegs.CH1.CONTROL.bit.ERRCLR = 1;\n\n    //\n    // Initialize PIE vector for CPU interrupt:\n    // Enable DMA CH1 interrupt in PIE\n    //\n    PieCtrlRegs.PIEIER7.bit.INTx1 = 1;\n\n    EDIS;\n}\n\n//\n// StartDMACH1 - This function starts DMA Channel 1.\n//\nvoid StartDMACH1(void)\n{\n    EALLOW;\n    DmaRegs.CH1.CONTROL.bit.RUN = 1;\n    EDIS;\n}\n\n//\n// DMACH2AddrConfig - DMA Channel 2 Address Configuration\n//\nvoid DMACH2AddrConfig(volatile Uint16 *DMA_Dest,volatile Uint16 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH2.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source;   // Point to\n                                                            // beginning of\n                                                            // source buffer.\n    DmaRegs.CH2.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH2.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;  // Point to beginning\n                                                         // of destination\n                                                         // buffer.\n    DmaRegs.CH2.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH2BurstConfig - DMA Channel 2 Burst size configuration\n//\nvoid DMACH2BurstConfig(Uint16 bsize, int16 srcbstep, int16 desbstep)\n{\n    EALLOW;\n\n    //\n    // Set up BURST registers:\n    //\n    DmaRegs.CH2.BURST_SIZE.all = bsize;     // Number of words(X-1) x-ferred in\n                                            // a burst.\n    DmaRegs.CH2.SRC_BURST_STEP = srcbstep;  // Increment source addr between\n                                            // each word x-ferred.\n    DmaRegs.CH2.DST_BURST_STEP = desbstep;  // Increment dest addr between each\n                                            // word x-ferred.\n\n    EDIS;\n}\n\n//\n// DMACH2TransferConfig - DMA Channel 2 Transfer size Configuration\n//\nvoid DMACH2TransferConfig(Uint16 tsize, int16 srctstep, int16 deststep)\n{\n    EALLOW;\n\n    //\n    // Set up TRANSFER registers:\n    //\n    DmaRegs.CH2.TRANSFER_SIZE = tsize;        // Number of bursts per transfer,\n                                              // DMA interrupt will occur after\n                                              // completed transfer.\n    DmaRegs.CH2.SRC_TRANSFER_STEP = srctstep; // TRANSFER_STEP is ignored when\n                                              // WRAP occurs.\n    DmaRegs.CH2.DST_TRANSFER_STEP = deststep; // TRANSFER_STEP is ignored when\n                                              // WRAP occurs.\n\n    EDIS;\n}\n\n//\n// DMACH2WrapConfig - DMA Channel 2 Wrap size configuration\n//\nvoid DMACH2WrapConfig(Uint16 srcwsize, int16 srcwstep, Uint16 deswsize,\n                      int16 deswstep)\n{\n    EALLOW;\n\n    //\n    // Set up WRAP registers:\n    //\n    DmaRegs.CH2.SRC_WRAP_SIZE = srcwsize; // Wrap source address after N bursts\n    DmaRegs.CH2.SRC_WRAP_STEP = srcwstep; // Step for source wrap\n\n    DmaRegs.CH2.DST_WRAP_SIZE = deswsize; // Wrap destination address after\n                                          // N bursts.\n    DmaRegs.CH2.DST_WRAP_STEP = deswstep; // Step for destination wrap\n\n    EDIS;\n}\n\n//\n// DMACH2ModeConfig - DMA Channel 2 Mode configuration\n//\nvoid DMACH2ModeConfig(Uint16 persel, Uint16 perinte, Uint16 oneshot,\n                      Uint16 cont, Uint16 synce, Uint16 syncsel,\n                      Uint16 ovrinte, Uint16 datasize, Uint16 chintmode,\n                      Uint16 chinte)\n{\n    EALLOW;\n\n    //\n    // Set up MODE Register:\n    // persel - Source select\n    // PERINTSEL - Should be hard coded to channel, above now selects source\n    // PERINTE - Peripheral interrupt enable\n    // ONESHOT - Oneshot enable\n    // CONTINUOUS - Continuous enable\n    // OVRINTE - Enable/disable the overflow interrupt\n    // DATASIZE - 16-bit/32-bit data size transfers\n    // CHINTMODE - Generate interrupt to CPU at beginning/end of transfer\n    // CHINTE - Channel Interrupt to  CPU enable\n    //\n    DmaClaSrcSelRegs.DMACHSRCSEL1.bit.CH2 = persel;\n    DmaRegs.CH2.MODE.bit.PERINTSEL = 2;\n    DmaRegs.CH2.MODE.bit.PERINTE = perinte;\n    DmaRegs.CH2.MODE.bit.ONESHOT = oneshot;\n    DmaRegs.CH2.MODE.bit.CONTINUOUS = cont;\n    DmaRegs.CH2.MODE.bit.OVRINTE = ovrinte;\n    DmaRegs.CH2.MODE.bit.DATASIZE = datasize;\n    DmaRegs.CH2.MODE.bit.CHINTMODE = chintmode;\n    DmaRegs.CH2.MODE.bit.CHINTE = chinte;\n\n    //\n    // Clear any spurious flags: Interrupt flags and sync error flags\n    //\n    DmaRegs.CH2.CONTROL.bit.PERINTCLR = 1;\n    DmaRegs.CH2.CONTROL.bit.ERRCLR = 1;\n\n    //\n    // Initialize PIE vector for CPU interrupt:\n    // Enable DMA CH2 interrupt in PIE\n    //\n    PieCtrlRegs.PIEIER7.bit.INTx2 = 1;\n\n    EDIS;\n}\n\n//\n// StartDMACH2 - This function starts DMA Channel 2.\n//\nvoid StartDMACH2(void)\n{\n    EALLOW;\n    DmaRegs.CH2.CONTROL.bit.RUN = 1;\n    EDIS;\n}\n\n//\n// DMACH3AddrConfig - DMA Channel 3 Address configuration\n//\nvoid DMACH3AddrConfig(volatile Uint16 *DMA_Dest,volatile Uint16 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH3.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source; // Point to beginning\n                                                          // of source buffer.\n    DmaRegs.CH3.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH3.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest; // Point to beginning\n                                                        // of destination\n                                                        // buffer.\n    DmaRegs.CH3.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH3BurstConfig - DMA Channel 3 burst size configuration\n//\nvoid DMACH3BurstConfig(Uint16 bsize, int16 srcbstep, int16 desbstep)\n{\n    EALLOW;\n\n    //\n    // Set up BURST registers:\n    //\n    DmaRegs.CH3.BURST_SIZE.all = bsize;     // Number of words(X-1) x-ferred in\n                                            // a burst.\n    DmaRegs.CH3.SRC_BURST_STEP = srcbstep;  // Increment source addr between\n                                            // each word x-ferred.\n    DmaRegs.CH3.DST_BURST_STEP = desbstep;  // Increment dest addr between each\n                                            // word x-ferred.\n\n    EDIS;\n}\n\n//\n// DMACH3TransferConfig - DMA channel 3 transfer size configuration\n//\nvoid DMACH3TransferConfig(Uint16 tsize, int16 srctstep, int16 deststep)\n{\n    EALLOW;\n\n    //\n    // Set up TRANSFER registers:\n    //\n    DmaRegs.CH3.TRANSFER_SIZE = tsize;        // Number of bursts per transfer,\n                                              // DMA interrupt will occur after\n                                              // completed transfer.\n    DmaRegs.CH3.SRC_TRANSFER_STEP = srctstep; // TRANSFER_STEP is ignored when\n                                              // WRAP occurs.\n    DmaRegs.CH3.DST_TRANSFER_STEP = deststep; // TRANSFER_STEP is ignored when\n                                              // WRAP occurs.\n\n    EDIS;\n}\n\n//\n// DMACH3WrapConfig - DMA Channel 3 wrap size configuration\n//\nvoid DMACH3WrapConfig(Uint16 srcwsize, int16 srcwstep, Uint16 deswsize,\n                      int16 deswstep)\n{\n    EALLOW;\n\n    //\n    // Set up WRAP registers:\n    //\n    DmaRegs.CH3.SRC_WRAP_SIZE = srcwsize; // Wrap source address after N bursts\n    DmaRegs.CH3.SRC_WRAP_STEP = srcwstep; // Step for source wrap\n\n    DmaRegs.CH3.DST_WRAP_SIZE = deswsize; // Wrap destination address after N\n                                          // bursts.\n    DmaRegs.CH3.DST_WRAP_STEP = deswstep; // Step for destination wrap\n\n    EDIS;\n}\n\n//\n// DMACH3ModeConfig - DMA Channel 3 mode configuration\n//\nvoid DMACH3ModeConfig(Uint16 persel, Uint16 perinte, Uint16 oneshot,\n                      Uint16 cont, Uint16 synce, Uint16 syncsel,\n                      Uint16 ovrinte, Uint16 datasize, Uint16 chintmode,\n                      Uint16 chinte)\n{\n    EALLOW;\n\n    //\n    // Set up MODE Register:\n    // persel - Source select\n    // PERINTSEL - Should be hard coded to channel, above now selects source\n    // PERINTE - Peripheral interrupt enable\n    // ONESHOT - Oneshot enable\n    // CONTINUOUS - Continuous enable\n    // OVRINTE - Enable/disable the overflow interrupt\n    // DATASIZE - 16-bit/32-bit data size transfers\n    // CHINTMODE - Generate interrupt to CPU at beginning/end of transfer\n    // CHINTE - Channel Interrupt to  CPU enable\n    //\n    DmaClaSrcSelRegs.DMACHSRCSEL1.bit.CH3 = persel;\n    DmaRegs.CH3.MODE.bit.PERINTSEL = 3;\n    DmaRegs.CH3.MODE.bit.PERINTE = perinte;\n    DmaRegs.CH3.MODE.bit.ONESHOT = oneshot;\n    DmaRegs.CH3.MODE.bit.CONTINUOUS = cont;\n    DmaRegs.CH3.MODE.bit.OVRINTE = ovrinte;\n    DmaRegs.CH3.MODE.bit.DATASIZE = datasize;\n    DmaRegs.CH3.MODE.bit.CHINTMODE = chintmode;\n    DmaRegs.CH3.MODE.bit.CHINTE = chinte;\n\n    //\n    // Clear any spurious flags: interrupt flags and sync error flags\n    //\n    DmaRegs.CH3.CONTROL.bit.PERINTCLR = 1;\n    DmaRegs.CH3.CONTROL.bit.ERRCLR = 1;\n\n    //\n    // Initialize PIE vector for CPU interrupt:\n    // Enable DMA CH3 interrupt in PIE\n    //\n    PieCtrlRegs.PIEIER7.bit.INTx3 = 1;\n\n    EDIS;\n}\n\n//\n// StartDMACH3 - This function starts DMA Channel 3.\n//\nvoid StartDMACH3(void)\n{\n    EALLOW;\n    DmaRegs.CH3.CONTROL.bit.RUN = 1;\n    EDIS;\n}\n\n//\n// DMACH4AddrConfig - DMA Channel 4 address configuration\n//\nvoid DMACH4AddrConfig(volatile Uint16 *DMA_Dest,volatile Uint16 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH4.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source; // Point to beginning\n                                                          // of source buffer.\n    DmaRegs.CH4.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH4.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;   // Point to beginning\n                                                          // of destination\n                                                          // buffer.\n    DmaRegs.CH4.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH4BurstConfig - DMA Channel 4 burst size configuration\n//\nvoid DMACH4BurstConfig(Uint16 bsize, int16 srcbstep, int16 desbstep)\n{\n    EALLOW;\n\n    //\n    // Set up BURST registers:\n    //\n    DmaRegs.CH4.BURST_SIZE.all = bsize;     // Number of words(X-1) x-ferred in\n                                            // a burst.\n    DmaRegs.CH4.SRC_BURST_STEP = srcbstep;  // Increment source addr between\n                                            // each word x-ferred.\n    DmaRegs.CH4.DST_BURST_STEP = desbstep;  // Increment dest addr between each\n                                            // word x-ferred.\n\n    EDIS;\n}\n\n//\n// DMACH4TransferConfig - DMA channel 4 transfer size configuration\n//\nvoid DMACH4TransferConfig(Uint16 tsize, int16 srctstep, int16 deststep)\n{\n    EALLOW;\n\n    //\n    // Set up TRANSFER registers:\n    //\n    DmaRegs.CH4.TRANSFER_SIZE = tsize;        // Number of bursts per transfer,\n                                              // DMA interrupt will occur after\n                                              // completed transfer.\n    DmaRegs.CH4.SRC_TRANSFER_STEP = srctstep; // TRANSFER_STEP is ignored when\n                                              // WRAP occurs.\n    DmaRegs.CH4.DST_TRANSFER_STEP = deststep; // TRANSFER_STEP is ignored when\n                                              // WRAP occurs.\n\n    EDIS;\n}\n\n//\n// DMACH4WrapConfig - DMA channel 4 wrap size configuration\n//\nvoid DMACH4WrapConfig(Uint16 srcwsize, int16 srcwstep, Uint16 deswsize,\n                      int16 deswstep)\n{\n    EALLOW;\n\n    //\n    // Set up WRAP registers:\n    //\n    DmaRegs.CH4.SRC_WRAP_SIZE = srcwsize; // Wrap source address after N bursts\n    DmaRegs.CH4.SRC_WRAP_STEP = srcwstep; // Step for source wrap\n\n    DmaRegs.CH4.DST_WRAP_SIZE = deswsize; // Wrap destination address after\n                                          // N bursts.\n    DmaRegs.CH4.DST_WRAP_STEP = deswstep; // Step for destination wrap\n\n    EDIS;\n}\n\n//\n// DMACH4ModeConfig - DMA Channel 4 mode configuration\n//\nvoid DMACH4ModeConfig(Uint16 persel, Uint16 perinte, Uint16 oneshot,\n                      Uint16 cont, Uint16 synce, Uint16 syncsel,\n                      Uint16 ovrinte, Uint16 datasize, Uint16 chintmode,\n                      Uint16 chinte)\n{\n    EALLOW;\n\n    //\n    // Set up MODE Register:\n    // persel - Source select\n    // PERINTSEL - Should be hard coded to channel, above now selects source\n    // PERINTE - Peripheral interrupt enable\n    // ONESHOT - Oneshot enable\n    // CONTINUOUS - Continuous enable\n    // OVRINTE - Enable/disable the overflow interrupt\n    // DATASIZE - 16-bit/32-bit data size transfers\n    // CHINTMODE - Generate interrupt to CPU at beginning/end of transfer\n    // CHINTE - Channel Interrupt to  CPU enable\n    //\n    DmaClaSrcSelRegs.DMACHSRCSEL1.bit.CH4 = persel;\n    DmaRegs.CH4.MODE.bit.PERINTSEL = 4;\n    DmaRegs.CH4.MODE.bit.PERINTE = perinte;\n    DmaRegs.CH4.MODE.bit.ONESHOT = oneshot;\n    DmaRegs.CH4.MODE.bit.CONTINUOUS = cont;\n    DmaRegs.CH4.MODE.bit.OVRINTE = ovrinte;\n    DmaRegs.CH4.MODE.bit.DATASIZE = datasize;\n    DmaRegs.CH4.MODE.bit.CHINTMODE = chintmode;\n    DmaRegs.CH4.MODE.bit.CHINTE = chinte;\n\n    //\n    // Clear any spurious flags: Interrupt flags and sync error flags\n    //\n    DmaRegs.CH4.CONTROL.bit.PERINTCLR = 1;\n    DmaRegs.CH4.CONTROL.bit.ERRCLR = 1;\n\n    //\n    // Initialize PIE vector for CPU interrupt:\n    // Enable DMA CH4 interrupt in PIE\n    //\n    PieCtrlRegs.PIEIER7.bit.INTx4 = 1;\n\n    EDIS;\n}\n\n//\n// StartDMACH4 - This function starts DMA Channel 4.\n//\nvoid StartDMACH4(void)\n{\n    EALLOW;\n    DmaRegs.CH4.CONTROL.bit.RUN = 1;\n    EDIS;\n}\n\n//\n// DMACH5AddrConfig - DMA channel 5 address configuration\n//\nvoid DMACH5AddrConfig(volatile Uint16 *DMA_Dest,volatile Uint16 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH5.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source; // Point to beginning\n                                                          // of source buffer\n    DmaRegs.CH5.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH5.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;  // Point to beginning\n                                                         // of destination\n                                                         // buffer.\n    DmaRegs.CH5.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH5BurstConfig - DMA Channel 5 burst size configuration\n//\nvoid DMACH5BurstConfig(Uint16 bsize, int16 srcbstep, int16 desbstep)\n{\n    EALLOW;\n\n    //\n    // Set up BURST registers:\n    //\n    DmaRegs.CH5.BURST_SIZE.all = bsize;     // Number of words(X-1) x-ferred in\n                                            // a burst.\n    DmaRegs.CH5.SRC_BURST_STEP = srcbstep;  // Increment source addr between\n                                            // each word x-ferred.\n    DmaRegs.CH5.DST_BURST_STEP = desbstep;  // Increment dest addr between each\n                                            // word x-ferred.\n\n    EDIS;\n}\n\n//\n// DMACH5TransferConfig - DMA channel 5 transfer size configuration\n//\nvoid DMACH5TransferConfig(Uint16 tsize, int16 srctstep, int16 deststep)\n{\n    EALLOW;\n\n    //\n    // Set up TRANSFER registers:\n    //\n    DmaRegs.CH5.TRANSFER_SIZE = tsize;        // Number of bursts per transfer,\n                                              // DMA interrupt will occur after\n                                              // completed transfer.\n    DmaRegs.CH5.SRC_TRANSFER_STEP = srctstep; // TRANSFER_STEP is ignored when\n                                              // WRAP occurs.\n    DmaRegs.CH5.DST_TRANSFER_STEP = deststep; // TRANSFER_STEP is ignored when\n                                              // WRAP occurs.\n\n    EDIS;\n}\n\n//\n// DMACH5WrapConfig - DMA Channel 5 wrap size configuration\n//\nvoid DMACH5WrapConfig(Uint16 srcwsize, int16 srcwstep, Uint16 deswsize,\n                      int16 deswstep)\n{\n    EALLOW;\n\n    //\n    // Set up WRAP registers:\n    //\n    DmaRegs.CH5.SRC_WRAP_SIZE = srcwsize; // Wrap source address after N bursts\n    DmaRegs.CH5.SRC_WRAP_STEP = srcwstep; // Step for source wrap\n\n    DmaRegs.CH5.DST_WRAP_SIZE = deswsize; // Wrap destination address after\n                                          // N bursts.\n    DmaRegs.CH5.DST_WRAP_STEP = deswstep; // Step for destination wrap\n\n    EDIS;\n}\n\n//\n// DMACH5ModeConfig - DMA Channel 5 mode configuration\n//\nvoid DMACH5ModeConfig(Uint16 persel, Uint16 perinte, Uint16 oneshot,\n                      Uint16 cont, Uint16 synce, Uint16 syncsel,\n                      Uint16 ovrinte, Uint16 datasize, Uint16 chintmode,\n                      Uint16 chinte)\n{\n    EALLOW;\n\n    //\n    // Set up MODE Register:\n    // persel - Source select\n    // PERINTSEL - Should be hard coded to channel, above now selects source\n    // PERINTE - Peripheral interrupt enable\n    // ONESHOT - Oneshot enable\n    // CONTINUOUS - Continuous enable\n    // OVRINTE - Enable/disable the overflow interrupt\n    // DATASIZE - 16-bit/32-bit data size transfers\n    // CHINTMODE - Generate interrupt to CPU at beginning/end of transfer\n    // CHINTE - Channel Interrupt to  CPU enable\n    //\n    DmaClaSrcSelRegs.DMACHSRCSEL2.bit.CH5 = persel;\n    DmaRegs.CH5.MODE.bit.PERINTSEL = 5;\n    DmaRegs.CH5.MODE.bit.PERINTE = perinte;\n    DmaRegs.CH5.MODE.bit.ONESHOT = oneshot;\n    DmaRegs.CH5.MODE.bit.CONTINUOUS = cont;\n    DmaRegs.CH5.MODE.bit.OVRINTE = ovrinte;\n    DmaRegs.CH5.MODE.bit.DATASIZE = datasize;\n    DmaRegs.CH5.MODE.bit.CHINTMODE = chintmode;\n    DmaRegs.CH5.MODE.bit.CHINTE = chinte;\n\n    //\n    // Clear any spurious flags: Interrupt flags and sync error flags\n    //\n    DmaRegs.CH5.CONTROL.bit.PERINTCLR = 1;\n    DmaRegs.CH5.CONTROL.bit.ERRCLR = 1;\n\n    //\n    // Initialize PIE vector for CPU interrupt:\n    // Enable DMA CH5 interrupt in PIE\n    //\n    PieCtrlRegs.PIEIER7.bit.INTx5 = 1;\n\n    EDIS;\n}\n\n//\n// StartDMACH5 - This function starts DMA Channel 5.\n//\nvoid StartDMACH5(void)\n{\n    EALLOW;\n    DmaRegs.CH5.CONTROL.bit.RUN = 1;\n    EDIS;\n}\n\n//\n// DMACH6AddrConfig - DMA Channel 6 address configuration\n//\nvoid DMACH6AddrConfig(volatile Uint16 *DMA_Dest,volatile Uint16 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH6.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source; // Point to beginning\n                                                          // of source buffer.\n    DmaRegs.CH6.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH6.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;  // Point to beginning\n                                                         // of destination\n                                                         // buffer.\n    DmaRegs.CH6.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH6BurstConfig - DMA Channel 6 burst size configuration\n//\nvoid DMACH6BurstConfig(Uint16 bsize, int16 srcbstep, int16 desbstep)\n{\n    EALLOW;\n\n    //\n    // Set up BURST registers:\n    //\n    DmaRegs.CH6.BURST_SIZE.all = bsize;     // Number of words(X-1) x-ferred in\n                                            // a burst.\n    DmaRegs.CH6.SRC_BURST_STEP = srcbstep;  // Increment source addr between\n                                            // each word x-ferred.\n    DmaRegs.CH6.DST_BURST_STEP = desbstep;  // Increment dest addr between each\n                                            // word x-ferred.\n\n    EDIS;\n}\n\n//\n// DMACH6TransferConfig - DMA channel 6 transfer size configuration\n//\nvoid DMACH6TransferConfig(Uint16 tsize, int16 srctstep, int16 deststep)\n{\n    EALLOW;\n\n    //\n    // Set up TRANSFER registers:\n    //\n    DmaRegs.CH6.TRANSFER_SIZE = tsize;        // Number of bursts per transfer,\n                                              // DMA interrupt will occur after\n                                              // completed transfer.\n    DmaRegs.CH6.SRC_TRANSFER_STEP = srctstep; // TRANSFER_STEP is ignored when\n                                              // WRAP occurs.\n    DmaRegs.CH6.DST_TRANSFER_STEP = deststep; // TRANSFER_STEP is ignored when\n                                              // WRAP occurs.\n\n    EDIS;\n}\n\n//\n// DMACH6WrapConfig - DMA Channel 6 wrap size configuration\n//\nvoid DMACH6WrapConfig(Uint16 srcwsize, int16 srcwstep, Uint16 deswsize,\n                      int16 deswstep)\n{\n    EALLOW;\n\n    //\n    // Set up WRAP registers:\n    //\n    DmaRegs.CH6.SRC_WRAP_SIZE = srcwsize; // Wrap source address after N bursts\n    DmaRegs.CH6.SRC_WRAP_STEP = srcwstep; // Step for source wrap\n\n    DmaRegs.CH6.DST_WRAP_SIZE = deswsize; // Wrap destination address after N\n                                          // bursts.\n    DmaRegs.CH6.DST_WRAP_STEP = deswstep; // Step for destination wrap\n\n    EDIS;\n}\n\n//\n// DMACH6ModeConfig - DMA Channel 6 mode configuration\n//\nvoid DMACH6ModeConfig(Uint16 persel, Uint16 perinte, Uint16 oneshot,\n                      Uint16 cont, Uint16 synce, Uint16 syncsel,\n                      Uint16 ovrinte, Uint16 datasize, Uint16 chintmode,\n                      Uint16 chinte)\n{\n    EALLOW;\n\n    //\n    // Set up MODE Register:\n    // persel - Source select\n    // PERINTSEL - Should be hard coded to channel, above now selects source\n    // PERINTE - Peripheral interrupt enable\n    // ONESHOT - Oneshot enable\n    // CONTINUOUS - Continuous enable\n    // OVRINTE - Enable/disable the overflow interrupt\n    // DATASIZE - 16-bit/32-bit data size transfers\n    // CHINTMODE - Generate interrupt to CPU at beginning/end of transfer\n    // CHINTE - Channel Interrupt to  CPU enable\n    //\n    DmaClaSrcSelRegs.DMACHSRCSEL2.bit.CH6 = persel;\n    DmaRegs.CH6.MODE.bit.PERINTSEL = 6;\n    DmaRegs.CH6.MODE.bit.PERINTE = perinte;\n    DmaRegs.CH6.MODE.bit.ONESHOT = oneshot;\n    DmaRegs.CH6.MODE.bit.CONTINUOUS = cont;\n    DmaRegs.CH6.MODE.bit.OVRINTE = ovrinte;\n    DmaRegs.CH6.MODE.bit.DATASIZE = datasize;\n    DmaRegs.CH6.MODE.bit.CHINTMODE = chintmode;\n    DmaRegs.CH6.MODE.bit.CHINTE = chinte;\n\n    //\n    // Clear any spurious flags: Interrupt flags and sync error flags\n    //\n    DmaRegs.CH6.CONTROL.bit.PERINTCLR = 1;\n    DmaRegs.CH6.CONTROL.bit.ERRCLR = 1;\n\n    //\n    // Initialize PIE vector for CPU interrupt:\n    // Enable DMA CH6 interrupt in PIE\n    //\n    PieCtrlRegs.PIEIER7.bit.INTx6 = 1;\n\n    EDIS;\n}\n\n//\n// StartDMACH6 - This function starts DMA Channel 6.\n//\nvoid StartDMACH6(void)\n{\n    EALLOW;\n    DmaRegs.CH6.CONTROL.bit.RUN = 1;\n    EDIS;\n}\n\n//\n// NOTE:\n// Following functions are required for EMIF as the address is out of\n// 22bit range\n//\n\n//\n// DMACH1AddrConfig32bit - DMA Channel 1 address configuration for 32bit\n//\nvoid DMACH1AddrConfig32bit(volatile Uint32 *DMA_Dest,\n                           volatile Uint32 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH1.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source; // Point to beginning\n                                                          // of source buffer\n    DmaRegs.CH1.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH1.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;  // Point to beginning\n                                                         // of destination\n                                                         // buffer\n    DmaRegs.CH1.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH2AddrConfig32bit - DMA Channel 2 address configuration for 32bit\n//\nvoid DMACH2AddrConfig32bit(volatile Uint32 *DMA_Dest,\n                           volatile Uint32 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH2.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source; // Point to beginning\n                                                          // of source buffer\n    DmaRegs.CH2.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH2.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;  // Point to beginning\n                                                         // of destination\n                                                         // buffer\n    DmaRegs.CH2.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH3AddrConfig32bit - DMA Channel 3 address configuration for 32bit\n//\nvoid DMACH3AddrConfig32bit(volatile Uint32 *DMA_Dest,\n                           volatile Uint32 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH3.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source; // Point to beginning\n                                                          // of source buffer\n    DmaRegs.CH3.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH3.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;  // Point to beginning\n                                                         // of destination\n                                                         // buffer.\n    DmaRegs.CH3.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH4AddrConfig32bit - DMA Channel 4 address configuration for 32bit\n//\nvoid DMACH4AddrConfig32bit(volatile Uint32 *DMA_Dest,\n                           volatile Uint32 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH4.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source; // Point to beginning\n                                                          // of source buffer\n    DmaRegs.CH4.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH4.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;   // Point to beginning\n                                                          // of destination\n                                                          // buffer\n    DmaRegs.CH4.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH5AddrConfig32bit - DMA Channel 5 address configuration for 32bit\n//\nvoid DMACH5AddrConfig32bit(volatile Uint32 *DMA_Dest,\n                           volatile Uint32 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH5.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source; // Point to beginning\n                                                          // of source buffer\n    DmaRegs.CH5.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH5.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;   // Point to beginning\n                                                          // of destination\n                                                          // buffer\n    DmaRegs.CH5.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// DMACH6AddrConfig32bit - DMA Channel 6 address configuration for 32bit\n//\nvoid DMACH6AddrConfig32bit(volatile Uint32 *DMA_Dest,\n                           volatile Uint32 *DMA_Source)\n{\n    EALLOW;\n\n    //\n    // Set up SOURCE address:\n    //\n    DmaRegs.CH6.SRC_BEG_ADDR_SHADOW = (Uint32)DMA_Source; // Point to beginning\n                                                          // of source buffer\n    DmaRegs.CH6.SRC_ADDR_SHADOW =     (Uint32)DMA_Source;\n\n    //\n    // Set up DESTINATION address:\n    //\n    DmaRegs.CH6.DST_BEG_ADDR_SHADOW = (Uint32)DMA_Dest;   // Point to beginning\n                                                          // of destination\n                                                          // buffer\n    DmaRegs.CH6.DST_ADDR_SHADOW =     (Uint32)DMA_Dest;\n\n    EDIS;\n}\n\n//\n// End of file\n//\n"},{"name":"F2837xD_GlobalVariableDefs.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\headers\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:    F2837xD_globalvariabledefs.c\n//\n// TITLE:   F2837xD Global Variables and Data Section Pragmas.\n//\n//###########################################################################\n//\n// $Release Date:  $\n// $Copyright:\n// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n#include \"F2837xD_device.h\"     // F2837xD Headerfile Include File\n\n//---------------------------------------------------------------------------\n// Define Global Peripheral Variables:\n//\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AccessProtectionRegsFile\")\n#else\n#pragma DATA_SECTION(AccessProtectionRegs,\"AccessProtectionRegsFile\");\n#endif\nvolatile struct ACCESS_PROTECTION_REGS AccessProtectionRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdcaRegsFile\")\n#else\n#pragma DATA_SECTION(AdcaRegs,\"AdcaRegsFile\");\n#endif\nvolatile struct ADC_REGS AdcaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdcbRegsFile\")\n#else\n#pragma DATA_SECTION(AdcbRegs,\"AdcbRegsFile\");\n#endif\nvolatile struct ADC_REGS AdcbRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdccRegsFile\")\n#else\n#pragma DATA_SECTION(AdccRegs,\"AdccRegsFile\");\n#endif\nvolatile struct ADC_REGS AdccRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdcdRegsFile\")\n#else\n#pragma DATA_SECTION(AdcdRegs,\"AdcdRegsFile\");\n#endif\nvolatile struct ADC_REGS AdcdRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdcaResultRegsFile\")\n#else\n#pragma DATA_SECTION(AdcaResultRegs,\"AdcaResultRegsFile\");\n#endif\nvolatile struct ADC_RESULT_REGS AdcaResultRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdcbResultRegsFile\")\n#else\n#pragma DATA_SECTION(AdcbResultRegs,\"AdcbResultRegsFile\");\n#endif\nvolatile struct ADC_RESULT_REGS AdcbResultRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdccResultRegsFile\")\n#else\n#pragma DATA_SECTION(AdccResultRegs,\"AdccResultRegsFile\");\n#endif\nvolatile struct ADC_RESULT_REGS AdccResultRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AdcdResultRegsFile\")\n#else\n#pragma DATA_SECTION(AdcdResultRegs,\"AdcdResultRegsFile\");\n#endif\nvolatile struct ADC_RESULT_REGS AdcdResultRegs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"AnalogSubsysRegsFile\")\n#else\n#pragma DATA_SECTION(AnalogSubsysRegs,\"AnalogSubsysRegsFile\");\n#endif\nvolatile struct ANALOG_SUBSYS_REGS AnalogSubsysRegs;\n#endif // ifdef CPU1\n\n#if __TI_COMPILER_VERSION__ >= 16006000\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CanaRegsFile\")\n#else\n#pragma DATA_SECTION(CanaRegs,\"CanaRegsFile\");\n#endif\nvolatile struct CAN_REGS CanaRegs;\n#endif // __TI_COMPILER_VERSION__ >= 16006000\n\n#if __TI_COMPILER_VERSION__ >= 16006000\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CanbRegsFile\")\n#else\n#pragma DATA_SECTION(CanbRegs,\"CanbRegsFile\");\n#endif\nvolatile struct CAN_REGS CanbRegs;\n#endif // __TI_COMPILER_VERSION__ >= 16006000\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cla1RegsFile\")\n#else\n#pragma DATA_SECTION(Cla1Regs,\"Cla1RegsFile\");\n#endif\nvolatile struct CLA_REGS Cla1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb1DataExchRegsFile\")\n#else\n#pragma DATA_SECTION(Clb1DataExchRegs,\"Clb1DataExchRegsFile\");\n#endif\nvolatile struct CLB_DATA_EXCHANGE_REGS Clb1DataExchRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb2DataExchRegsFile\")\n#else\n#pragma DATA_SECTION(Clb2DataExchRegs,\"Clb2DataExchRegsFile\");\n#endif\nvolatile struct CLB_DATA_EXCHANGE_REGS Clb2DataExchRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb3DataExchRegsFile\")\n#else\n#pragma DATA_SECTION(Clb3DataExchRegs,\"Clb3DataExchRegsFile\");\n#endif\nvolatile struct CLB_DATA_EXCHANGE_REGS Clb3DataExchRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb4DataExchRegsFile\")\n#else\n#pragma DATA_SECTION(Clb4DataExchRegs,\"Clb4DataExchRegsFile\");\n#endif\nvolatile struct CLB_DATA_EXCHANGE_REGS Clb4DataExchRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb1LogicCfgRegsFile\")\n#else\n#pragma DATA_SECTION(Clb1LogicCfgRegs,\"Clb1LogicCfgRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONFIG_REGS Clb1LogicCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb2LogicCfgRegsFile\")\n#else\n#pragma DATA_SECTION(Clb2LogicCfgRegs,\"Clb2LogicCfgRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONFIG_REGS Clb2LogicCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb3LogicCfgRegsFile\")\n#else\n#pragma DATA_SECTION(Clb3LogicCfgRegs,\"Clb3LogicCfgRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONFIG_REGS Clb3LogicCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb4LogicCfgRegsFile\")\n#else\n#pragma DATA_SECTION(Clb4LogicCfgRegs,\"Clb4LogicCfgRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONFIG_REGS Clb4LogicCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb1LogicCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(Clb1LogicCtrlRegs,\"Clb1LogicCtrlRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONTROL_REGS Clb1LogicCtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb2LogicCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(Clb2LogicCtrlRegs,\"Clb2LogicCtrlRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONTROL_REGS Clb2LogicCtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb3LogicCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(Clb3LogicCtrlRegs,\"Clb3LogicCtrlRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONTROL_REGS Clb3LogicCtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Clb4LogicCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(Clb4LogicCtrlRegs,\"Clb4LogicCtrlRegsFile\");\n#endif\nvolatile struct CLB_LOGIC_CONTROL_REGS Clb4LogicCtrlRegs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ClbXbarRegsFile\")\n#else\n#pragma DATA_SECTION(ClbXbarRegs,\"ClbXbarRegsFile\");\n#endif\nvolatile struct CLB_XBAR_REGS ClbXbarRegs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ClkCfgRegsFile\")\n#else\n#pragma DATA_SECTION(ClkCfgRegs,\"ClkCfgRegsFile\");\n#endif\nvolatile struct CLK_CFG_REGS ClkCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss1RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss1Regs,\"Cmpss1RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss2RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss2Regs,\"Cmpss2RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss3RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss3Regs,\"Cmpss3RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss3Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss4RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss4Regs,\"Cmpss4RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss4Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss5RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss5Regs,\"Cmpss5RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss5Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss6RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss6Regs,\"Cmpss6RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss6Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss7RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss7Regs,\"Cmpss7RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss7Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Cmpss8RegsFile\")\n#else\n#pragma DATA_SECTION(Cmpss8Regs,\"Cmpss8RegsFile\");\n#endif\nvolatile struct CMPSS_REGS Cmpss8Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CpuTimer0RegsFile\")\n#else\n#pragma DATA_SECTION(CpuTimer0Regs,\"CpuTimer0RegsFile\");\n#endif\nvolatile struct CPUTIMER_REGS CpuTimer0Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CpuTimer1RegsFile\")\n#else\n#pragma DATA_SECTION(CpuTimer1Regs,\"CpuTimer1RegsFile\");\n#endif\nvolatile struct CPUTIMER_REGS CpuTimer1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CpuTimer2RegsFile\")\n#else\n#pragma DATA_SECTION(CpuTimer2Regs,\"CpuTimer2RegsFile\");\n#endif\nvolatile struct CPUTIMER_REGS CpuTimer2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"CpuSysRegsFile\")\n#else\n#pragma DATA_SECTION(CpuSysRegs,\"CpuSysRegsFile\");\n#endif\nvolatile struct CPU_SYS_REGS CpuSysRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DacaRegsFile\")\n#else\n#pragma DATA_SECTION(DacaRegs,\"DacaRegsFile\");\n#endif\nvolatile struct DAC_REGS DacaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DacbRegsFile\")\n#else\n#pragma DATA_SECTION(DacbRegs,\"DacbRegsFile\");\n#endif\nvolatile struct DAC_REGS DacbRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DaccRegsFile\")\n#else\n#pragma DATA_SECTION(DaccRegs,\"DaccRegsFile\");\n#endif\nvolatile struct DAC_REGS DaccRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DcsmCommonRegsFile\")\n#else\n#pragma DATA_SECTION(DcsmCommonRegs,\"DcsmCommonRegsFile\");\n#endif\nvolatile struct DCSM_COMMON_REGS DcsmCommonRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DcsmZ1RegsFile\")\n#else\n#pragma DATA_SECTION(DcsmZ1Regs,\"DcsmZ1RegsFile\");\n#endif\nvolatile struct DCSM_Z1_REGS DcsmZ1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DcsmZ2RegsFile\")\n#else\n#pragma DATA_SECTION(DcsmZ2Regs,\"DcsmZ2RegsFile\");\n#endif\nvolatile struct DCSM_Z2_REGS DcsmZ2Regs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DevCfgRegsFile\")\n#else\n#pragma DATA_SECTION(DevCfgRegs,\"DevCfgRegsFile\");\n#endif\nvolatile struct DEV_CFG_REGS DevCfgRegs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DmaClaSrcSelRegsFile\")\n#else\n#pragma DATA_SECTION(DmaClaSrcSelRegs,\"DmaClaSrcSelRegsFile\");\n#endif\nvolatile struct DMA_CLA_SRC_SEL_REGS DmaClaSrcSelRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"DmaRegsFile\")\n#else\n#pragma DATA_SECTION(DmaRegs,\"DmaRegsFile\");\n#endif\nvolatile struct DMA_REGS DmaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap1RegsFile\")\n#else\n#pragma DATA_SECTION(ECap1Regs,\"ECap1RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap2RegsFile\")\n#else\n#pragma DATA_SECTION(ECap2Regs,\"ECap2RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap3RegsFile\")\n#else\n#pragma DATA_SECTION(ECap3Regs,\"ECap3RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap3Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap4RegsFile\")\n#else\n#pragma DATA_SECTION(ECap4Regs,\"ECap4RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap4Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap5RegsFile\")\n#else\n#pragma DATA_SECTION(ECap5Regs,\"ECap5RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap5Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ECap6RegsFile\")\n#else\n#pragma DATA_SECTION(ECap6Regs,\"ECap6RegsFile\");\n#endif\nvolatile struct ECAP_REGS ECap6Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Emif1ConfigRegsFile\")\n#else\n#pragma DATA_SECTION(Emif1ConfigRegs,\"Emif1ConfigRegsFile\");\n#endif\nvolatile struct EMIF1_CONFIG_REGS Emif1ConfigRegs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Emif2ConfigRegsFile\")\n#else\n#pragma DATA_SECTION(Emif2ConfigRegs,\"Emif2ConfigRegsFile\");\n#endif\nvolatile struct EMIF2_CONFIG_REGS Emif2ConfigRegs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Emif1RegsFile\")\n#else\n#pragma DATA_SECTION(Emif1Regs,\"Emif1RegsFile\");\n#endif\nvolatile struct EMIF_REGS Emif1Regs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Emif2RegsFile\")\n#else\n#pragma DATA_SECTION(Emif2Regs,\"Emif2RegsFile\");\n#endif\nvolatile struct EMIF_REGS Emif2Regs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm1RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm1Regs,\"EPwm1RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm2RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm2Regs,\"EPwm2RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm3RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm3Regs,\"EPwm3RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm3Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm4RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm4Regs,\"EPwm4RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm4Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm5RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm5Regs,\"EPwm5RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm5Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm6RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm6Regs,\"EPwm6RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm6Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm7RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm7Regs,\"EPwm7RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm7Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm8RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm8Regs,\"EPwm8RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm8Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm9RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm9Regs,\"EPwm9RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm9Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm10RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm10Regs,\"EPwm10RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm10Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm11RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm11Regs,\"EPwm11RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm11Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwm12RegsFile\")\n#else\n#pragma DATA_SECTION(EPwm12Regs,\"EPwm12RegsFile\");\n#endif\nvolatile struct EPWM_REGS EPwm12Regs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EPwmXbarRegsFile\")\n#else\n#pragma DATA_SECTION(EPwmXbarRegs,\"EPwmXbarRegsFile\");\n#endif\nvolatile struct EPWM_XBAR_REGS EPwmXbarRegs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EQep1RegsFile\")\n#else\n#pragma DATA_SECTION(EQep1Regs,\"EQep1RegsFile\");\n#endif\nvolatile struct EQEP_REGS EQep1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EQep2RegsFile\")\n#else\n#pragma DATA_SECTION(EQep2Regs,\"EQep2RegsFile\");\n#endif\nvolatile struct EQEP_REGS EQep2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"EQep3RegsFile\")\n#else\n#pragma DATA_SECTION(EQep3Regs,\"EQep3RegsFile\");\n#endif\nvolatile struct EQEP_REGS EQep3Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Flash0CtrlRegsFile\")\n#else\n#pragma DATA_SECTION(Flash0CtrlRegs,\"Flash0CtrlRegsFile\");\n#endif\nvolatile struct FLASH_CTRL_REGS Flash0CtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Flash0EccRegsFile\")\n#else\n#pragma DATA_SECTION(Flash0EccRegs,\"Flash0EccRegsFile\");\n#endif\nvolatile struct FLASH_ECC_REGS Flash0EccRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"FlashPumpSemaphoreRegsFile\")\n#else\n#pragma DATA_SECTION(FlashPumpSemaphoreRegs,\"FlashPumpSemaphoreRegsFile\");\n#endif\nvolatile struct FLASH_PUMP_SEMAPHORE_REGS FlashPumpSemaphoreRegs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"GpioCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(GpioCtrlRegs,\"GpioCtrlRegsFile\");\n#endif\nvolatile struct GPIO_CTRL_REGS GpioCtrlRegs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"GpioDataRegsFile\")\n#else\n#pragma DATA_SECTION(GpioDataRegs,\"GpioDataRegsFile\");\n#endif\nvolatile struct GPIO_DATA_REGS GpioDataRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"I2caRegsFile\")\n#else\n#pragma DATA_SECTION(I2caRegs,\"I2caRegsFile\");\n#endif\nvolatile struct I2C_REGS I2caRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"I2cbRegsFile\")\n#else\n#pragma DATA_SECTION(I2cbRegs,\"I2cbRegsFile\");\n#endif\nvolatile struct I2C_REGS I2cbRegs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"InputXbarRegsFile\")\n#else\n#pragma DATA_SECTION(InputXbarRegs,\"InputXbarRegsFile\");\n#endif\nvolatile struct INPUT_XBAR_REGS InputXbarRegs;\n#endif // ifdef CPU1\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"IpcRegsFile\")\n#else\n#pragma DATA_SECTION(IpcRegs,\"IpcRegsFile\");\n#endif\nvolatile struct IPC_REGS_CPU1 IpcRegs;\n#endif // ifdef CPU1\n\n#ifdef CPU2\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"IpcRegsFile\")\n#else\n#pragma DATA_SECTION(IpcRegs,\"IpcRegsFile\");\n#endif\nvolatile struct IPC_REGS_CPU2 IpcRegs;\n#endif // ifdef CPU2\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"MemoryErrorRegsFile\")\n#else\n#pragma DATA_SECTION(MemoryErrorRegs,\"MemoryErrorRegsFile\");\n#endif\nvolatile struct MEMORY_ERROR_REGS MemoryErrorRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"MemCfgRegsFile\")\n#else\n#pragma DATA_SECTION(MemCfgRegs,\"MemCfgRegsFile\");\n#endif\nvolatile struct MEM_CFG_REGS MemCfgRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"McbspaRegsFile\")\n#else\n#pragma DATA_SECTION(McbspaRegs,\"McbspaRegsFile\");\n#endif\nvolatile struct McBSP_REGS McbspaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"McbspbRegsFile\")\n#else\n#pragma DATA_SECTION(McbspbRegs,\"McbspbRegsFile\");\n#endif\nvolatile struct McBSP_REGS McbspbRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"NmiIntruptRegsFile\")\n#else\n#pragma DATA_SECTION(NmiIntruptRegs,\"NmiIntruptRegsFile\");\n#endif\nvolatile struct NMI_INTRUPT_REGS NmiIntruptRegs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"OutputXbarRegsFile\")\n#else\n#pragma DATA_SECTION(OutputXbarRegs,\"OutputXbarRegsFile\");\n#endif\nvolatile struct OUTPUT_XBAR_REGS OutputXbarRegs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"PieCtrlRegsFile\")\n#else\n#pragma DATA_SECTION(PieCtrlRegs,\"PieCtrlRegsFile\");\n#endif\nvolatile struct PIE_CTRL_REGS PieCtrlRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"PieVectTableFile\")\n#else\n#pragma DATA_SECTION(PieVectTable,\"PieVectTableFile\");\n#endif\nvolatile struct PIE_VECT_TABLE PieVectTable;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"RomPrefetchRegsFile\")\n#else\n#pragma DATA_SECTION(RomPrefetchRegs,\"RomPrefetchRegsFile\");\n#endif\nvolatile struct ROM_PREFETCH_REGS RomPrefetchRegs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"RomWaitStateRegsFile\")\n#else\n#pragma DATA_SECTION(RomWaitStateRegs,\"RomWaitStateRegsFile\");\n#endif\nvolatile struct ROM_WAIT_STATE_REGS RomWaitStateRegs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"SciaRegsFile\")\n#else\n#pragma DATA_SECTION(SciaRegs,\"SciaRegsFile\");\n#endif\nvolatile struct SCI_REGS SciaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ScibRegsFile\")\n#else\n#pragma DATA_SECTION(ScibRegs,\"ScibRegsFile\");\n#endif\nvolatile struct SCI_REGS ScibRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ScicRegsFile\")\n#else\n#pragma DATA_SECTION(ScicRegs,\"ScicRegsFile\");\n#endif\nvolatile struct SCI_REGS ScicRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"ScidRegsFile\")\n#else\n#pragma DATA_SECTION(ScidRegs,\"ScidRegsFile\");\n#endif\nvolatile struct SCI_REGS ScidRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Sdfm1RegsFile\")\n#else\n#pragma DATA_SECTION(Sdfm1Regs,\"Sdfm1RegsFile\");\n#endif\nvolatile struct SDFM_REGS Sdfm1Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"Sdfm2RegsFile\")\n#else\n#pragma DATA_SECTION(Sdfm2Regs,\"Sdfm2RegsFile\");\n#endif\nvolatile struct SDFM_REGS Sdfm2Regs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"SpiaRegsFile\")\n#else\n#pragma DATA_SECTION(SpiaRegs,\"SpiaRegsFile\");\n#endif\nvolatile struct SPI_REGS SpiaRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"SpibRegsFile\")\n#else\n#pragma DATA_SECTION(SpibRegs,\"SpibRegsFile\");\n#endif\nvolatile struct SPI_REGS SpibRegs;\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"SpicRegsFile\")\n#else\n#pragma DATA_SECTION(SpicRegs,\"SpicRegsFile\");\n#endif\nvolatile struct SPI_REGS SpicRegs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"SyncSocRegsFile\")\n#else\n#pragma DATA_SECTION(SyncSocRegs,\"SyncSocRegsFile\");\n#endif\nvolatile struct SYNC_SOC_REGS SyncSocRegs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"UidRegsFile\")\n#else\n#pragma DATA_SECTION(UidRegs,\"UidRegsFile\");\n#endif\nvolatile struct UID_REGS UidRegs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"UppRegsFile\")\n#else\n#pragma DATA_SECTION(UppRegs,\"UppRegsFile\");\n#endif\nvolatile struct UPP_REGS UppRegs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"WdRegsFile\")\n#else\n#pragma DATA_SECTION(WdRegs,\"WdRegsFile\");\n#endif\nvolatile struct WD_REGS WdRegs;\n\n#ifdef CPU1\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"XbarRegsFile\")\n#else\n#pragma DATA_SECTION(XbarRegs,\"XbarRegsFile\");\n#endif\nvolatile struct XBAR_REGS XbarRegs;\n#endif // ifdef CPU1\n\n//----------------------------------------\n#ifdef __cplusplus\n#pragma DATA_SECTION(\"XintRegsFile\")\n#else\n#pragma DATA_SECTION(XintRegs,\"XintRegsFile\");\n#endif\nvolatile struct XINT_REGS XintRegs;\n\n\n\n//===========================================================================\n// End of file.\n//===========================================================================\n\n\n"},{"name":"F2837xD_Gpio.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:    F2837xD_Gpio.c\n//\n// TITLE:    GPIO module support functions\n//\n//###########################################################################\n//\n// $Release Date:  $\n// $Copyright:\n// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"F2837xD_device.h\"\n#include \"F2837xD_Examples.h\"\n\n//\n//Low-level functions for GPIO configuration (CPU1 only)\n//\n\n#ifdef CPU1\n    //\n    // InitGpio - Sets all pins to be muxed to GPIO in input mode.\n    //            Also resets CPU control to CPU1 and disables open\n    //            drain and polarity inversion and sets the qualification to\n    //            synchronous. Also unlocks all GPIOs. Only one CPU should call\n    //            this function.\n    //\n    void InitGpio()\n    {\n        volatile Uint32 *gpioBaseAddr;\n        Uint16 regOffset;\n\n        //\n        //Disable pin locks\n        //\n        EALLOW;\n        GpioCtrlRegs.GPALOCK.all = 0x00000000;\n        GpioCtrlRegs.GPBLOCK.all = 0x00000000;\n        GpioCtrlRegs.GPCLOCK.all = 0x00000000;\n        GpioCtrlRegs.GPDLOCK.all = 0x00000000;\n        GpioCtrlRegs.GPELOCK.all = 0x00000000;\n        GpioCtrlRegs.GPFLOCK.all = 0x00000000;\n\n        //\n        // Fill all registers with zeros. Writing to each register separately\n        // for six GPIO modules would make this function *very* long.\n        // Fortunately, we'd be writing them all with zeros anyway, so this\n        // saves a lot of space.\n        //\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs;\n        for (regOffset = 0; regOffset < sizeof(GpioCtrlRegs)/2; regOffset++)\n        {\n            //\n            //Hack to avoid enabling pull-ups on all pins. GPyPUD is offset\n            //0x0C in each register group of 0x40 words. Since this is a\n            //32-bit pointer, the addresses must be divided by 2.\n            //\n            if (regOffset % (0x40/2) != (0x0C/2))\n            {\n                gpioBaseAddr[regOffset] = 0x00000000;\n            }\n        }\n\n        gpioBaseAddr = (Uint32 *)&GpioDataRegs;\n        for (regOffset = 0; regOffset < sizeof(GpioDataRegs)/2; regOffset++)\n        {\n            gpioBaseAddr[regOffset] = 0x00000000;\n        }\n\n        EDIS;\n    }\n\n    //\n    // GPIO_SetupPinMux - Set the peripheral muxing for the specified pin. The\n    //                    appropriate parameters can be found in the GPIO Muxed\n    //                    Pins table(4.4) in the  datasheet. Use the GPIO index\n    //                    row (0 to 15) to select a muxing option for the GPIO.\n    //\n    void GPIO_SetupPinMux(Uint16 gpioNumber, Uint16 cpu, Uint16 muxPosition)\n    {\n        volatile Uint32 *gpioBaseAddr;\n        volatile Uint32 *mux, *gmux, *csel;\n        Uint16 pin32, pin16, pin8;\n\n        pin32 = gpioNumber % 32;\n        pin16 = gpioNumber % 16;\n        pin8 = gpioNumber % 8;\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (gpioNumber/32)*GPY_CTRL_OFFSET;\n\n        //\n        //Sanity check for valid cpu and peripheral values\n        //\n        if (cpu > GPIO_MUX_CPU2CLA || muxPosition > 0xF)\n            return;\n\n        //\n        //Create pointers to the appropriate registers. This is a workaround\n        //for the way GPIO registers are defined. The standard definition\n        //in the header file makes it very easy to do named accesses of one\n        //register or bit, but hard to do arbitrary numerical accesses. It's\n        //easier to have an array of GPIO modules with identical registers,\n        //including arrays for multi-register groups like GPyCSEL1-4. But\n        //the header file doesn't define anything we can turn into an array,\n        //so manual pointer arithmetic is used instead.\n        //\n        mux = gpioBaseAddr + GPYMUX + pin32/16;\n        gmux = gpioBaseAddr + GPYGMUX + pin32/16;\n        csel = gpioBaseAddr + GPYCSEL + pin32/8;\n\n        //\n        //Now for the actual function\n        //\n        EALLOW;\n\n        //\n        //To change the muxing, set the peripheral mux to 0/GPIO first to avoid\n        //glitches, then change the group mux, then set the peripheral mux to\n        //its target value. Finally, set the CPU select. This procedure is\n        //described in the TRM. Unfortunately, since we don't know the pin in\n        //advance we can't hardcode a bitfield reference, so there's some\n        //tricky bit twiddling here.\n        //\n        *mux &= ~(0x3UL << (2*pin16));\n        *gmux &= ~(0x3UL << (2*pin16));\n        *gmux |= (Uint32)((muxPosition >> 2) & 0x3UL) << (2*pin16);\n        *mux |= (Uint32)(muxPosition & 0x3UL) << (2*pin16);\n\n        *csel &= ~(0x3L << (4*pin8));\n        *csel |= (Uint32)(cpu & 0x3L) << (4*pin8);\n\n        //\n        //WARNING: This code does not touch the analog mode select registers,\n        //which are needed to give the USB module control of its IOs.\n        //\n        EDIS;\n    }\n\n    //\n    // GPIO_SetupPinOptions - Setup up the GPIO input/output options for the\n    //                        specified pin.\n    //\n    //The flags are a 16-bit mask produced by ORing together options.\n    //For input pins, the valid flags are:\n    //GPIO_PULLUP    Enable pull-up\n    //GPIO_INVERT    Enable input polarity inversion\n    //GPIO_SYNC        Synchronize the input latch to PLLSYSCLK\n    //               (default -- you don't need to specify this)\n    //GPIO_QUAL3    Use 3-sample qualification\n    //GPIO_QUAL6    Use 6-sample qualification\n    //GPIO_ASYNC    Do not use synchronization or qualification\n    //(Note: only one of SYNC, QUAL3, QUAL6, or ASYNC is allowed)\n    //\n    //For output pins, the valid flags are:\n    //GPIO_OPENDRAIN    Output in open drain mode\n    //GPIO_PULLUP        If open drain enabled, also enable the pull-up\n    //and the input qualification flags (SYNC/QUAL3/QUAL6/SYNC) listed above.\n    //\n    //With no flags, the default input state is synchronous with no\n    //pull-up or polarity inversion. The default output state is\n    //the standard digital output.\n    //\n    void GPIO_SetupPinOptions(Uint16 gpioNumber, Uint16 output, Uint16 flags)\n    {\n        volatile Uint32 *gpioBaseAddr;\n        volatile Uint32 *dir, *pud, *inv, *odr, *qsel;\n        Uint32 pin32, pin16, pinMask, qual;\n\n        pin32 = gpioNumber % 32;\n        pin16 = gpioNumber % 16;\n        pinMask = 1UL << pin32;\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (gpioNumber/32)*GPY_CTRL_OFFSET;\n\n        //\n        //Create pointers to the appropriate registers. This is a workaround\n        //for the way GPIO registers are defined. The standard definition\n        //in the header file makes it very easy to do named accesses of one\n        //register or bit, but hard to do arbitrary numerical accesses. It's\n        //easier to have an array of GPIO modules with identical registers,\n        //including arrays for multi-register groups like GPyQSEL1-2. But\n        //the header file doesn't define anything we can turn into an array,\n        //so manual pointer arithmetic is used instead.\n        //\n        dir = gpioBaseAddr + GPYDIR;\n        pud = gpioBaseAddr + GPYPUD;\n        inv = gpioBaseAddr + GPYINV;\n        odr = gpioBaseAddr + GPYODR;\n        qsel = gpioBaseAddr + GPYQSEL + pin32/16;\n\n        EALLOW;\n\n        //\n        //Set the data direction\n        //\n        *dir &= ~pinMask;\n        if (output == 1)\n        {\n            //\n            //Output, with optional open drain mode and pull-up\n            //\n            *dir |= pinMask;\n\n            //\n            //Enable open drain if necessary\n            //\n            if (flags & GPIO_OPENDRAIN)\n            {\n                *odr |= pinMask;\n            }\n            else\n            {\n                *odr &= ~pinMask;\n            }\n\n            //\n            //Enable pull-up if necessary. Open drain mode must be active.\n            //\n            if (flags & (GPIO_OPENDRAIN | GPIO_PULLUP))\n            {\n                *pud &= ~pinMask;\n            }\n            else\n            {\n                *pud |= pinMask;\n            }\n        }\n        else\n        {\n            //\n            //Input, with optional pull-up, qualification, and polarity\n            //inversion\n            //\n            *dir &= ~pinMask;\n\n            //\n            //Enable pull-up if necessary\n            //\n            if (flags & GPIO_PULLUP)\n            {\n                *pud &= ~pinMask;\n            }\n            else\n            {\n                *pud |= pinMask;\n            }\n\n            //\n            //Invert polarity if necessary\n            //\n            if (flags & GPIO_INVERT)\n            {\n                *inv |= pinMask;\n            }\n            else\n            {\n                *inv &= ~pinMask;\n            }\n        }\n\n        //\n        //Extract the qualification parameter and load it into the register.\n        //This is also needed for open drain outputs, so we might as well do it\n        //all the time.\n        //\n        qual = (flags & GPIO_ASYNC) / GPIO_QUAL3;\n        *qsel &= ~(0x3L << (2 * pin16));\n        if (qual != 0x0)\n        {\n            *qsel |= qual << (2 * pin16);\n        }\n\n        EDIS;\n    }\n\n    //\n    // GPIO_SetupLock - Enable or disable the GPIO register bit lock for the\n    //                  specified pin.\n    //                  The valid flags are:\n    //                  GPIO_UNLOCK - Unlock the pin setup register bits for\n    //                                the specified pin\n    //                  GPIO_LOCK - Lock the pin setup register bits for the\n    //                              specified pin\n    //\n    void GPIO_SetupLock(Uint16 gpioNumber, Uint16 flags)\n    {\n        volatile Uint32 *gpioBaseAddr;\n        volatile Uint32 *lock;\n        Uint32 pin32, pinMask;\n\n        pin32 = gpioNumber % 32;\n        pinMask = 1UL << pin32;\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (gpioNumber/32)*GPY_CTRL_OFFSET;\n\n        //\n        //Create pointers to the appropriate registers. This is a workaround\n        //for the way GPIO registers are defined. The standard definition\n        //in the header file makes it very easy to do named accesses of one\n        //register or bit, but hard to do arbitrary numerical accesses. It's\n        //easier to have an array of GPIO modules with identical registers,\n        //including arrays for multi-register groups like GPyQSEL1-2. But\n        //the header file doesn't define anything we can turn into an array,\n        //so manual pointer arithmetic is used instead.\n        //\n        lock = gpioBaseAddr + GPYLOCK;\n\n        EALLOW;\n        if(flags)\n        {\n            //Lock the pin\n            *lock |= pinMask;\n        }\n        else\n        {\n            //Unlock the pin\n            *lock &= ~pinMask;\n        }\n        EDIS;\n    }\n\n    //\n    //External interrupt setup\n    //\n    void GPIO_SetupXINT1Gpio(Uint16 gpioNumber)\n    {\n        EALLOW;\n        InputXbarRegs.INPUT4SELECT = gpioNumber;      //Set XINT1 source to GPIO-pin\n        EDIS;\n    }\n    void GPIO_SetupXINT2Gpio(Uint16 gpioNumber)\n    {\n        EALLOW;\n        InputXbarRegs.INPUT5SELECT = gpioNumber;      //Set XINT2 source to GPIO-pin\n        EDIS;\n    }\n    void GPIO_SetupXINT3Gpio(Uint16 gpioNumber)\n    {\n        EALLOW;\n        InputXbarRegs.INPUT6SELECT = gpioNumber;      //Set XINT3 source to GPIO-pin\n        EDIS;\n    }\n    void GPIO_SetupXINT4Gpio(Uint16 gpioNumber)\n    {\n        EALLOW;\n        InputXbarRegs.INPUT13SELECT = gpioNumber;     //Set XINT4 source to GPIO-pin\n        EDIS;\n    }\n    void GPIO_SetupXINT5Gpio(Uint16 gpioNumber)\n    {\n        EALLOW;\n        InputXbarRegs.INPUT14SELECT = gpioNumber;     //Set XINT5 source to GPIO-pin\n        EDIS;\n    }\n\n    //\n    //GPIO_EnableUnbondedIOPullupsFor176Pin - Enable pullups for the unbonded\n    //                                        GPIOs on the 176PTP package:\n    //                                        GPIOs     Grp Bits\n    //                                        95-132    C   31\n    //                                                  D   31:0\n    //                                                  E   4:0\n    //                                        134-168   E   31:6\n    //                                                  F   8:0\n    //\n    void GPIO_EnableUnbondedIOPullupsFor176Pin()\n    {\n        EALLOW;\n        GpioCtrlRegs.GPCPUD.all = ~0x80000000;  //GPIO 95\n        GpioCtrlRegs.GPDPUD.all = ~0xFFFFFFF7;  //GPIOs 96-127\n        GpioCtrlRegs.GPEPUD.all = ~0xFFFFFFDF;  //GPIOs 128-159 except for 133\n        GpioCtrlRegs.GPFPUD.all = ~0x000001FF;  //GPIOs 160-168\n        EDIS;\n    }\n\n    //\n    // GPIO_EnableUnbondedIOPullupsFor100Pin - Enable pullups for the unbonded\n    //                                         GPIOs on the 100PZ package:\n    //                                         GPIOs     Grp Bits\n    //                                         0-1       A   1:0\n    //                                         5-9       A   9:5\n    //                                         22-40     A   31:22\n    //                                                   B   8:0\n    //                                         44-57     B   25:12\n    //                                         67-68     C   4:3\n    //                                         74-77     C   13:10\n    //                                         79-83     C   19:15\n    //                                         93-168    C   31:29\n    //                                                   D   31:0\n    //                                                   E   31:0\n    //                                                   F   8:0\n    //\n    void GPIO_EnableUnbondedIOPullupsFor100Pin()\n    {\n        EALLOW;\n        GpioCtrlRegs.GPAPUD.all = ~0xFFC003E3;  //GPIOs 0-1, 5-9, 22-31\n        GpioCtrlRegs.GPBPUD.all = ~0x03FFF1FF;  //GPIOs 32-40, 44-57\n        GpioCtrlRegs.GPCPUD.all = ~0xE10FBC18;  //GPIOs 67-68, 74-77, 79-83, 93-95\n        GpioCtrlRegs.GPDPUD.all = ~0xFFFFFFF7;  //GPIOs 96-127\n        GpioCtrlRegs.GPEPUD.all = ~0xFFFFFFFF;  //GPIOs 128-159\n        GpioCtrlRegs.GPFPUD.all = ~0x000001FF;  //GPIOs 160-168\n        EDIS;\n    }\n\n    //\n    // GPIO_EnableUnbondedIOPullups - InitSysCtrl would call this function\n    //                                this takes care of enabling IO pullups.\n    //\n    void GPIO_EnableUnbondedIOPullups()\n    {\n        //\n        //bits 8-10 have pin count\n        //\n        unsigned char pin_count = ((DevCfgRegs.PARTIDL.all & 0x00000700) >> 8) ;\n\n        //\n        //5 = 100 pin\n        //6 = 176 pin\n        //7 = 337 pin\n        //\n        if(pin_count == 5)\n        {\n            GPIO_EnableUnbondedIOPullupsFor100Pin();\n        }\n        else if (pin_count == 6)\n        {\n            GPIO_EnableUnbondedIOPullupsFor176Pin();\n        }\n        else\n        {\n            //do nothing - this is 337 pin package\n        }\n    }\n\n#endif //CPU1\n\n//\n// GPIO_ReadPin - Read the GPyDAT register bit for the specified pin. Note that\n//                this returns the actual state of the pin, not the state of\n//                the output latch.\n//\nUint16 GPIO_ReadPin(Uint16 gpioNumber)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint16 pinVal;\n\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (gpioNumber/32)*GPY_DATA_OFFSET;\n    pinVal = (gpioDataReg[GPYDAT] >> (gpioNumber % 32)) & 0x1;\n\n    return pinVal;\n}\n\n//\n// GPIO_WritePin - Set the GPyDAT register bit for the specified pin.\n//\nvoid GPIO_WritePin(Uint16 gpioNumber, Uint16 outVal)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint32 pinMask;\n\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (gpioNumber/32)*GPY_DATA_OFFSET;\n    pinMask = 1UL << (gpioNumber % 32);\n\n    if (outVal == 0)\n    {\n        gpioDataReg[GPYCLEAR] = pinMask;\n    }\n    else\n    {\n        gpioDataReg[GPYSET] = pinMask;\n    }\n}\n\n//\n// End of file\n//\n"},{"name":"F2837xD_Ipc_Driver_Lite.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   F2837xD_Ipc_Driver_Lite.c\n//\n// TITLE:  F2837xD Inter-Processor Communication (IPC) Lite API Driver\n//         Functions.\n//\n// DESCRIPTION:\n//         API functions for inter-processor communications between\n//         CPU1 control system and CPU2 control system (Lite version). The IPC\n//         Lite functions only allow for basic functions such as data writes,\n//         reads, bit setting, and bit clearing.  The Lite functions do not\n//         require the usage of the MSG RAM's or shared memories and can only\n//         be used with a single IPC interrupt channel.  Commands can only\n//         be processed one at a time without queuing.\n//         The driver functions in this file are available only as\n//         sample functions for application development.  Due to the generic\n//         nature of these functions and the cycle overhead inherent to a\n//         function call, the code is not intended to be used in cases where\n//         maximum efficiency is required in a system.\n//\n// NOTE:   This source code is used by both CPUs. That is both CPU1 and CPU2\n//         cores use this code.\n//         The active debug CPU will be referred to as Local CPU and the other\n//         CPU will be referred to as Remote CPU.\n//         When using this source code in CPU1, the term \"local\"\n//         will mean CPU1 and the term \"remote\" CPU will be mean CPU2.\n//         When using this source code in CPU2, the term \"local\"\n//         will mean CPU2 and the term \"remote\" CPU will be mean CPU1.\n//\n//         The abbreviations LtoR and RtoL  within the function names mean\n//         Local to Remote and Remote to Local respectively.\n//\n//###########################################################################\n//\n// $Release Date: $\n// $Copyright:\n// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//*****************************************************************************\n//! \\addtogroup ipc_lite_api IPC-Lite API Drivers\n//! @{\n//*****************************************************************************\n#include \"F2837xD_device.h\"\n#include \"F2837xD_Ipc_drivers.h\"\n\n//\n// Function Prototypes\n//\nvoid DelayLoop (void);\n\n//*****************************************************************************\n//\n//! Reads single word data result of Local to Remote IPC command\n//!\n//! \\param pvData is a pointer to the 16/32-bit variable where the result data\n//! will be stored.\n//! \\param usLength designates 16- or 32-bit read.\n//! \\param ulStatusFlag indicates the Local to Remote CPU Flag number mask used\n//!  to report the status of the command sent back from the Remote CPU. If\n//!  a status flag was not used with the command call, set this parameter to 0.\n//!\n//! Allows the caller to read the 16/32-bit data result of non-blocking IPC\n//! functions from the IPCREMOTEREPLY register if the status flag is cleared\n//! indicating the IPC command was successfully interpreted. If the status flag\n//! is not cleared, the command was not recognized, and the function will\n//! return STATUS_FAIL. To determine what data is read from a call to this\n//! function, see the descriptions of the non-blocking IPC functions.\n//! The \\e usLength parameter accepts the following values: \\b\n//! IPC_LENGTH_16_BITS or \\b IPC_LENGTH_32_BITS. The  \\e ulStatusFlag parameter\n//! accepts any of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b NO_FLAG.\n//! The function returns \\b STATUS_PASS or \\b STATUS_FAIL.\n//!\n//! \\return status of command (0=success, 1=error)\n//\n//*****************************************************************************\nuint16_t\nIPCLiteLtoRGetResult (void *pvData, uint16_t usLength, uint32_t ulStatusFlag)\n{\n    uint16_t returnStatus;\n\n    //\n    // If Remote System never acknowledged Status Task, indicates command\n    // failure.\n    //\n    if (IpcRegs.IPCFLG.all & ulStatusFlag)\n    {\n        returnStatus = STATUS_FAIL;\n    }\n    else\n    {\n        //\n        // Read data.\n        //\n        if (usLength == IPC_LENGTH_16_BITS)\n        {\n            *(uint16_t *)pvData = IpcRegs.IPCREMOTEREPLY;\n        }\n        else if (usLength == IPC_LENGTH_32_BITS)\n        {\n            *(uint32_t *)pvData =  IpcRegs.IPCREMOTEREPLY;\n        }\n\n        returnStatus = STATUS_PASS;\n    }\n\n    return returnStatus;\n}\n\n//*****************************************************************************\n//\n//! Reads either a 16- or 32-bit data word from the remote CPU System address\n//!\n//! \\param ulFlag specifies Local to Remote IPC Flag number mask used to\n//!        indicate a command is being sent.\n//! \\param ulAddress specifies the remote address to read from\n//! \\param usLength designates 16- or 32-bit read (1 = 16-bit, 2 = 32-bit)\n//! \\param ulStatusFlag indicates the Local to Remote Flag number mask used to\n//!  report the status of the command sent back from the remote system.\n//!\n//! This function will allow the Local CPU System to read 16/32-bit data from\n//! the Remote CPU System into the IPCREMOTEREPLY register. After calling this\n//! function, a call to \\e IPCLiteLtoRGetResult() will read the data value in\n//! the IPCREMOTEREPLY register into a 16- or 32-bit variable in the local CPU\n//! application.\n//! The \\e usLength parameter accepts the following values: \\b\n//! IPC_LENGTH_16_BITS or \\b IPC_LENGTH_32_BITS. The \\e ulStatusFlag parameter\n//! accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b\n//! NO_FLAG. The function returns \\b STATUS_PASS if the command is successful\n//! or \\b STATUS_FAIL if the request or status flags are unavailable.\n//!\n//! \\return status of command (0=success, 1=error)\n//\n//*****************************************************************************\nuint16_t\nIPCLiteLtoRDataRead(uint32_t ulFlag, uint32_t ulAddress, uint16_t usLength,\n                    uint32_t ulStatusFlag)\n{\n    uint16_t returnStatus;\n\n    //\n    // Return false if IPC Local to Remote request or status flags are not\n    // available.\n    //\n    if (IpcRegs.IPCFLG.all & (ulFlag | ulStatusFlag))\n    {\n        returnStatus = STATUS_FAIL;\n    }\n    else\n    {\n        //\n        // Set up read command, address, and word length.\n        //\n        if (usLength == IPC_LENGTH_16_BITS)\n        {\n            IpcRegs.IPCSENDCOM = IPC_DATA_READ_16;\n        }\n        else if (usLength == IPC_LENGTH_32_BITS)\n        {\n            IpcRegs.IPCSENDCOM = IPC_DATA_READ_32;\n        }\n        IpcRegs.IPCSENDADDR = ulAddress;\n\n        //\n        // Force IPC event on selected request task and enable status-checking.\n        //\n        IpcRegs.IPCSET.all = (ulFlag | ulStatusFlag);\n\n        returnStatus = STATUS_PASS;\n    }\n\n    return returnStatus;\n}\n\n//*****************************************************************************\n//\n//! Sets the designated bits in a 16/32-bit data word at the remote CPU system\n//! address\n//!\n//! \\param ulFlag specifies Local to Remote IPC Flag number mask used to\n//!        indicate a command is being sent.\n//! \\param ulAddress specifies the Remote address to write to.\n//! \\param ulMask specifies the 16/32-bit mask for bits which should be set at\n//!  remote ulAddress. For 16-bit mask, only the lower 16-bits of ulMask are\n//!  considered.\n//! \\param usLength specifies the length of the \\e ulMask (1 = 16-bit, 2 =\n//! 32-bit).\n//! \\param ulStatusFlag indicates the Local to Remote Flag number mask used to\n//!        report the status of the command sent back from the Remote system.\n//!\n//! This function will allow the Local CPU system to set bits specified by the\n//! \\e usMask variable in a 16/32-bit word on the Remote CPU system. The data\n//! word at /e ulAddress after the set bits command is then read into the\n//! IPCREMOTEREPLY register. After calling this function, a call to \\e\n//! IPCLiteLtoRGetResult() will read the data value in the IPCREMOTEREPLY\n//! register into a 16/32-bit variable in the Local CPU application.\n//! The \\e usLength parameter accepts the following values: \\b\n//! IPC_LENGTH_16_BITS or \\b IPC_LENGTH_32_BITS. The \\e ulStatusFlag parameter\n//! accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b\n//! NO_FLAG. The function returns \\b STATUS_PASS if the command is successful\n//! or \\b STATUS_FAIL if the request or status flags are unavailable.\n//!\n//! \\return status of command (0=success, 1=error)\n//\n//*****************************************************************************\nuint16_t\nIPCLiteLtoRSetBits(uint32_t ulFlag, uint32_t ulAddress, uint32_t ulMask,\n                   uint16_t usLength, uint32_t ulStatusFlag)\n{\n    uint16_t returnStatus;\n\n    //\n    // Return false if IPC Local to Remote request or status flags are not\n    // available.\n    //\n    if (IpcRegs.IPCFLG.all & (ulFlag | ulStatusFlag))\n    {\n        returnStatus = STATUS_FAIL;\n    }\n    else\n    {\n        if (usLength == IPC_LENGTH_16_BITS)\n        {\n            //\n            // Set up 16-bit set bits command, address, and mask.\n            //\n            IpcRegs.IPCSENDCOM = IPC_SET_BITS_16;\n            IpcRegs.IPCSENDADDR = ulAddress;\n            IpcRegs.IPCSENDDATA = ulMask & (0x0000FFFF);\n        }\n        else if (usLength == IPC_LENGTH_32_BITS)\n        {\n            //\n            // Set up 32-bit set bits command, address, and mask.\n            //\n            IpcRegs.IPCSENDCOM = IPC_SET_BITS_32;\n            IpcRegs.IPCSENDADDR = ulAddress;\n            IpcRegs.IPCSENDDATA = ulMask;\n        }\n\n        //\n        // Force IPC event on selected request task and enable status-checking.\n        //\n        IpcRegs.IPCSET.all = (ulFlag | ulStatusFlag);\n\n        returnStatus = STATUS_PASS;\n    }\n\n    return returnStatus;\n}\n\n//*****************************************************************************\n//\n//! Sets the designated bits in a 16/32-bit write-protected data word at\n//! the Remote CPU system address\n//!\n//! \\param ulFlag specifies Local to Remote IPC Flag number mask used to\n//!        indicate a command is being sent.\n//! \\param ulAddress specifies the Remote CPU write-protected address to write\n//!        to.\n//! \\param ulMask specifies the 16/32-bit mask for bits which should be set at\n//!  Remote CPU ulAddress.For 16-bit mask, only the lower 16-bits of ulMask are\n//!  considered.\n//! \\param usLength specifies the length of the \\e ulMask (1 = 16-bit, 2 =\n//! 32-bit).\n//! \\param ulStatusFlag indicates the Local to Remote Flag number mask used to\n//!        report the status of the command sent back from the Master system.\n//!\n//! This function will allow the Local CPU system to set bits specified by the\n//! \\e usMask variable in a write-protected 16/32-bit word on the REmote CPU\n//! system.\n//! The data word at /e ulAddress after the set bits command is then read into\n//! the IPCREMOTEREPLY register. After calling this function, a call to\n//! \\e IPCLiteLtoRGetResult() will read the data value in the IPCREMOTEREPLY\n//! register into a 16/32-bit variable in the Local application.\n//! The \\e usLength parameter accepts the following values: \\b\n//! IPC_LENGTH_16_BITS or \\b IPC_LENGTH_32_BITS. The \\e ulStatusFlag parameter\n//! accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b\n//! NO_FLAG. The function returns \\b STATUS_PASS if the command is successful\n//! or \\b STATUS_FAIL if the request or status flags are unavailable.\n//!\n//! \\return status of command (0=success, 1=error)\n//\n//*****************************************************************************\nuint16_t\nIPCLiteLtoRSetBits_Protected (uint32_t ulFlag, uint32_t ulAddress,\n                              uint32_t ulMask, uint16_t usLength,\n                              uint32_t ulStatusFlag)\n{\n    uint16_t returnStatus;\n\n    //\n    // Return false if IPC Local to Remote request or status flags are not\n    // available.\n    //\n    if (IpcRegs.IPCFLG.all & (ulFlag | ulStatusFlag))\n    {\n        returnStatus = STATUS_FAIL;\n    }\n    else\n    {\n        if (usLength == IPC_LENGTH_16_BITS)\n        {\n            //\n            // Set up 16-bit set bits command, address, and mask.\n            //\n            IpcRegs.IPCSENDCOM = IPC_SET_BITS_16_PROTECTED;\n            IpcRegs.IPCSENDADDR = ulAddress;\n            IpcRegs.IPCSENDDATA = ulMask & (0x0000FFFF);\n        }\n        else if (usLength == IPC_LENGTH_32_BITS)\n        {\n            //\n            // Set up 32-bit set bits command, address, and mask.\n            //\n            IpcRegs.IPCSENDCOM = IPC_SET_BITS_32_PROTECTED;\n            IpcRegs.IPCSENDADDR = ulAddress;\n            IpcRegs.IPCSENDDATA = ulMask;\n        }\n\n        //\n        // Force IPC event on selected request task and enable status-checking.\n        //\n        IpcRegs.IPCSET.all = (ulFlag | ulStatusFlag);\n\n        returnStatus = STATUS_PASS;\n    }\n\n    return returnStatus;\n}\n\n//*****************************************************************************\n//\n//! Sets the designated bits in a 16/32-bit data word at the remote CPU system\n//! address\n//!\n//! \\param ulFlag specifies Local to Remote IPC Flag number mask used to\n//!        indicate a command is being sent.\n//! \\param ulAddress specifies the Remote CPU address to write to.\n//! \\param ulMask specifies the 16/32-bit mask for bits which should be set at\n//! the remote CPU ulAddress. (For 16-bit mask, only the lower 16-bits of\n//! ulMask are considered.\n//! \\param usLength specifies the length of the \\e ulMask (1 = 16-bit, 2 =\n//! 32-bit).\n//! \\param ulStatusFlag indicates the Local to Remote Flag number mask used to\n//! report the status of the command sent back from the Master system.\n//!\n//! This function will allow the Local CPU system to set bits specified by the\n//! \\e usMask variable in a 16/32-bit word on the Remote CPU system. The data\n//! word at /e ulAddress after the set bits command is then read into the\n//! IPCREMOTEREPLY register. After calling this function, a call to \\e\n//! IPCLiteLtoRGetResult() will read the data value in the IPCREMOTEREPLY\n//! register into a 16/32-bit variable in the Local CPU application.\n//! The \\e usLength parameter accepts the following values: \\b\n//! IPC_LENGTH_16_BITS or \\b IPC_LENGTH_32_BITS. The \\e ulStatusFlag parameter\n//! accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b\n//! NO_FLAG. The function returns \\b STATUS_PASS if the command is successful\n//! or \\b STATUS_FAIL if the request or status flags are unavailable.\n//!\n//! \\return status of command (0=success, 1=error)\n//\n//*****************************************************************************\nuint16_t\nIPCLiteLtoRClearBits(uint32_t ulFlag, uint32_t ulAddress, uint32_t ulMask,\n                     uint16_t usLength, uint32_t ulStatusFlag)\n{\n    uint16_t returnStatus;\n\n    //\n    // Return false if IPC Local to Remote request or status flags are not\n    // available.\n    //\n    if (IpcRegs.IPCFLG.all & (ulFlag | ulStatusFlag))\n    {\n        returnStatus = STATUS_FAIL;\n    }\n    else\n    {\n        if (usLength == IPC_LENGTH_16_BITS)\n        {\n            //\n            // Set up 16-bit set bits command, address, and mask.\n            //\n            IpcRegs.IPCSENDCOM = IPC_CLEAR_BITS_16;\n            IpcRegs.IPCSENDADDR = ulAddress;\n            IpcRegs.IPCSENDDATA = ulMask & (0x0000FFFF);\n        }\n        else if (usLength == IPC_LENGTH_32_BITS)\n        {\n            //\n            // Set up 32-bit set bits command, address, and mask.\n            //\n            IpcRegs.IPCSENDCOM = IPC_CLEAR_BITS_32;\n            IpcRegs.IPCSENDADDR = ulAddress;\n            IpcRegs.IPCSENDDATA = ulMask;\n        }\n\n        //\n        // Force IPC event on selected request task and enable status-checking.\n        //\n        IpcRegs.IPCSET.all = (ulFlag | ulStatusFlag);\n\n        returnStatus = STATUS_PASS;\n    }\n\n    return returnStatus;\n}\n\n//*****************************************************************************\n//\n//! Clears the designated bits in a 16/32-bit write-protected data word at\n//! Remote CPU system address\n//!\n//! \\param ulFlag specifies Local to Remote IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulAddress specifies the Remote CPU write-protected address to write\n//! to.\n//! \\param ulMask specifies the 16/32-bit mask for bits which should be cleared\n//! at Remote CPU ulAddress.For 16-bit mask, only the lower 16-bits of ulMask\n//! are considered.\n//! \\param usLength specifies the length of the \\e ulMask (1 = 16-bit, 2 =\n//! 32-bit).\n//! \\param ulStatusFlag indicates the Local to Remote Flag number mask used to\n//! report the status of the command sent back from the Master system.\n//!\n//! This function will allow the Local CPU system to clear bits specified by\n//! the \\e usMask variable in a write-protected 16/32-bit word on the Remote\n//! CPU system.\n//! The data word at /e ulAddress after the clear bits command is then read\n//! into the IPCREMOTEREPLY register. After calling this function, a call to\n//! \\e IPCLiteLtoRGetResult() will read the data value in the IPCREMOTEREPLY\n//! register into a 16/32-bit variable in the Local CPU application.\n//! The \\e usLength parameter accepts the following values: \\b\n//! IPC_LENGTH_16_BITS or \\b IPC_LENGTH_32_BITS. The \\e ulStatusFlag parameter\n//! accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b\n//! NO_FLAG. The function returns \\b STATUS_PASS if the command is successful\n//! or \\b STATUS_FAIL if the request or status flags are unavailable.\n//!\n//! \\return status of command (0=success, 1=error)\n//\n//*****************************************************************************\nuint16_t\nIPCLiteLtoRClearBits_Protected (uint32_t ulFlag, uint32_t ulAddress,\n                                uint32_t ulMask, uint16_t usLength,\n                                uint32_t ulStatusFlag)\n{\n    uint16_t returnStatus;\n\n    //\n    // Return false if IPC Local to Remote request or status flags are not\n    // available.\n    //\n    if (IpcRegs.IPCFLG.all & (ulFlag | ulStatusFlag))\n    {\n        returnStatus = STATUS_FAIL;\n    }\n    else\n    {\n        if (usLength == IPC_LENGTH_16_BITS)\n        {\n            //\n            // Set up 16-bit set bits command, address, and mask.\n            //\n            IpcRegs.IPCSENDCOM = IPC_CLEAR_BITS_16_PROTECTED;\n            IpcRegs.IPCSENDADDR = ulAddress;\n            IpcRegs.IPCSENDDATA = ulMask & (0x0000FFFF);\n        }\n        else if (usLength == IPC_LENGTH_32_BITS)\n        {\n            //\n            // Set up 32-bit set bits command, address, and mask.\n            //\n            IpcRegs.IPCSENDCOM = IPC_CLEAR_BITS_32_PROTECTED;\n            IpcRegs.IPCSENDADDR = ulAddress;\n            IpcRegs.IPCSENDDATA = ulMask;\n        }\n\n        //\n        // Force IPC event on selected request task and enable status-checking.\n        //\n        IpcRegs.IPCSET.all = (ulFlag | ulStatusFlag);\n\n        returnStatus = STATUS_PASS;\n    }\n\n    return returnStatus;\n}\n\n//*****************************************************************************\n//\n//! Writes a 16/32-bit data word to Remote CPU System address\n//!\n//! \\param ulFlag specifies Local to Remote IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulAddress specifies the Remote CPU address to write to\n//! \\param ulData specifies the 16/32-bit word which will be written.\n//! For 16-bit words, only the lower 16-bits of ulData will be considered by\n//! the master system.\n//! \\param usLength is the length of the word to write (0 = 16-bits, 1 =\n//! 32-bits)\n//! \\param ulStatusFlag indicates the Local to Remote Flag number mask used to\n//! report the status of the command sent back from the Remote CPU  system.\n//!\n//! This function will allow the Local CPU System to write a 16/32-bit word\n//! via the \\e ulData variable to an address on the Remote CPU System.\n//! The \\e usLength parameter accepts the following values: \\b\n//! IPC_LENGTH_16_BITS or \\b IPC_LENGTH_32_BITS. The \\e ulStatusFlag parameter\n//! accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b\n//! NO_FLAG. The function returns \\b STATUS_PASS if the command is successful\n//! or \\b STATUS_FAIL if the request or status flags are unavailable.\n//!\n//! \\return status of command (0=success, 1=error)\n//\n//*****************************************************************************\nuint16_t\nIPCLiteLtoRDataWrite(uint32_t ulFlag, uint32_t ulAddress, uint32_t ulData,\n                     uint16_t usLength, uint32_t ulStatusFlag)\n{\n    uint16_t returnStatus;\n\n    //\n    // Return false if IPC Local to Remote request or status flags are not\n    // available.\n    //\n    if (IpcRegs.IPCFLG.all & (ulFlag | ulStatusFlag))\n    {\n        returnStatus = STATUS_FAIL;\n    }\n    else\n    {\n        //\n        // Set up data write command, address, and data. For 16-bit write,\n        // Master system will look at lower 16-bits only.\n        //\n        if (usLength == IPC_LENGTH_16_BITS)\n        {\n            IpcRegs.IPCSENDCOM = IPC_DATA_WRITE_16;\n        }\n        else if (usLength == IPC_LENGTH_32_BITS)\n        {\n            IpcRegs.IPCSENDCOM = IPC_DATA_WRITE_32;\n        }\n        IpcRegs.IPCSENDADDR = ulAddress;\n        IpcRegs.IPCSENDDATA = ulData;\n\n        //\n        // Force IPC event on selected request task and enable status-checking\n        //\n        IpcRegs.IPCSET.all = (ulFlag | ulStatusFlag);\n\n        returnStatus = STATUS_PASS;\n    }\n\n    return returnStatus;\n}\n\n//*****************************************************************************\n//\n//! Writes a 16/32-bit data word to a protected Remote CPU System address\n//!\n//! \\param ulFlag specifies Local to Remote IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulAddress specifies the Remote CPU address to write to\n//! \\param ulData specifies the 16/32-bit word which will be written.\n//! For 16-bit words, only the lower 16-bits of ulData will be considered by\n//! the master system.\n//! \\param usLength is the length of the word to write (0 = 16-bits, 1 =\n//! 32-bits)\n//! \\param ulStatusFlag indicates the Local to Remote Flag number mask used to\n//! report the status of the command sent back from the Master  system.\n//!\n//! This function will allow the Local CPU System to write a 16/32-bit word\n//! via the \\e ulData variable to a write-protected address on the Remote CPU\n//! System. The \\e usLength parameter accepts the following values: \\b\n//! IPC_LENGTH_16_BITS or \\b IPC_LENGTH_32_BITS. The \\e ulStatusFlag parameter\n//! accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b\n//! NO_FLAG. The function returns \\b STATUS_PASS if the command is successful\n//! or \\b STATUS_FAIL if the request or status flags are unavailable.\n//!\n//! \\return status of command (0=success, 1=error)\n//\n//*****************************************************************************\nuint16_t\nIPCLiteLtoRDataWrite_Protected(uint32_t ulFlag, uint32_t ulAddress,\n                               uint32_t ulData, uint16_t usLength,\n                               uint32_t ulStatusFlag)\n{\n    uint16_t returnStatus;\n\n    //\n    // Return false if IPC Local to Remote request or status flags are not\n    // available.\n    //\n    if (IpcRegs.IPCFLG.all & (ulFlag | ulStatusFlag))\n    {\n        returnStatus = STATUS_FAIL;\n    }\n    else\n    {\n        //\n        // Set up data write command, address, and data. For 16-bit write, Master\n        // system will look at lower 16-bits only.\n        //\n        if (usLength == IPC_LENGTH_16_BITS)\n        {\n            IpcRegs.IPCSENDCOM = IPC_DATA_WRITE_16_PROTECTED;\n        }\n        else if (usLength == IPC_LENGTH_32_BITS)\n        {\n            IpcRegs.IPCSENDCOM = IPC_DATA_WRITE_32_PROTECTED;\n        }\n        IpcRegs.IPCSENDADDR = ulAddress;\n        IpcRegs.IPCSENDDATA = ulData;\n\n        //\n        // Force IPC event on selected request task and enable status-checking\n        //\n        IpcRegs.IPCSET.all = (ulFlag | ulStatusFlag);\n\n        returnStatus = STATUS_PASS;\n    }\n\n    return returnStatus;\n}\n\n//*****************************************************************************\n//\n//! Calls a Remote CPU function with 1 optional parameter and an optional\n//! return value.\n//!\n//! \\param ulFlag specifies Local to Remote IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulAddress specifies the Remote CPU function address\n//! \\param ulParam specifies the 32-bit optional parameter value\n//! \\param ulStatusFlag indicates the Local to Remote Flag number mask used to\n//! report the status of the command sent back from the control  system.\n//!\n//! This function will allow the Local CPU system to call a function on the\n//! Remote CPU. The \\e ulParam variable is a single optional 32-bit parameter\n//! to pass to the function. The \\e ulFlag parameter accepts any one of the\n//! flag values \\b IPC_FLAG1 - \\b IPC_FLAG32. The \\e ulStatusFlag parameter\n//! accepts any other one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32\n//! and \\b NO_FLAG. The function returns \\b STATUS_PASS if the command is\n//! successful or \\b STATUS_FAIL if the request or status flags are unavailable.\n//!\n//! \\return status of command (0=success, 1=error)\n//\n//*****************************************************************************\nuint16_t\nIPCLiteLtoRFunctionCall(uint32_t ulFlag, uint32_t ulAddress, uint32_t ulParam,\n                        uint32_t ulStatusFlag)\n{\n    uint16_t returnStatus;\n\n    //\n    // Return false if IPC Remote to Local request or status flags are not\n    // available.\n    //\n    if (IpcRegs.IPCFLG.all & (ulFlag | ulStatusFlag))\n    {\n        returnStatus = STATUS_FAIL;\n    }\n    else\n    {\n        //\n        // Set up function call command, address, and parameter.\n        //\n        IpcRegs.IPCSENDCOM = IPC_FUNC_CALL;\n        IpcRegs.IPCSENDADDR = ulAddress;\n        IpcRegs.IPCSENDDATA = ulParam;\n\n        //\n        // Force IPC event on selected request task and enable status-checking\n        //\n        IpcRegs.IPCSET.all = (ulFlag | ulStatusFlag);\n\n        returnStatus = STATUS_PASS;\n    }\n\n    return returnStatus;\n}\n\n//*****************************************************************************\n//\n//! Slave Requests Master R/W/Exe Access to Shared SARAM.\n//!\n//! \\param ulFlag specifies Local to Remote IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulMask specifies the 32-bit mask for the GSxMEMSEL RAM control\n//! register to indicate which GSx SARAM blocks the Slave is requesting master\n//! access to.\n//! \\param ulMaster specifies whether CPU1 or CPU2 should be the master of the\n//! GSx RAM.\n//! \\param ulStatusFlag indicates the Local to Remote Flag number mask used to\n//! report the status of the command sent back from the Master  system.\n//!\n//! This function will allow the slave CPU System to request slave or master\n//! mastership of any of the GSx Shared SARAM blocks.\n//! The \\e ulMaster parameter accepts the following values:\n//! \\b IPC_GSX_CPU2_MASTER or \\b IPC_GSX_CPU1_MASTER. The \\e ulStatusFlag\n//! parameter accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32\n//! and \\b NO_FLAG. The function returns \\b STATUS_PASS if the command is\n//! successful or \\b STATUS_FAIL if the request or status flags are unavailable.\n//! \\note This function calls the \\e IPCLiteLtoRSetBits_Protected() or the\n//! \\e IPCLiteLtoRClearBits_Protected function, and therefore in order to\n//! process this function, the above 2 functions should be ready to be called\n//! on the master system to process this command.\n//!\n//! \\return status of command (0=success, 1=error)\n//\n//*****************************************************************************\nuint16_t\nIPCLiteReqMemAccess (uint32_t ulFlag, uint32_t ulMask, uint16_t ulMaster,\n                     uint32_t ulStatusFlag)\n{\n    uint16_t status;\n    uint32_t GSxMSEL_REGaddress = (uint32_t)(&MemCfgRegs.GSxMSEL.all);\n    if (ulMaster == IPC_GSX_CPU2_MASTER)\n    {\n        status =\n            IPCLiteLtoRSetBits_Protected (ulFlag, GSxMSEL_REGaddress, ulMask,\n                                          IPC_LENGTH_32_BITS,\n                                          ulStatusFlag);\n    }\n    else if (ulMaster == IPC_GSX_CPU1_MASTER)\n    {\n        status =\n            IPCLiteLtoRClearBits_Protected (ulFlag, GSxMSEL_REGaddress, ulMask,\n                                            IPC_LENGTH_32_BITS,\n                                            ulStatusFlag);\n    }\n\n    return status;\n}\n\n//*****************************************************************************\n//\n//! Reads either a 16- or 32-bit data word from the Local CPU system address\n//!\n//! \\param ulFlag specifies Remote to Local IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulStatusFlag indicates the Remote to Local Flag number mask used to\n//! report the status of the command sent back from the control  system.\n//!\n//! This function will allow the Remote CPU system to read 16/32-bit data from\n//! the Local CPU system. The \\e ulFlag parameter accepts any one of the\n//! flag values \\b IPC_FLAG1 - \\b IPC_FLAG32, and the \\e ulStatusFlag parameter\n//! accepts any other one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32 and\n//! \\b NO_FLAG.\n//\n//*****************************************************************************\nvoid\nIPCLiteRtoLDataRead(uint32_t ulFlag, uint32_t ulStatusFlag)\n{\n\n    uint32_t* pulRAddress;\n    uint16_t* pusRAddress;\n\n    //\n    // Wait until IPC Remote to Local request task is flagged\n    //\n    while (!(IpcRegs.IPCSTS.all & ulFlag))\n    {\n    }\n\n    //\n    // If the command and data length are correct for this function:\n    // Then read from requested address and write 16/32-bit data\n    // to IPCLOCALREPLY. Acknowledge the status flag\n    // and the task flag.\n    //\n    if (IpcRegs.IPCRECVCOM == IPC_DATA_READ_16)\n    {\n        //\n        // Perform 16-bit read.\n        //\n        pusRAddress = (uint16_t *)IpcRegs.IPCRECVADDR;\n        IpcRegs.IPCLOCALREPLY = (uint32_t)(*pusRAddress);\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n    else if (IpcRegs.IPCRECVCOM == IPC_DATA_READ_32)\n    {\n        pulRAddress = (uint32_t *)IpcRegs.IPCRECVADDR;\n        IpcRegs.IPCLOCALREPLY = *pulRAddress;\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n\n    //\n    // Otherwise, only acknowledge the task flag.\n    //(Indicates to Remote CPU there was an error)\n    //\n    else\n    {\n        IpcRegs.IPCACK.all = (ulFlag);\n    }\n}\n\n//*****************************************************************************\n//\n//! Sets the designated bits in a 16/32-bit data word at the Local CPU system\n//! address\n//!\n//! \\param ulFlag specifies Remote to Local IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulStatusFlag indicates the Remote to Local Flag number mask used to\n//! report the status of the command sent back from the control system.\n//!\n//! This function will allow the Remote CPU system to set bits specified by a\n//! mask variable in a 16/32-bit word on the Local CPU system, and then read\n//! back the word into the IPCLOCALREPLY register. The \\e ulFlag parameter\n//! accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32, and the\n//! \\e ulStatusFlag parameter accepts any other one of the flag values \\b\n//! IPC_FLAG1 - \\b IPC_FLAG32 and \\b NO_FLAG.\n//\n//*****************************************************************************\nvoid\nIPCLiteRtoLSetBits(uint32_t ulFlag, uint32_t ulStatusFlag)\n{\n\n    uint16_t* pusAddress;\n    uint32_t* pulAddress;\n\n    //\n    // Wait until IPC Remote to Local request task is flagged\n    //\n    while (!(IpcRegs.IPCSTS.all & ulFlag))\n    {\n    }\n\n    //\n    // If the command is correct for this function:\n    // Then set the mask bits at the requested address\n    // and write back the 16/32-bit data to IPCLOCALREPLY.\n    // Acknowledge the status flag and the task flag.\n    //\n    if (IpcRegs.IPCRECVCOM == IPC_SET_BITS_16)\n    {\n        pusAddress = (uint16_t *)IpcRegs.IPCRECVADDR;;\n        *pusAddress |= (uint16_t)IpcRegs.IPCRECVDATA;\n        IpcRegs.IPCLOCALREPLY = (uint32_t)*pusAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n    else if (IpcRegs.IPCRECVCOM == IPC_SET_BITS_32)\n    {\n        pulAddress = (uint32_t *)IpcRegs.IPCRECVADDR;;\n        *pulAddress |= (uint32_t)IpcRegs.IPCRECVDATA;\n        IpcRegs.IPCLOCALREPLY = *pulAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n\n    //\n    // Otherwise, only acknowledge the task flag.\n    // (Indicates to Remote CPU there was an error)\n    //\n    else\n    {\n        IpcRegs.IPCACK.all = (ulFlag);\n    }\n}\n\n//*****************************************************************************\n//\n//! Sets the designated bits in a 16-bit data word at the Local CPU system\n//! write-protected address\n//!\n//! \\param ulFlag specifies Remote to Local IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulStatusFlag indicates the Remote to Local Flag number mask used to\n//! report the status of the command sent back from the control system.\n//!\n//! This function will allow the Remote CPU system to set bits specified by a\n//! mask variable in a write-protected 16/32-bit word on the Local CPU system,\n//! and then read back the word into the IPCLOCALREPLY register. The \\e ulFlag\n//! parameter accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32,\n//! and the \\e ulStatusFlag parameter accepts any other one of the flag values\n//! \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b NO_FLAG.\n//\n//*****************************************************************************\nvoid\nIPCLiteRtoLSetBits_Protected (uint32_t ulFlag, uint32_t ulStatusFlag)\n{\n\n    uint16_t* pusAddress;\n    uint32_t* pulAddress;\n\n    //\n    // Wait until IPC Remote to Local request task is flagged\n    //\n    while (!(IpcRegs.IPCSTS.all & ulFlag))\n    {\n    }\n\n    //\n    // If the command is correct for this function:\n    // Then enable write access with EALLOW and\n    // set the mask bits at the requested address.\n    // Write back the 16-bit data to IPCLOCALREPLY.\n    // Restore write-protection with EDIS.\n    // Acknowledge the status flag and the task flag.\n    //\n\n    EALLOW;\n\n    if (IpcRegs.IPCRECVCOM == IPC_SET_BITS_16_PROTECTED)\n    {\n        pusAddress = (uint16_t *)IpcRegs.IPCRECVADDR;\n        *pusAddress |= (uint16_t)IpcRegs.IPCRECVDATA;\n        IpcRegs.IPCLOCALREPLY = (uint32_t)*pusAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n    else if (IpcRegs.IPCRECVCOM == IPC_SET_BITS_32_PROTECTED)\n    {\n        pulAddress = (uint32_t *)IpcRegs.IPCRECVADDR;\n        *pulAddress |= (uint32_t)IpcRegs.IPCRECVDATA;\n        IpcRegs.IPCLOCALREPLY = *pulAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n\n    //\n    // Otherwise, only acknowledge the task flag.\n    //(Indicates to the Remote CPU there was an error)\n    //\n    else\n    {\n        IpcRegs.IPCACK.all = (ulFlag);\n    }\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n//! Clears the designated bits in a 16/32-bit data word at Local CPU system\n//! address\n//!\n//! \\param ulFlag specifies Remote to Local IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulStatusFlag indicates the Remote to Local Flag number mask used to\n//! report the status of the command sent back from the control system.\n//!\n//! This function will allow the Remote CPU system to clear bits specified by a\n//! mask variable in a 16/32-bit word on the Local CPU system, and then read\n//! back the word into the IPCLOCALREPLY register. The \\e ulFlag\n//! parameter accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32,\n//! and the \\e ulStatusFlag parameter accepts any other one of the flag values\n//! \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b NO_FLAG.\n//\n//*****************************************************************************\nvoid\nIPCLiteRtoLClearBits(uint32_t ulFlag, uint32_t ulStatusFlag)\n{\n    uint16_t* pusAddress;\n    uint32_t* pulAddress;\n\n    //\n    // Wait until IPC Remote to Local request task is flagged\n    //\n    while (!(IpcRegs.IPCSTS.all & ulFlag))\n    {\n    }\n\n    //\n    // If the command is correct for this function:\n    // Then clear the mask bits at the requested address\n    // and write back the 16/32-bit data to IPCLOCALREPLY.\n    // Acknowledge the status flag and the task flag.\n    //\n    if (IpcRegs.IPCRECVCOM == IPC_CLEAR_BITS_16)\n    {\n        pusAddress = (uint16_t *)IpcRegs.IPCRECVADDR;;\n        *pusAddress &= ~((uint16_t)IpcRegs.IPCRECVDATA);\n        IpcRegs.IPCLOCALREPLY = (uint32_t)*pusAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n    else if (IpcRegs.IPCRECVCOM == IPC_CLEAR_BITS_32)\n    {\n        pulAddress = (uint32_t *)IpcRegs.IPCRECVADDR;\n        *pulAddress &= ~((uint32_t)IpcRegs.IPCRECVDATA);\n        IpcRegs.IPCLOCALREPLY = *pulAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n\n    //\n    // Otherwise, only acknowledge the task flag.\n    // (Indicates to Remote CPU there was an error)\n    //\n    else\n    {\n        IpcRegs.IPCACK.all = (ulFlag);\n    }\n}\n\n//*****************************************************************************\n//\n//! Clears the designated bits in a 16/32-bit data word at the Local CPU system\n//! write-protected address\n//!\n//! \\param ulFlag specifies Remote to Local IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulStatusFlag indicates the Remote to Local Flag number mask used to\n//! report the status of the command sent back from the control system.\n//!\n//! This function will allow the Remote CPU system to clear bits specified by a\n//! mask variable in a 16/32-bit word on the Local CPU system, and then read\n//! back the word into the IPCLOCALREPLY register. The \\e ulFlag\n//! parameter accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32,\n//! and the \\e ulStatusFlag parameter accepts any other one of the flag values\n//! \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b NO_FLAG.\n//\n//*****************************************************************************\nvoid\nIPCLiteRtoLClearBits_Protected (uint32_t ulFlag, uint32_t ulStatusFlag)\n{\n    uint16_t* pusAddress;\n    uint32_t* pulAddress;\n\n    //\n    // Wait until IPC Remote to Local request task is flagged\n    //\n    while (!(IpcRegs.IPCSTS.all & ulFlag))\n    {\n    }\n\n    //\n    // If the command is correct for this function:\n    // Then enable write access with EALLOW and\n    // clear the mask bits at the requested address.\n    // Write back the 16/32-bit data to IPCLOCALREPLY.\n    // Restore the status of the EALLOW register.\n    // Acknowledge the status flag and the task flag.\n    //\n    EALLOW;\n\n    if (IpcRegs.IPCRECVCOM == IPC_CLEAR_BITS_16_PROTECTED)\n    {\n\n        pusAddress = (uint16_t *)IpcRegs.IPCRECVADDR;;\n        *pusAddress &= ~((uint16_t)IpcRegs.IPCRECVDATA);\n        IpcRegs.IPCLOCALREPLY = (uint32_t)*pusAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n    else if (IpcRegs.IPCRECVCOM == IPC_CLEAR_BITS_32_PROTECTED)\n    {\n\n        pulAddress = (uint32_t *)IpcRegs.IPCRECVADDR;;\n        *pulAddress &= ~((uint32_t)IpcRegs.IPCRECVDATA);\n        IpcRegs.IPCLOCALREPLY = (uint32_t)*pulAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n\n    //\n    // Otherwise, only acknowledge the task flag.\n    // (Indicates to Remote CPU there was an error)\n    //\n    else\n    {\n        IpcRegs.IPCACK.all = (ulFlag);\n    }\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n//! Writes a 16/32-bit data word to Local CPU system address\n//!\n//! \\param ulFlag specifies Remote to Local IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulStatusFlag indicates the Remote to Local Flag number mask used to\n//! report the status of the command sent back from the control system.\n//!\n//! This function will allow the Remote CPU system to write a 16/32-bit word\n//! to an address on the Local CPU system. The \\e ulFlag\n//! parameter accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32,\n//! and the \\e ulStatusFlag parameter accepts any other one of the flag values\n//! \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b NO_FLAG.\n//\n//*****************************************************************************\nvoid\nIPCLiteRtoLDataWrite(uint32_t ulFlag, uint32_t ulStatusFlag)\n{\n    uint32_t* pulAddress;\n    uint16_t* pusAddress;\n\n    //\n    // Wait until IPC Remote to Local request task is flagged\n    //\n    while (!(IpcRegs.IPCSTS.all & ulFlag))\n    {\n    }\n\n    //\n    // If the command is correct for this function:\n    // Then write the 16/32-bit data to the requested address\n    // and write back the 16/32-bit data to IPCLOCALREPLY.\n    // Acknowledge the status flag and the task flag.\n    //\n    if (IpcRegs.IPCRECVCOM == IPC_DATA_WRITE_16)\n    {\n        pusAddress = (uint16_t *)IpcRegs.IPCRECVADDR;;\n        *pusAddress = (uint16_t)IpcRegs.IPCRECVDATA;\n        IpcRegs.IPCLOCALREPLY = (uint32_t)*pusAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n    else if (IpcRegs.IPCRECVCOM == IPC_DATA_WRITE_32)\n    {\n        pulAddress = (uint32_t *)IpcRegs.IPCRECVADDR;;\n        *pulAddress = IpcRegs.IPCRECVDATA;\n        IpcRegs.IPCLOCALREPLY = *pulAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n\n    }\n\n    //\n    // Otherwise, only acknowledge the task flag.\n    // (Indicates to Remote CPU there was an error)\n    //\n    else\n    {\n        IpcRegs.IPCACK.all = (ulFlag);\n    }\n}\n\n//*****************************************************************************\n//\n//! Writes a 16/32-bit data word to a write-protected Local CPU system address\n//!\n//! \\param ulFlag specifies Remote to Local IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulStatusFlag indicates the Remote to Local Flag number mask used to\n//! report the status of the command sent back from the control system.\n//!\n//! This function will allow the Remote CPU system to write a 16/32-bit word\n//! to an address on the Local CPU system. The \\e ulFlag\n//! parameter accepts any one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32,\n//! and the \\e ulStatusFlag parameter accepts any other one of the flag values\n//! \\b IPC_FLAG1 - \\b IPC_FLAG32 and \\b NO_FLAG.\n//\n//*****************************************************************************\nvoid\nIPCLiteRtoLDataWrite_Protected(uint32_t ulFlag, uint32_t ulStatusFlag)\n{\n    uint32_t* pulAddress;\n    uint16_t* pusAddress;\n\n    //\n    // Wait until IPC Remote to Local request task is flagged\n    //\n    while (!(IpcRegs.IPCSTS.all & ulFlag))\n    {\n    }\n\n    //\n    // If the command is correct for this function:\n    // Then enable write access with EALLOW and\n    // write the 16/32-bit data to the requested address\n    // and write back the 16/32-bit data to IPCLOCALREPLY.\n    // Acknowledge the status flag and the task flag.\n    //\n    EALLOW;\n\n    if (IpcRegs.IPCRECVCOM == IPC_DATA_WRITE_16_PROTECTED)\n    {\n        pusAddress = (uint16_t *)IpcRegs.IPCRECVADDR;;\n        *pusAddress = (uint16_t)IpcRegs.IPCRECVDATA;\n        IpcRegs.IPCLOCALREPLY = (uint32_t)*pusAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n    else if (IpcRegs.IPCRECVCOM == IPC_DATA_WRITE_32_PROTECTED)\n    {\n        pulAddress = (uint32_t *)IpcRegs.IPCRECVADDR;\n        *pulAddress = IpcRegs.IPCRECVDATA;\n        IpcRegs.IPCLOCALREPLY = *pulAddress;\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n\n    }\n\n    //\n    // Otherwise, only acknowledge the task flag.\n    // (Indicates to Remote CPU there was an error)\n    //\n    else\n    {\n        IpcRegs.IPCACK.all = (ulFlag);\n    }\n\n    //\n    // Restore write-protection status.\n    //\n    EDIS;\n}\n\n//*****************************************************************************\n//\n//! Calls a Local CPU function with a single optional parameter and return\n//! value.\n//!\n//! \\param ulFlag specifies Remote to Local IPC Flag number mask used to\n//! indicate a command is being sent.\n//! \\param ulStatusFlag indicates the Remote to Local Flag number mask used to\n//! report the status of the command sent back from the control system.\n//!\n//! This function will allow the Remote CPU system to call a Local CPU function\n//! with a single optional parameter and places an optional return value in the\n//! IPCLOCALREPLY register. The \\e ulFlag parameter accepts any one of the flag\n//! values \\b IPC_FLAG1 - \\b IPC_FLAG32, and  the \\e ulStatusFlag parameter\n//! accepts any other one of the flag values \\b IPC_FLAG1 - \\b IPC_FLAG32 and\n//! \\b NO_FLAG.\n//\n//*****************************************************************************\nvoid\nIPCLiteRtoLFunctionCall(uint32_t ulFlag, uint32_t ulStatusFlag)\n{\n    //\n    // Wait until IPC Remote to Local request task is flagged\n    //\n    while (!(IpcRegs.IPCSTS.all & ulFlag))\n    {\n    }\n\n    //\n    // If the command is correct for this function:\n    // Then call function at requested address\n    // and if there is a return value, insert into\n    // IPCLOCALREPLY register.\n    // Acknowledge the status flag and the task flag.\n    //\n    if (IpcRegs.IPCRECVCOM == IPC_FUNC_CALL)\n    {\n        tfIpcFuncCall func_call = (tfIpcFuncCall)IpcRegs.IPCRECVADDR;\n        IpcRegs.IPCLOCALREPLY = func_call(IpcRegs.IPCRECVDATA);\n\n        IpcRegs.IPCACK.all = (ulStatusFlag | ulFlag);\n    }\n\n    //\n    // Otherwise, only acknowledge the task flag.\n    //(Indicates to Remote CPU there was an error)\n    //\n    else\n    {\n        IpcRegs.IPCACK.all = (ulFlag);\n    }\n}\n\nvoid DelayLoop (void)\n{\n    __asm(\" nop\");\n    __asm(\" nop\");\n    __asm(\" nop\");\n    __asm(\" nop\");\n    __asm(\" nop\");\n}\n\n//*****************************************************************************\n// Close the Doxygen group.\n//! @}\n//*****************************************************************************\n\n\n"},{"name":"F2837xD_PieCtrl.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:\tF2837xD_PieCtrl.c\n//\n// TITLE:\tF2837xD Device PIE Control Register Initialization Functions.\n//\n//###########################################################################\n//\n// $Release Date:  $\n// $Copyright:\n// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"F2837xD_device.h\"     // F2837xD Headerfile Include File\n#include \"F2837xD_Examples.h\"   // F2837xD Examples Include File\n\n//\n// InitPieCtrl - This function initializes the PIE control registers to a\n//               known state.\n//\nvoid InitPieCtrl(void)\n{\n    //\n    // Disable Interrupts at the CPU level:\n    //\n    DINT;\n\n    //\n    // Disable the PIE\n    //\n    PieCtrlRegs.PIECTRL.bit.ENPIE = 0;\n\n\t//\n    // Clear all PIEIER registers:\n    //\n\tPieCtrlRegs.PIEIER1.all = 0;\n\tPieCtrlRegs.PIEIER2.all = 0;\n\tPieCtrlRegs.PIEIER3.all = 0;\n\tPieCtrlRegs.PIEIER4.all = 0;\n\tPieCtrlRegs.PIEIER5.all = 0;\n\tPieCtrlRegs.PIEIER6.all = 0;\n\tPieCtrlRegs.PIEIER7.all = 0;\n\tPieCtrlRegs.PIEIER8.all = 0;\n\tPieCtrlRegs.PIEIER9.all = 0;\n\tPieCtrlRegs.PIEIER10.all = 0;\n\tPieCtrlRegs.PIEIER11.all = 0;\n\tPieCtrlRegs.PIEIER12.all = 0;\n\n\t//\n    // Clear all PIEIFR registers:\n    //\n\tPieCtrlRegs.PIEIFR1.all = 0;\n\tPieCtrlRegs.PIEIFR2.all = 0;\n\tPieCtrlRegs.PIEIFR3.all = 0;\n\tPieCtrlRegs.PIEIFR4.all = 0;\n\tPieCtrlRegs.PIEIFR5.all = 0;\n\tPieCtrlRegs.PIEIFR6.all = 0;\n\tPieCtrlRegs.PIEIFR7.all = 0;\n\tPieCtrlRegs.PIEIFR8.all = 0;\n\tPieCtrlRegs.PIEIFR9.all = 0;\n\tPieCtrlRegs.PIEIFR10.all = 0;\n\tPieCtrlRegs.PIEIFR11.all = 0;\n\tPieCtrlRegs.PIEIFR12.all = 0;\n}\n\n//\n// EnableInterrupts - This function enables the PIE module and CPU __interrupts\n//\nvoid EnableInterrupts()\n{\n    //\n    // Enable the PIE\n    //\n    PieCtrlRegs.PIECTRL.bit.ENPIE = 1;\n\n\t//\n    // Enables PIE to drive a pulse into the CPU\n    //\n\tPieCtrlRegs.PIEACK.all = 0xFFFF;\n\n\t//\n    // Enable Interrupts at the CPU level\n    //\n    EINT;\n}\n\n//\n// End of file\n//\n"},{"name":"F2837xD_PieVect.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   F2837xD_PieVect.c\n//\n// TITLE:  F2837xD Device PIE Vector Initialization Functions\n//\n//###########################################################################\n//   $\n// $Release Date:   $\n// $Copyright:\n// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"F2837xD_device.h\"\n#include \"F2837xD_Examples.h\"\n\n//\n// Globals\n//\nconst struct PIE_VECT_TABLE PieVectTableInit = {\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    PIE_RESERVED_ISR,             // Reserved\n    TIMER1_ISR,                   // CPU Timer 1 Interrupt\n    TIMER2_ISR,                   // CPU Timer 2 Interrupt\n    DATALOG_ISR,                  // Datalogging Interrupt\n    RTOS_ISR,                     // RTOS Interrupt\n    EMU_ISR,                      // Emulation Interrupt\n    NMI_ISR,                      // Non-Maskable Interrupt\n    ILLEGAL_ISR,                  // Illegal Operation Trap\n    USER1_ISR,                    // User Defined Trap 1\n    USER2_ISR,                    // User Defined Trap 2\n    USER3_ISR,                    // User Defined Trap 3\n    USER4_ISR,                    // User Defined Trap 4\n    USER5_ISR,                    // User Defined Trap 5\n    USER6_ISR,                    // User Defined Trap 6\n    USER7_ISR,                    // User Defined Trap 7\n    USER8_ISR,                    // User Defined Trap 8\n    USER9_ISR,                    // User Defined Trap 9\n    USER10_ISR,                   // User Defined Trap 10\n    USER11_ISR,                   // User Defined Trap 11\n    USER12_ISR,                   // User Defined Trap 12\n    ADCA1_ISR,                    // 1.1 - ADCA Interrupt 1\n    ADCB1_ISR,                    // 1.2 - ADCB Interrupt 1\n    ADCC1_ISR,                    // 1.3 - ADCC Interrupt 1\n    XINT1_ISR,                    // 1.4 - XINT1 Interrupt\n    XINT2_ISR,                    // 1.5 - XINT2 Interrupt\n    ADCD1_ISR,                    // 1.6 - ADCD Interrupt 1\n    TIMER0_ISR,                   // 1.7 - Timer 0 Interrupt\n    WAKE_ISR,                     // 1.8 - Standby and Halt Wakeup Interrupt\n    EPWM1_TZ_ISR,                 // 2.1 - ePWM1 Trip Zone Interrupt\n    EPWM2_TZ_ISR,                 // 2.2 - ePWM2 Trip Zone Interrupt\n    EPWM3_TZ_ISR,                 // 2.3 - ePWM3 Trip Zone Interrupt\n    EPWM4_TZ_ISR,                 // 2.4 - ePWM4 Trip Zone Interrupt\n    EPWM5_TZ_ISR,                 // 2.5 - ePWM5 Trip Zone Interrupt\n    EPWM6_TZ_ISR,                 // 2.6 - ePWM6 Trip Zone Interrupt\n    EPWM7_TZ_ISR,                 // 2.7 - ePWM7 Trip Zone Interrupt\n    EPWM8_TZ_ISR,                 // 2.8 - ePWM8 Trip Zone Interrupt\n    EPWM1_ISR,                    // 3.1 - ePWM1 Interrupt\n    EPWM2_ISR,                    // 3.2 - ePWM2 Interrupt\n    EPWM3_ISR,                    // 3.3 - ePWM3 Interrupt\n    EPWM4_ISR,                    // 3.4 - ePWM4 Interrupt\n    EPWM5_ISR,                    // 3.5 - ePWM5 Interrupt\n    EPWM6_ISR,                    // 3.6 - ePWM6 Interrupt\n    EPWM7_ISR,                    // 3.7 - ePWM7 Interrupt\n    EPWM8_ISR,                    // 3.8 - ePWM8 Interrupt\n    ECAP1_ISR,                    // 4.1 - eCAP1 Interrupt\n    ECAP2_ISR,                    // 4.2 - eCAP2 Interrupt\n    ECAP3_ISR,                    // 4.3 - eCAP3 Interrupt\n    ECAP4_ISR,                    // 4.4 - eCAP4 Interrupt\n    ECAP5_ISR,                    // 4.5 - eCAP5 Interrupt\n    ECAP6_ISR,                    // 4.6 - eCAP6 Interrupt\n    PIE_RESERVED_ISR,             // 4.7 - Reserved\n    PIE_RESERVED_ISR,             // 4.8 - Reserved\n    EQEP1_ISR,                    // 5.1 - eQEP1 Interrupt\n    EQEP2_ISR,                    // 5.2 - eQEP2 Interrupt\n    EQEP3_ISR,                    // 5.3 - eQEP3 Interrupt\n    PIE_RESERVED_ISR,             // 5.4 - Reserved\n    PIE_RESERVED_ISR,             // 5.5 - Reserved\n    PIE_RESERVED_ISR,             // 5.6 - Reserved\n    PIE_RESERVED_ISR,             // 5.7 - Reserved\n    PIE_RESERVED_ISR,             // 5.8 - Reserved\n    SPIA_RX_ISR,                  // 6.1 - SPIA Receive Interrupt\n    SPIA_TX_ISR,                  // 6.2 - SPIA Transmit Interrupt\n    SPIB_RX_ISR,                  // 6.3 - SPIB Receive Interrupt\n    SPIB_TX_ISR,                  // 6.4 - SPIB Transmit Interrupt\n    MCBSPA_RX_ISR,                // 6.5 - McBSPA Receive Interrupt\n    MCBSPA_TX_ISR,                // 6.6 - McBSPA Transmit Interrupt\n    MCBSPB_RX_ISR,                // 6.7 - McBSPB Receive Interrupt\n    MCBSPB_TX_ISR,                // 6.8 - McBSPB Transmit Interrupt\n    DMA_CH1_ISR,                  // 7.1 - DMA Channel 1 Interrupt\n    DMA_CH2_ISR,                  // 7.2 - DMA Channel 2 Interrupt\n    DMA_CH3_ISR,                  // 7.3 - DMA Channel 3 Interrupt\n    DMA_CH4_ISR,                  // 7.4 - DMA Channel 4 Interrupt\n    DMA_CH5_ISR,                  // 7.5 - DMA Channel 5 Interrupt\n    DMA_CH6_ISR,                  // 7.6 - DMA Channel 6 Interrupt\n    PIE_RESERVED_ISR,             // 7.7 - Reserved\n    PIE_RESERVED_ISR,             // 7.8 - Reserved\n    I2CA_ISR,                     // 8.1 - I2CA Interrupt 1\n    I2CA_FIFO_ISR,                // 8.2 - I2CA Interrupt 2\n    I2CB_ISR,                     // 8.3 - I2CB Interrupt 1\n    I2CB_FIFO_ISR,                // 8.4 - I2CB Interrupt 2\n    SCIC_RX_ISR,                  // 8.5 - SCIC Receive Interrupt\n    SCIC_TX_ISR,                  // 8.6 - SCIC Transmit Interrupt\n    SCID_RX_ISR,                  // 8.7 - SCID Receive Interrupt\n    SCID_TX_ISR,                  // 8.8 - SCID Transmit Interrupt\n    SCIA_RX_ISR,                  // 9.1 - SCIA Receive Interrupt\n    SCIA_TX_ISR,                  // 9.2 - SCIA Transmit Interrupt\n    SCIB_RX_ISR,                  // 9.3 - SCIB Receive Interrupt\n    SCIB_TX_ISR,                  // 9.4 - SCIB Transmit Interrupt\n    CANA0_ISR,                    // 9.5 - CANA Interrupt 0\n    CANA1_ISR,                    // 9.6 - CANA Interrupt 1\n    CANB0_ISR,                    // 9.7 - CANB Interrupt 0\n    CANB1_ISR,                    // 9.8 - CANB Interrupt 1\n    ADCA_EVT_ISR,                 // 10.1 - ADCA Event Interrupt\n    ADCA2_ISR,                    // 10.2 - ADCA Interrupt 2\n    ADCA3_ISR,                    // 10.3 - ADCA Interrupt 3\n    ADCA4_ISR,                    // 10.4 - ADCA Interrupt 4\n    ADCB_EVT_ISR,                 // 10.5 - ADCB Event Interrupt\n    ADCB2_ISR,                    // 10.6 - ADCB Interrupt 2\n    ADCB3_ISR,                    // 10.7 - ADCB Interrupt 3\n    ADCB4_ISR,                    // 10.8 - ADCB Interrupt 4\n    CLA1_1_ISR,                   // 11.1 - CLA1 Interrupt 1\n    CLA1_2_ISR,                   // 11.2 - CLA1 Interrupt 2\n    CLA1_3_ISR,                   // 11.3 - CLA1 Interrupt 3\n    CLA1_4_ISR,                   // 11.4 - CLA1 Interrupt 4\n    CLA1_5_ISR,                   // 11.5 - CLA1 Interrupt 5\n    CLA1_6_ISR,                   // 11.6 - CLA1 Interrupt 6\n    CLA1_7_ISR,                   // 11.7 - CLA1 Interrupt 7\n    CLA1_8_ISR,                   // 11.8 - CLA1 Interrupt 8\n    XINT3_ISR,                    // 12.1 - XINT3 Interrupt\n    XINT4_ISR,                    // 12.2 - XINT4 Interrupt\n    XINT5_ISR,                    // 12.3 - XINT5 Interrupt\n    PIE_RESERVED_ISR,             // 12.4 - Reserved\n    PIE_RESERVED_ISR,             // 12.5 - Reserved\n    VCU_ISR,                      // 12.6 - VCU Interrupt\n    FPU_OVERFLOW_ISR,             // 12.7 - FPU Overflow Interrupt\n    FPU_UNDERFLOW_ISR,            // 12.8 - FPU Underflow Interrupt\n    PIE_RESERVED_ISR,             // 1.9 - Reserved\n    PIE_RESERVED_ISR,             // 1.10 - Reserved\n    PIE_RESERVED_ISR,             // 1.11 - Reserved\n    PIE_RESERVED_ISR,             // 1.12 - Reserved\n    IPC0_ISR,                     // 1.13 - IPC Interrupt 0\n    IPC1_ISR,                     // 1.14 - IPC Interrupt 1\n    IPC2_ISR,                     // 1.15 - IPC Interrupt 2\n    IPC3_ISR,                     // 1.16 - IPC Interrupt 3\n    EPWM9_TZ_ISR,                 // 2.9 - ePWM9 Trip Zone Interrupt\n    EPWM10_TZ_ISR,                // 2.10 - ePWM10 Trip Zone Interrupt\n    EPWM11_TZ_ISR,                // 2.11 - ePWM11 Trip Zone Interrupt\n    EPWM12_TZ_ISR,                // 2.12 - ePWM12 Trip Zone Interrupt\n    PIE_RESERVED_ISR,             // 2.13 - Reserved\n    PIE_RESERVED_ISR,             // 2.14 - Reserved\n    PIE_RESERVED_ISR,             // 2.15 - Reserved\n    PIE_RESERVED_ISR,             // 2.16 - Reserved\n    EPWM9_ISR,                    // 3.9 - ePWM9 Interrupt\n    EPWM10_ISR,                   // 3.10 - ePWM10 Interrupt\n    EPWM11_ISR,                   // 3.11 - ePWM11 Interrupt\n    EPWM12_ISR,                   // 3.12 - ePWM12 Interrupt\n    PIE_RESERVED_ISR,             // 3.13 - Reserved\n    PIE_RESERVED_ISR,             // 3.14 - Reserved\n    PIE_RESERVED_ISR,             // 3.15 - Reserved\n    PIE_RESERVED_ISR,             // 3.16 - Reserved\n    PIE_RESERVED_ISR,             // 4.9 - Reserved\n    PIE_RESERVED_ISR,             // 4.10 - Reserved\n    PIE_RESERVED_ISR,             // 4.11 - Reserved\n    PIE_RESERVED_ISR,             // 4.12 - Reserved\n    PIE_RESERVED_ISR,             // 4.13 - Reserved\n    PIE_RESERVED_ISR,             // 4.14 - Reserved\n    PIE_RESERVED_ISR,             // 4.15 - Reserved\n    PIE_RESERVED_ISR,             // 4.16 - Reserved\n    SD1_ISR,                      // 5.9 - SD1 Interrupt\n    SD2_ISR,                      // 5.10 - SD2 Interrupt\n    PIE_RESERVED_ISR,             // 5.11 - Reserved\n    PIE_RESERVED_ISR,             // 5.12 - Reserved\n    PIE_RESERVED_ISR,             // 5.13 - Reserved\n    PIE_RESERVED_ISR,             // 5.14 - Reserved\n    PIE_RESERVED_ISR,             // 5.15 - Reserved\n    PIE_RESERVED_ISR,             // 5.16 - Reserved\n    SPIC_RX_ISR,                  // 6.9 - SPIC Receive Interrupt\n    SPIC_TX_ISR,                  // 6.10 - SPIC Transmit Interrupt\n    PIE_RESERVED_ISR,             // 6.11 - Reserved\n    PIE_RESERVED_ISR,             // 6.12 - Reserved\n    PIE_RESERVED_ISR,             // 6.13 - Reserved\n    PIE_RESERVED_ISR,             // 6.14 - Reserved\n    PIE_RESERVED_ISR,             // 6.15 - Reserved\n    PIE_RESERVED_ISR,             // 6.16 - Reserved\n    PIE_RESERVED_ISR,             // 7.9 - Reserved\n    PIE_RESERVED_ISR,             // 7.10 - Reserved\n    PIE_RESERVED_ISR,             // 7.11 - Reserved\n    PIE_RESERVED_ISR,             // 7.12 - Reserved\n    PIE_RESERVED_ISR,             // 7.13 - Reserved\n    PIE_RESERVED_ISR,             // 7.14 - Reserved\n    PIE_RESERVED_ISR,             // 7.15 - Reserved\n    PIE_RESERVED_ISR,             // 7.16 - Reserved\n    PIE_RESERVED_ISR,             // 8.9 - Reserved\n    PIE_RESERVED_ISR,             // 8.10 - Reserved\n    PIE_RESERVED_ISR,             // 8.11 - Reserved\n    PIE_RESERVED_ISR,             // 8.12 - Reserved\n    PIE_RESERVED_ISR,             // 8.13 - Reserved\n    PIE_RESERVED_ISR,             // 8.14 - Reserved\n#ifdef CPU1    \n    UPPA_ISR,                     // 8.15 - uPPA Interrupt\n    PIE_RESERVED_ISR,             // 8.16 - Reserved\n#elif defined(CPU2)\n    PIE_RESERVED_ISR,             // 8.15 - Reserved\n    PIE_RESERVED_ISR,             // 8.16 - Reserved\n#endif    \n    PIE_RESERVED_ISR,             // 9.9 - Reserved\n    PIE_RESERVED_ISR,             // 9.10 - Reserved\n    PIE_RESERVED_ISR,             // 9.11 - Reserved\n    PIE_RESERVED_ISR,             // 9.12 - Reserved\n    PIE_RESERVED_ISR,             // 9.13 - Reserved\n    PIE_RESERVED_ISR,             // 9.14 - Reserved\n#ifdef CPU1    \n    USBA_ISR,                     // 9.15 - USBA Interrupt\n#elif defined(CPU2)\n    PIE_RESERVED_ISR,             // 9.15 - Reserved\n#endif    \n    PIE_RESERVED_ISR,             // 9.16 - Reserved\n    ADCC_EVT_ISR,                 // 10.9 - ADCC Event Interrupt\n    ADCC2_ISR,                    // 10.10 - ADCC Interrupt 2\n    ADCC3_ISR,                    // 10.11 - ADCC Interrupt 3\n    ADCC4_ISR,                    // 10.12 - ADCC Interrupt 4\n    ADCD_EVT_ISR,                 // 10.13 - ADCD Event Interrupt\n    ADCD2_ISR,                    // 10.14 - ADCD Interrupt 2\n    ADCD3_ISR,                    // 10.15 - ADCD Interrupt 3\n    ADCD4_ISR,                    // 10.16 - ADCD Interrupt 4\n    PIE_RESERVED_ISR,             // 11.9 - Reserved\n    PIE_RESERVED_ISR,             // 11.10 - Reserved\n    PIE_RESERVED_ISR,             // 11.11 - Reserved\n    PIE_RESERVED_ISR,             // 11.12 - Reserved\n    PIE_RESERVED_ISR,             // 11.13 - Reserved\n    PIE_RESERVED_ISR,             // 11.14 - Reserved\n    PIE_RESERVED_ISR,             // 11.15 - Reserved\n    PIE_RESERVED_ISR,             // 11.16 - Reserved\n    EMIF_ERROR_ISR,               // 12.9 - EMIF Error Interrupt\n    RAM_CORRECTABLE_ERROR_ISR,    // 12.10 - RAM Correctable Error Interrupt\n    FLASH_CORRECTABLE_ERROR_ISR,  // 12.11 - Flash Correctable Error Interrupt\n    RAM_ACCESS_VIOLATION_ISR,     // 12.12 - RAM Access Violation Interrupt\n    SYS_PLL_SLIP_ISR,             // 12.13 - System PLL Slip Interrupt\n    AUX_PLL_SLIP_ISR,             // 12.14 - Auxiliary PLL Slip Interrupt\n    CLA_OVERFLOW_ISR,             // 12.15 - CLA Overflow Interrupt\n    CLA_UNDERFLOW_ISR             // 12.16 - CLA Underflow Interrupt\n};\n\n//\n// InitPieVectTable - This function initializes the PIE vector table to a\n//                    known state and must be executed after boot time.\n//\nvoid InitPieVectTable(void)\n{\n    Uint16 i;\n    Uint32 *Source = (void *) &PieVectTableInit;\n    Uint32 *Dest = (void *) &PieVectTable;\n\n    //\n    // Do not write over first 3 32-bit locations (these locations are\n    // initialized by Boot ROM with boot variables)\n    //\n    Source = Source + 3;\n    Dest = Dest + 3;\n\n    EALLOW;\n    for(i = 0; i < 221; i++)\n    {\n    \t*Dest++ = *Source++;\n    }\n    EDIS;\n\n    //\n    // Enable the PIE Vector Table\n    //\n    PieCtrlRegs.PIECTRL.bit.ENPIE = 1;\n}\n\n//\n// End of file\n//\n"},{"name":"F2837xD_SysCtrl.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   F2837xD_SysCtrl.c\n//\n// TITLE:  F2837xD Device System Control Initialization & Support Functions.\n//\n// DESCRIPTION:\n//\n//         Example initialization of system resources.\n//\n//###########################################################################\n//\n// $Release Date:  $\n// $Copyright:\n// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n//\n// Included Files\n//\n#include \"F2837xD_device.h\"\n#include \"F2837xD_Examples.h\"\n#ifdef __cplusplus\nusing std::memcpy;\n#endif\n\n#define STATUS_FAIL          0\n#define STATUS_SUCCESS       1\n#define TMR1SYSCLKCTR        0xF0000000\n#define TMR2INPCLKCTR        0x800\n\n//\n// Functions that will be run from RAM need to be assigned to a different\n// section.  This section will then be mapped to a load and run address using\n// the linker cmd file.\n//\n//      *IMPORTANT*\n//\n//  IF RUNNING FROM FLASH, PLEASE COPY OVER THE SECTION \".TI.ramfunc\" FROM\n//  FLASH TO RAM PRIOR TO CALLING InitSysCtrl(). THIS PREVENTS THE MCU FROM\n//  THROWING AN EXCEPTION WHEN A CALL TO DELAY_US() IS MADE.\n//\n#ifndef __cplusplus\n    #ifdef __TI_COMPILER_VERSION__\n        #if __TI_COMPILER_VERSION__ >= 15009000\n            #pragma CODE_SECTION(InitFlash, \".TI.ramfunc\");\n            #pragma CODE_SECTION(FlashOff, \".TI.ramfunc\");\n        #else\n            #pragma CODE_SECTION(InitFlash, \"ramfuncs\");\n            #pragma CODE_SECTION(FlashOff, \"ramfuncs\");\n        #endif\n    #endif\n#endif\n\n//\n// Macro used for adding delay between 2 consecutive writes to CLKSRCCTL1\n// register.\n// Delay = 300 NOPs\n//\n#define SYSCTRL_CLKSRCCTL1_DELAY  asm(\" RPT #250 || NOP \\n RPT #50 || NOP\")\n\n//\n// InitSysCtrl - Initialization of system resources.\n//\nvoid InitSysCtrl(void)\n{\n    //\n    // Disable the watchdog\n    //\n    DisableDog();\n\n#ifdef _FLASH\n    //\n    // Copy time critical code and Flash setup code to RAM. This includes the\n    // following functions: InitFlash()\n    //\n    // The  RamfuncsLoadStart, RamfuncsLoadSize, and RamfuncsRunStart\n    // symbols are created by the linker. Refer to the device .cmd file.\n    //\n    memcpy(&RamfuncsRunStart, &RamfuncsLoadStart, (size_t)&RamfuncsLoadSize);\n\n    //\n    // Call Flash Initialization to setup flash waitstates. This function must\n    // reside in RAM.\n    //\n    InitFlash();\n#endif\n\n    //\n    //      *IMPORTANT*\n    //\n    // The Device_cal function, which copies the ADC & oscillator calibration\n    // values from TI reserved OTP into the appropriate trim registers, occurs\n    // automatically in the Boot ROM. If the boot ROM code is bypassed during\n    // the debug process, the following function MUST be called for the ADC and\n    // oscillators to function according to specification. The clocks to the\n    // ADC MUST be enabled before calling this function.\n    //\n    // See the device data manual and/or the ADC Reference Manual for more\n    // information.\n    //\n#ifdef CPU1\n    EALLOW;\n\n    //\n    // Enable pull-ups on unbonded IOs as soon as possible to reduce power\n    // consumption.\n    //\n    GPIO_EnableUnbondedIOPullups();\n\n    //\n    // Check if the device is trimmed\n    //\n    if((DevCfgRegs.PARTIDL.bit.QUAL == 0x0) &&\n       (AnalogSubsysRegs.ANAREFTRIMA.all == 0x0))\n    {\n        ConfigureTMXAnalogTrim();\n    }\n\n    EDIS;\n\n    //\n    // Initialize the PLL control: SYSPLLMULT and SYSCLKDIVSEL.\n    //\n    // Defined options to be passed as arguments to this function are defined\n    // in F2837xD_Examples.h.\n    //\n    // Note: The internal oscillator CANNOT be used as the PLL source if the\n    // PLLSYSCLK is configured to frequencies above 194 MHz.\n    //\n    //  PLLSYSCLK = (XTAL_OSC) * (IMULT + FMULT) / (PLLSYSCLKDIV)\n    //\n#ifdef _LAUNCHXL_F28379D\n    InitSysPll(XTAL_OSC,IMULT_40,FMULT_0,PLLCLK_BY_2);\n#else\n    InitSysPll(XTAL_OSC, IMULT_20, FMULT_0, PLLCLK_BY_2);\n#endif // _LAUNCHXL_F28379D\n\n#ifndef _FLASH\n    //\n    // Call Device_cal function when run using debugger\n    // This function is called as part of the Boot code. The function is called\n    // in the InitSysCtrl function since during debug time resets, the boot code\n    // will not be executed and the gel script will reinitialize all the\n    // registers and the calibrated values will be lost.\n    //\n    Device_cal();\n#endif\n#endif // CPU1\n\n    //\n    // Turn on all peripherals\n    //\n    InitPeripheralClocks();\n}\n\n//\n// InitPeripheralClocks - Initializes the clocks for the peripherals.\n//\n// Note: In order to reduce power consumption, turn off the clocks to any\n// peripheral that is not specified for your part-number or is not used in the\n// application\n//\nvoid InitPeripheralClocks(void)\n{\n    EALLOW;\n\n    CpuSysRegs.PCLKCR0.bit.CLA1 = 1;\n    CpuSysRegs.PCLKCR0.bit.DMA = 1;\n    CpuSysRegs.PCLKCR0.bit.CPUTIMER0 = 1;\n    CpuSysRegs.PCLKCR0.bit.CPUTIMER1 = 1;\n    CpuSysRegs.PCLKCR0.bit.CPUTIMER2 = 1;\n\n#ifdef CPU1\n    CpuSysRegs.PCLKCR0.bit.HRPWM = 1;\n#endif\n\n    CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = 1;\n\n#ifdef CPU1\n    CpuSysRegs.PCLKCR1.bit.EMIF1 = 1;\n    CpuSysRegs.PCLKCR1.bit.EMIF2 = 1;\n#endif\n\n    CpuSysRegs.PCLKCR2.bit.EPWM1 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM2 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM3 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM4 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM5 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM6 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM7 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM8 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM9 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM10 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM11 = 1;\n    CpuSysRegs.PCLKCR2.bit.EPWM12 = 1;\n\n    CpuSysRegs.PCLKCR3.bit.ECAP1 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP2 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP3 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP4 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP5 = 1;\n    CpuSysRegs.PCLKCR3.bit.ECAP6 = 1;\n\n    CpuSysRegs.PCLKCR4.bit.EQEP1 = 1;\n    CpuSysRegs.PCLKCR4.bit.EQEP2 = 1;\n    CpuSysRegs.PCLKCR4.bit.EQEP3 = 1;\n\n    CpuSysRegs.PCLKCR6.bit.SD1 = 1;\n    CpuSysRegs.PCLKCR6.bit.SD2 = 1;\n\n    CpuSysRegs.PCLKCR7.bit.SCI_A = 1;\n    CpuSysRegs.PCLKCR7.bit.SCI_B = 1;\n    CpuSysRegs.PCLKCR7.bit.SCI_C = 1;\n    CpuSysRegs.PCLKCR7.bit.SCI_D = 1;\n\n    CpuSysRegs.PCLKCR8.bit.SPI_A = 1;\n    CpuSysRegs.PCLKCR8.bit.SPI_B = 1;\n    CpuSysRegs.PCLKCR8.bit.SPI_C = 1;\n\n    CpuSysRegs.PCLKCR9.bit.I2C_A = 1;\n    CpuSysRegs.PCLKCR9.bit.I2C_B = 1;\n\n    CpuSysRegs.PCLKCR10.bit.CAN_A = 1;\n    CpuSysRegs.PCLKCR10.bit.CAN_B = 1;\n\n    CpuSysRegs.PCLKCR11.bit.McBSP_A = 1;\n    CpuSysRegs.PCLKCR11.bit.McBSP_B = 1;\n\n#ifdef CPU1\n    CpuSysRegs.PCLKCR11.bit.USB_A = 1;\n\n    CpuSysRegs.PCLKCR12.bit.uPP_A = 1;\n#endif\n\n    CpuSysRegs.PCLKCR13.bit.ADC_A = 1;\n    CpuSysRegs.PCLKCR13.bit.ADC_B = 1;\n    CpuSysRegs.PCLKCR13.bit.ADC_C = 1;\n    CpuSysRegs.PCLKCR13.bit.ADC_D = 1;\n\n    CpuSysRegs.PCLKCR14.bit.CMPSS1 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS2 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS3 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS4 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS5 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS6 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS7 = 1;\n    CpuSysRegs.PCLKCR14.bit.CMPSS8 = 1;\n\n    CpuSysRegs.PCLKCR16.bit.DAC_A = 1;\n    CpuSysRegs.PCLKCR16.bit.DAC_B = 1;\n    CpuSysRegs.PCLKCR16.bit.DAC_C = 1;\n\n    EDIS;\n}\n\n//\n// DisablePeripheralClocks - Gates-off all peripheral clocks.\n//\nvoid DisablePeripheralClocks(void)\n{\n    EALLOW;\n\n    CpuSysRegs.PCLKCR0.all = 0;\n    CpuSysRegs.PCLKCR1.all = 0;\n    CpuSysRegs.PCLKCR2.all = 0;\n    CpuSysRegs.PCLKCR3.all = 0;\n    CpuSysRegs.PCLKCR4.all = 0;\n    CpuSysRegs.PCLKCR6.all = 0;\n    CpuSysRegs.PCLKCR7.all = 0;\n    CpuSysRegs.PCLKCR8.all = 0;\n    CpuSysRegs.PCLKCR9.all = 0;\n    CpuSysRegs.PCLKCR10.all = 0;\n    CpuSysRegs.PCLKCR11.all = 0;\n    CpuSysRegs.PCLKCR12.all = 0;\n    CpuSysRegs.PCLKCR13.all = 0;\n    CpuSysRegs.PCLKCR14.all = 0;\n    CpuSysRegs.PCLKCR16.all = 0;\n\n    EDIS;\n}\n\n//\n// InitFlash - This function initializes the Flash Control registers.\n//\n//      *CAUTION*\n// This function MUST be executed out of RAM. Executing it out of OTP/Flash\n// will yield unpredictable results.\n//\n#ifdef __cplusplus\n    #ifdef __TI_COMPILER_VERSION__\n        #if __TI_COMPILER_VERSION__ >= 15009000\n            #pragma CODE_SECTION(\".TI.ramfunc\");\n        #else\n            #pragma CODE_SECTION(\"ramfuncs\");\n        #endif\n    #endif\n#endif\nvoid InitFlash(void)\n{\n    EALLOW;\n\n    //\n    // The default value of VREADST is good enough for the flash to power up\n    // properly at the INTOSC frequency. Below VREADST configuration covers up\n    // to the max frequency possible for this device. This is required for\n    // proper flash wake up at the higher frequencies if users put it to sleep\n    // for power saving reason.\n    //\n    Flash0CtrlRegs.FBAC.bit.VREADST = 0x14;\n\n    //\n    // At reset bank and pump are in sleep. A Flash access will power up the\n    // bank and pump automatically.\n    //\n    // Power up Flash bank and pump. This also sets the fall back mode of\n    // flash and pump as active.\n    //\n    Flash0CtrlRegs.FPAC1.bit.PMPPWR = 0x1;\n    Flash0CtrlRegs.FBFALLBACK.bit.BNKPWR0 = 0x3;\n\n    //\n    // Disable Cache and prefetch mechanism before changing wait states\n    //\n    Flash0CtrlRegs.FRD_INTF_CTRL.bit.DATA_CACHE_EN = 0;\n    Flash0CtrlRegs.FRD_INTF_CTRL.bit.PREFETCH_EN = 0;\n\n    //\n    // Set waitstates according to frequency\n    //\n    //      *CAUTION*\n    // Minimum waitstates required for the flash operating at a given CPU rate\n    // must be characterized by TI. Refer to the datasheet for the latest\n    // information.\n    //\n    #if CPU_FRQ_200MHZ\n    Flash0CtrlRegs.FRDCNTL.bit.RWAIT = 0x3;\n    #endif\n\n    #if CPU_FRQ_150MHZ\n    Flash0CtrlRegs.FRDCNTL.bit.RWAIT = 0x2;\n    #endif\n\n    #if CPU_FRQ_120MHZ\n    Flash0CtrlRegs.FRDCNTL.bit.RWAIT = 0x2;\n    #endif\n\n    //\n    // Enable Cache and prefetch mechanism to improve performance of code\n    // executed from Flash.\n    //\n    Flash0CtrlRegs.FRD_INTF_CTRL.bit.DATA_CACHE_EN = 1;\n    Flash0CtrlRegs.FRD_INTF_CTRL.bit.PREFETCH_EN = 1;\n\n    //\n    // At reset, ECC is enabled. If it is disabled by application software and\n    // if application again wants to enable ECC.\n    //\n    Flash0EccRegs.ECC_ENABLE.bit.ENABLE = 0xA;\n\n    EDIS;\n\n    //\n    // Force a pipeline flush to ensure that the write to the last register\n    // configured occurs before returning.\n    //\n    __asm(\" RPT #7 || NOP\");\n}\n\n//\n// FlashOff - This function powers down the flash\n//\n//      *CAUTION*\n// This function MUST be executed out of RAM. Executing it out of OTP/Flash\n// will yield unpredictable results. Also you must seize the flash pump in\n// order to power it down.\n//\n#ifdef __cplusplus\n    #ifdef __TI_COMPILER_VERSION__\n        #if __TI_COMPILER_VERSION__ >= 15009000\n            #pragma CODE_SECTION(\".TI.ramfunc\");\n        #else\n            #pragma CODE_SECTION(\"ramfuncs\");\n        #endif\n    #endif\n#endif\nvoid FlashOff(void)\n{\n    EALLOW;\n\n    //\n    // Set VREADST to the proper value for the flash banks to power up properly\n    //\n    Flash0CtrlRegs.FBAC.bit.VREADST = 0x14;\n\n    //\n    // Power down bank\n    //\n    Flash0CtrlRegs.FBFALLBACK.bit.BNKPWR0 = 0;\n\n    //\n    // Power down pump\n    //\n    Flash0CtrlRegs.FPAC1.bit.PMPPWR = 0;\n\n    EDIS;\n}\n\n//\n// SeizeFlashPump - Wait until the flash pump is available. Then take control\n//                  of it using the flash pump Semaphore.\n//\nvoid SeizeFlashPump(void)\n{\n    EALLOW;\n    #ifdef CPU1\n        while (FlashPumpSemaphoreRegs.PUMPREQUEST.bit.PUMP_OWNERSHIP != 0x2)\n        {\n            FlashPumpSemaphoreRegs.PUMPREQUEST.all = IPC_PUMP_KEY | 0x2;\n        }\n    #elif defined(CPU2)\n        while (FlashPumpSemaphoreRegs.PUMPREQUEST.bit.PUMP_OWNERSHIP != 0x1)\n        {\n            FlashPumpSemaphoreRegs.PUMPREQUEST.all = IPC_PUMP_KEY | 0x1;\n        }\n    #endif\n    EDIS;\n}\n\n//\n// ReleaseFlashPump - Release control of the flash pump using the flash pump\n//                    semaphore.\n//\nvoid ReleaseFlashPump(void)\n{\n    EALLOW;\n    FlashPumpSemaphoreRegs.PUMPREQUEST.all = IPC_PUMP_KEY | 0x0;\n    EDIS;\n}\n\n//\n// ServiceDog - This function resets the watchdog timer.\n//\n// Enable this function for using ServiceDog in the application.\n//\nvoid ServiceDog(void)\n{\n    EALLOW;\n    WdRegs.WDKEY.bit.WDKEY = 0x0055;\n    WdRegs.WDKEY.bit.WDKEY = 0x00AA;\n    EDIS;\n}\n\n//\n// DisableDog - This function disables the watchdog timer.\n//\nvoid DisableDog(void)\n{\n    volatile Uint16 temp;\n\n    //\n    // Grab the clock config first so we don't clobber it\n    //\n    EALLOW;\n    temp = WdRegs.WDCR.all & 0x0007;\n    WdRegs.WDCR.all = 0x0068 | temp;\n    EDIS;\n}\n\n#ifdef CPU1\n//\n// InitSysPll()\n// This function initializes the PLL registers.\n// Note:\n//  - The internal oscillator CANNOT be used as the PLL source if the\n//    PLLSYSCLK is configured to frequencies above 194 MHz.\n//\n//  - This function uses the Watchdog as a monitor for the PLL. The user\n//  watchdog settings will be modified and restored upon completion.  Function\n//  allows for a minimum re lock attempt for 5 tries.  Re lock attempt is carried\n//  out if either SLIP condition occurs or SYSCLK to Input Clock ratio is off by 10%\n//\n//  - This function uses the following resources to support PLL initialization:\n//          o Watchdog\n//          o CPU Timer 1\n//          o CPU Timer 2\n//\nvoid InitSysPll(Uint16 clock_source, Uint16 imult, Uint16 fmult, Uint16 divsel)\n{\n    Uint16 SCSR, WDCR, WDWCR, intStatus,  t1TCR, t1TPR, t1TPRH;\n    Uint16 t2TCR, t2TPR, t2TPRH, t2SRC, t2Prescale;\n    Uint32 t1PRD, t2PRD, ctr1;\n    float sysclkToInClkError, mult, div;\n    bool sysclkInvalidFreq=true;\n\n    if((clock_source == ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL)    &&\n       (imult        == ClkCfgRegs.SYSPLLMULT.bit.IMULT)           &&\n       (fmult        == ClkCfgRegs.SYSPLLMULT.bit.FMULT)           &&\n       (divsel       == ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV))\n    {\n        //\n        // Everything is set as required, so just return\n        //\n        return;\n    }\n\n    if(clock_source != ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL)\n    {\n        switch (clock_source)\n        {\n            case INT_OSC1:\n                SysIntOsc1Sel();\n                break;\n\n            case INT_OSC2:\n                SysIntOsc2Sel();\n                break;\n\n            case XTAL_OSC:\n                SysXtalOscSel();\n                break;\n        }\n    }\n\n    EALLOW;\n    if(imult != ClkCfgRegs.SYSPLLMULT.bit.IMULT ||\n       fmult != ClkCfgRegs.SYSPLLMULT.bit.FMULT)\n    {\n        Uint16 i;\n\n        //\n        // This bit is reset only by POR\n        //\n        if(DevCfgRegs.SYSDBGCTL.bit.BIT_0 == 1)\n        {\n            //\n            // The user can optionally insert handler code here. This will only\n            // be executed if a watchdog reset occurred after a failed system\n            // PLL initialization. See your device user's guide for more\n            // information.\n            //\n            // If the application has a watchdog reset handler, this bit should\n            // be checked to determine if the watchdog reset occurred because\n            // of the PLL.\n            //\n            // No action here will continue with retrying the PLL as normal.\n            //\n            // Failed PLL initialization is due to any of the following:\n            //      - No PLL clock\n            //      - SLIP condition\n            //      - Wrong Frequency\n            //\n        }\n\n        //\n        // Bypass PLL and set dividers to /1\n        //\n        ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 0;\n\n        //\n        // Delay of at least 120 OSCCLK cycles required post PLL bypass\n        //\n        asm(\" RPT #120 || NOP\");\n        ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = 0;\n\n        //\n        // Lock the PLL five times. This helps ensure a successful start.\n        // Five is the minimum recommended number. The user can increase this\n        // number according to allotted system initialization time.\n        //\n        for(i = 0; i < 5; i++)\n        {\n            //\n            // Turn off PLL\n            //\n            ClkCfgRegs.SYSPLLCTL1.bit.PLLEN = 0;\n            asm(\" RPT #20 || NOP\");\n\n            //\n            // Write multiplier, which automatically turns on the PLL\n            //\n            ClkCfgRegs.SYSPLLMULT.all = ((fmult << 8U) | imult);\n\n            //\n            // Wait for the SYSPLL lock counter\n            //\n            while(ClkCfgRegs.SYSPLLSTS.bit.LOCKS != 1)\n            {\n                //\n                // Uncomment to service the watchdog\n                //\n                // ServiceDog();\n            }\n        }\n    }\n\n    //\n    // Set divider to produce slower output frequency to limit current increase\n    //\n    if(divsel != PLLCLK_BY_126)\n    {\n         ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = divsel + 1;\n    }\n    else\n    {\n         ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = divsel;\n    }\n\n    //\n    //      *CAUTION*\n    // It is recommended to use the following watchdog code to monitor the PLL\n    // startup sequence. If your application has already cleared the watchdog\n    // SCRS[WDOVERRIDE] bit this cannot be done. It is recommended not to clear\n    // this bit until after the PLL has been initiated.\n    //\n\n    //\n    // Backup User Watchdog\n    //\n    SCSR = WdRegs.SCSR.all;\n    WDCR = WdRegs.WDCR.all;\n    WDWCR = WdRegs.WDWCR.all;\n\n    //\n    // Disable windowed functionality, reset counter\n    //\n    EALLOW;\n    WdRegs.WDWCR.all = 0x0;\n    WdRegs.WDKEY.bit.WDKEY = 0x55;\n    WdRegs.WDKEY.bit.WDKEY = 0xAA;\n\n    //\n    // Disable global interrupts\n    //\n    intStatus = __disable_interrupts();\n\n    //\n    // Configure for watchdog reset and to run at max frequency\n    //\n    WdRegs.SCSR.all = 0x0;\n    WdRegs.WDCR.all = 0x28;\n\n    //\n    // This bit is reset only by power-on-reset (POR) and will not be cleared\n    // by a WD reset\n    //\n    DevCfgRegs.SYSDBGCTL.bit.BIT_0 = 1;\n\n    //\n    // Enable PLLSYSCLK is fed from system PLL clock\n    //\n    ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 1;\n\n    //\n    // Delay to ensure system is clocking from PLL prior to clearing status bit\n    //\n    asm(\" RPT #20 || NOP\");\n\n    //\n    // Service watchdog\n    //\n    ServiceDog();\n\n    //\n    // Slip Bit Monitor and SYSCLK Frequency Check using timers\n    // Re-lock routine for SLIP condition or if SYSCLK and CLKSRC timer counts\n    // are off by +/- 10%.\n    // At a minimum, SYSCLK check is performed.  Re lock attempt is carried out\n    // if SLIPS bit is set. This while loop is monitored by watchdog.\n    // In the event that the PLL does not successfully lock, the loop will be\n    // aborted by watchdog reset.\n    //\n    EALLOW;\n    while(sysclkInvalidFreq == true)\n    {\n        if(ClkCfgRegs.SYSPLLSTS.bit.SLIPS == 1)\n        {\n            //\n            // Bypass PLL\n            //\n            ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 0;\n\n            //\n            // Delay of at least 120 OSCCLK cycles required post PLL bypass\n            //\n            asm(\" RPT #120 || NOP\");\n\n            //\n            // Turn off PLL\n            //\n            ClkCfgRegs.SYSPLLCTL1.bit.PLLEN = 0;\n            asm(\" RPT #20 || NOP\");\n\n            //\n            // Write multipliers, which automatically turns on the PLL\n            //\n            ClkCfgRegs.SYSPLLMULT.all = ((fmult << 8U) | imult);\n\n            //\n            // Wait for the SYSPLL lock counter to expire\n            //\n            while(ClkCfgRegs.SYSPLLSTS.bit.LOCKS != 1);\n\n            //\n            // Enable PLLSYSCLK is fed from system PLL clock\n            //\n            ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 1;\n\n            //\n            // Delay to ensure system is clocking from PLL\n            //\n            asm(\" RPT #20 || NOP\");\n        }\n\n        //\n        // Backup timer1 and timer2 settings\n        //\n        t1TCR = CpuTimer1Regs.TCR.all;\n        t1PRD = CpuTimer1Regs.PRD.all;\n        t1TPR = CpuTimer1Regs.TPR.all;\n        t1TPRH = CpuTimer1Regs.TPRH.all;\n        t2SRC = CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKSRCSEL;\n        t2Prescale = CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKPRESCALE;\n        t2TCR = CpuTimer2Regs.TCR.all;\n        t2PRD = CpuTimer2Regs.PRD.all;\n        t2TPR = CpuTimer2Regs.TPR.all;\n        t2TPRH = CpuTimer2Regs.TPRH.all;\n\n        //\n        // Set up timers 1 and 2\n        // Configure timer1 to count SYSCLK cycles\n        //\n        CpuTimer1Regs.TCR.bit.TSS = 1;                                    // stop timer1\n        CpuTimer1Regs.PRD.all = TMR1SYSCLKCTR;                            // seed timer1 counter\n        CpuTimer1Regs.TPR.bit.TDDR = 0x0;                                 // sysclock divider\n        CpuTimer1Regs.TCR.bit.TRB = 1;                                    // reload timer with value in PRD\n        CpuTimer1Regs.TCR.bit.TIF = 1;                                    // clear interrupt flag\n        CpuTimer1Regs.TCR.bit.TIE = 1;                                    // enable interrupt\n\n        //\n        // Configure timer2 to count Input clock cycles\n        //\n        switch(clock_source)\n        {\n            case INT_OSC1:\n                // Clk Src = INT_OSC1\n                CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKSRCSEL = 0x1;\n                break;\n            case INT_OSC2:\n                // Clk Src = INT_OSC2\n                CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKSRCSEL = 0x2;\n                break;\n            case XTAL_OSC:\n                // Clk Src = XTAL\n                CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKSRCSEL = 0x3;\n                break;\n\n        }\n        CpuTimer2Regs.TCR.bit.TIF = 1;                                    // clear interrupt flag\n        CpuTimer2Regs.TCR.bit.TIE = 1;                                    // enable interrupt\n        CpuTimer2Regs.TCR.bit.TSS = 1;                                    // stop timer2\n        CpuTimer2Regs.PRD.all = TMR2INPCLKCTR;                            // seed timer2 counter\n        CpuTimer2Regs.TPR.bit.TDDR = 0x0;                                 // sysclock divider\n        CpuTimer2Regs.TCR.bit.TRB = 1;                                    // reload timer with value in PRD\n\n        //\n        // Stop/Start timer counters\n        //\n        CpuTimer1Regs.TCR.bit.TSS = 1;                                    // stop timer1\n        CpuTimer2Regs.TCR.bit.TSS = 1;                                    // stop timer2\n        CpuTimer1Regs.TCR.bit.TRB = 1;                                    // reload timer1 with value in PRD\n        CpuTimer2Regs.TCR.bit.TRB = 1;                                    // reload timer2 with value in PRD\n        CpuTimer2Regs.TCR.bit.TIF = 1;                                    // clear timer2 interrupt flag\n        CpuTimer2Regs.TCR.bit.TSS = 0;                                    // start timer2\n        CpuTimer1Regs.TCR.bit.TSS = 0;                                    // start timer1\n\n        //\n        // Stop timers if either timer1 or timer2 counters overflow\n        //\n        while((CpuTimer2Regs.TCR.bit.TIF == 0) && (CpuTimer1Regs.TCR.bit.TIF == 0));\n\n        CpuTimer1Regs.TCR.bit.TSS = 1;                                    // stop timer1\n        CpuTimer2Regs.TCR.bit.TSS = 1;                                    // stop timer2\n\n        //\n        // Calculate elapsed counts on timer1\n        //\n        ctr1 = TMR1SYSCLKCTR - CpuTimer1Regs.TIM.all;\n\n        //\n        // Restore timer settings\n        //\n        CpuTimer1Regs.TCR.all = t1TCR;\n        CpuTimer1Regs.PRD.all = t1PRD;\n        CpuTimer1Regs.TPR.all = t1TPR;\n        CpuTimer1Regs.TPRH.all = t1TPRH;\n        CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKSRCSEL = t2SRC;\n        CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKPRESCALE = t2Prescale;\n        CpuTimer2Regs.TCR.all = t2TCR;\n        CpuTimer2Regs.PRD.all = t2PRD;\n        CpuTimer2Regs.TPR.all = t2TPR;\n        CpuTimer2Regs.TPRH.all = t2TPRH;\n\n        //\n        // Calculate Clock Error:\n        // Error = (mult/div) - (timer1 count/timer2 count)\n        //\n        mult = (float)(imult) + (float)(fmult)/4;\n        div = (float)((!ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV) ? 1 : (ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV << 1));\n\n        sysclkToInClkError = (mult/div) - ((float)ctr1/(float)TMR2INPCLKCTR);\n\n        //\n        // sysclkInvalidFreq will be set to true if sysclkToInClkError is off by 10%\n        //\n        sysclkInvalidFreq = ((sysclkToInClkError > 0.10) || (sysclkToInClkError < -0.10));\n    }\n\n    //\n    // Clear bit\n    //\n    DevCfgRegs.SYSDBGCTL.bit.BIT_0 = 0;\n\n    //\n    // Restore user watchdog, first resetting counter\n    //\n    WdRegs.WDKEY.bit.WDKEY = 0x55;\n    WdRegs.WDKEY.bit.WDKEY = 0xAA;\n\n    WDCR |= 0x28;                     // Setup WD key--KEY bits always read 0\n    WdRegs.WDCR.all = WDCR;\n    WdRegs.WDWCR.all = WDWCR;\n    WdRegs.SCSR.all = SCSR & 0xFFFE;  // Mask write to bit 0 (W1toClr)\n\n    //\n    // Restore state of ST1[INTM]. This was set by the __disable_interrupts()\n    // intrinsic previously.\n    //\n    if(!(intStatus & 0x1))\n    {\n        EINT;\n    }\n\n    //\n    // Restore state of ST1[DBGM]. This was set by the __disable_interrupts()\n    // intrinsic previously.\n    //\n    if(!(intStatus & 0x2))\n    {\n        asm(\" CLRC DBGM\");\n    }\n\n    //\n    // 200 PLLSYSCLK delay to allow voltage regulator to stabilize prior\n    // to increasing entire system clock frequency.\n    //\n    asm(\" RPT #200 || NOP\");\n\n    //\n    // Set the divider to user value\n    //\n    ClkCfgRegs.SYSCLKDIVSEL.bit.PLLSYSCLKDIV = divsel;\n\n    EDIS;\n}\n#endif // CPU1\n\n//\n// InitAuxPll - This function initializes the AUXPLL registers.\n//\n// Note: For this function to properly detect PLL startup,\n// SYSCLK >= 2*AUXPLLCLK after the AUXPLL is selected as the clocking source.\n//\n// This function will use CPU Timer 2 to monitor a successful lock of the\n// AUXPLL.\n//\nvoid InitAuxPll(Uint16 clock_source, Uint16 imult, Uint16 fmult, Uint16 divsel)\n{\n    Uint16 i;\n    Uint16 counter = 0;\n    Uint16 started = 0;\n    Uint16 t2TCR, t2TPR, t2TPRH, t2SRC, t2Prescale, attempts;\n    Uint32 t2PRD;\n\n    if((clock_source == ClkCfgRegs.CLKSRCCTL2.bit.AUXOSCCLKSRCSEL) &&\n       (imult        == ClkCfgRegs.AUXPLLMULT.bit.IMULT)           &&\n       (fmult        == ClkCfgRegs.AUXPLLMULT.bit.FMULT)           &&\n       (divsel       == ClkCfgRegs.AUXCLKDIVSEL.bit.AUXPLLDIV))\n    {\n        //\n        // Everything is set as required, so just return\n        //\n        return;\n    }\n\n    switch (clock_source)\n    {\n        case INT_OSC2:\n            AuxIntOsc2Sel();\n            break;\n\n        case XTAL_OSC:\n            AuxXtalOscSel();\n            break;\n\n        case AUXCLKIN:\n            AuxAuxClkSel();\n            break;\n    }\n\n    EALLOW;\n    ClkCfgRegs.AUXPLLCTL1.bit.PLLCLKEN = 0;    // Bypass AUXPLL\n    EDIS;\n\n    //\n    // Delay of at least 120 OSCCLK cycles required post PLL bypass\n    //\n    asm(\" RPT #120 || NOP\");\n\n    //\n    // Backup Timer 2 settings\n    //\n    t2SRC = CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKSRCSEL;\n    t2Prescale = CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKPRESCALE;\n    t2TCR = CpuTimer2Regs.TCR.all;\n    t2PRD = CpuTimer2Regs.PRD.all;\n    t2TPR = CpuTimer2Regs.TPR.all;\n    t2TPRH = CpuTimer2Regs.TPRH.all;\n\n    //\n    // Configure Timer 2 for AUXPLL as source in known configuration\n    //\n    EALLOW;\n    CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKSRCSEL = 0x6;\n    CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKPRESCALE = 0x0;    // Divide by 1\n\n    CpuTimer2Regs.TCR.bit.TSS = 1;      // Stop timer\n    CpuTimer2Regs.PRD.all = 10;         // Small PRD value to detect overflow\n    CpuTimer2Regs.TPR.all = 0;\n    CpuTimer2Regs.TPRH.all = 0;\n    CpuTimer2Regs.TCR.bit.TIE = 0;      // Disable timer interrupts\n\n    //\n    // Set AUX Divide by 8 to ensure that AUXPLLCLK <= SYSCLK/2 while using\n    // Timer 2\n    //\n    ClkCfgRegs.AUXCLKDIVSEL.bit.AUXPLLDIV = 0x3;\n    EDIS;\n\n    while((counter < 5) && (started == 0))\n    {\n        EALLOW;\n        ClkCfgRegs.AUXPLLCTL1.bit.PLLEN = 0;    // Turn off AUXPLL\n        asm(\" RPT #20 || NOP\");                 // Small delay for power down\n\n        //\n        // Set integer and fractional multiplier, which automatically turns on\n        // the PLL\n        //\n        ClkCfgRegs.AUXPLLMULT.all = ((fmult << 8U) | imult);\n\n        //\n        // Enable AUXPLL\n        //\n        ClkCfgRegs.AUXPLLCTL1.bit.PLLEN = 1;\n        EDIS;\n\n        //\n        // Wait for the AUXPLL lock counter\n        //\n        while(ClkCfgRegs.AUXPLLSTS.bit.LOCKS != 1)\n        {\n            //\n            // Uncomment to service the watchdog\n            //\n            // ServiceDog();\n        }\n\n        //\n        // Enable AUXPLLCLK to be fed from AUX PLL\n        //\n        EALLOW;\n        ClkCfgRegs.AUXPLLCTL1.bit.PLLCLKEN = 1;\n        asm(\" RPT #20 || NOP\");\n\n        //\n        // CPU Timer 2 will now be setup to be clocked from AUXPLLCLK. This is\n        // used to test that the PLL has successfully started.\n        //\n        CpuTimer2Regs.TCR.bit.TRB = 1;      // Reload period value\n        CpuTimer2Regs.TCR.bit.TSS = 0;      // Start Timer\n\n        //\n        // Check to see timer is counting properly\n        //\n        for(i = 0; i < 1000; i++)\n        {\n            //\n            // Check overflow flag\n            //\n            if(CpuTimer2Regs.TCR.bit.TIF)\n            {\n                //\n                // Clear overflow flag\n                //\n                CpuTimer2Regs.TCR.bit.TIF = 1;\n\n                //\n                // Set flag to indicate PLL started and break out of for-loop\n                //\n                started = 1;\n                break;\n            }\n        }\n\n        //\n        // Stop timer\n        //\n        CpuTimer2Regs.TCR.bit.TSS = 1;\n        counter++;\n        EDIS;\n    }\n\n    if(started == 0)\n    {\n        //\n        // AUX PLL may not have started. Reset multiplier to 0 (bypass PLL).\n        //\n        EALLOW;\n        ClkCfgRegs.AUXPLLMULT.all = 0;\n        EDIS;\n\n        //\n        // The user should put some handler code here based on how this\n        // condition should be handled in their application.\n        //\n        asm(\" ESTOP0\");\n    }\n\n    //\n    // Slip Bit Monitor\n    // Re-lock routine for SLIP condition\n    //\n    attempts = 0;\n    while(ClkCfgRegs.AUXPLLSTS.bit.SLIPS && (attempts < 10))\n    {\n        EALLOW;\n        //\n        // Bypass AUXPLL\n        //\n        ClkCfgRegs.AUXPLLCTL1.bit.PLLCLKEN = 0;\n\n        //\n        // Delay of at least 120 OSCCLK cycles required post PLL bypass\n        //\n        asm(\" RPT #120 || NOP\");\n\n        //\n        // Turn off AUXPLL\n        //\n        ClkCfgRegs.AUXPLLCTL1.bit.PLLEN = 0;\n        asm(\" RPT #20 || NOP\");\n\n        //\n        // Set integer and fractional multiplier, which automatically turns\n        // on the PLL\n        //\n        ClkCfgRegs.AUXPLLMULT.all = ((fmult << 8U) | imult);\n\n        //\n        // Wait for the AUXPLL lock counter\n        //\n        while(ClkCfgRegs.AUXPLLSTS.bit.LOCKS != 1);\n\n        //\n        // Enable AUXPLLCLK to be fed from AUXPLL\n        //\n        ClkCfgRegs.AUXPLLCTL1.bit.PLLCLKEN = 1;\n        asm(\" RPT #20 || NOP\");\n\n        attempts++;\n        EDIS;\n    }\n\n    //\n    // Set divider to desired value\n    //\n    EALLOW;\n    ClkCfgRegs.AUXCLKDIVSEL.bit.AUXPLLDIV = divsel;\n\n    //\n    // Restore Timer 2 configuration\n    //\n    CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKSRCSEL = t2SRC;\n    CpuSysRegs.TMR2CLKCTL.bit.TMR2CLKPRESCALE = t2Prescale;\n    CpuTimer2Regs.TCR.all = t2TCR;\n    CpuTimer2Regs.PRD.all = t2PRD;\n    CpuTimer2Regs.TPR.all = t2TPR;\n    CpuTimer2Regs.TPRH.all = t2TPRH;\n\n    //\n    // Reload period value\n    //\n    CpuTimer2Regs.TCR.bit.TRB = 1;\n    EDIS;\n}\n\n//\n// CsmUnlock - This function unlocks the CSM. User must replace 0xFFFF's with\n//             current password for the DSP. Returns 1 if unlock is successful.\n//\nUint16 CsmUnlock(void)\n{\n    volatile Uint16 temp;\n\n    //\n    // Load the key registers with the current password. The 0xFFFF's are dummy\n    // passwords.  User should replace them with the correct password for the\n    // DSP.\n    //\n    EALLOW;\n    DcsmZ1Regs.Z1_CSMKEY0 = 0xFFFFFFFF;\n    DcsmZ1Regs.Z1_CSMKEY1 = 0xFFFFFFFF;\n    DcsmZ1Regs.Z1_CSMKEY2 = 0xFFFFFFFF;\n    DcsmZ1Regs.Z1_CSMKEY3 = 0xFFFFFFFF;\n\n    DcsmZ2Regs.Z2_CSMKEY0 = 0xFFFFFFFF;\n    DcsmZ2Regs.Z2_CSMKEY1 = 0xFFFFFFFF;\n    DcsmZ2Regs.Z2_CSMKEY2 = 0xFFFFFFFF;\n    DcsmZ2Regs.Z2_CSMKEY3 = 0xFFFFFFFF;\n    EDIS;\n\n    return(0);\n}\n\n//\n// SysIntOsc1Sel - This function switches to Internal Oscillator 1.\n//\nvoid SysIntOsc1Sel(void)\n{\n    EALLOW;\n    ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL = 2;     // Clk Src = INTOSC1\n    SYSCTRL_CLKSRCCTL1_DELAY;\n    ClkCfgRegs.CLKSRCCTL1.bit.XTALOFF=1;            // Turn off XTALOSC\n    EDIS;\n}\n\n//\n// SysIntOsc2Sel - This function switches to Internal oscillator 2.\n//\nvoid SysIntOsc2Sel(void)\n{\n    EALLOW;\n    ClkCfgRegs.CLKSRCCTL1.bit.INTOSC2OFF=0;         // Turn on INTOSC2\n    SYSCTRL_CLKSRCCTL1_DELAY;\n    ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL = 0;     // Clk Src = INTOSC2\n    SYSCTRL_CLKSRCCTL1_DELAY;\n    ClkCfgRegs.CLKSRCCTL1.bit.XTALOFF=1;            // Turn off XTALOSC\n    EDIS;\n}\n\n//\n// SysXtalOscSel - This function switches to External CRYSTAL oscillator.\n//\nvoid SysXtalOscSel(void)\n{\n    EALLOW;\n    ClkCfgRegs.CLKSRCCTL1.bit.XTALOFF=0;            // Turn on XTALOSC\n    SYSCTRL_CLKSRCCTL1_DELAY;\n    ClkCfgRegs.CLKSRCCTL1.bit.OSCCLKSRCSEL = 1;     // Clk Src = XTAL\n    EDIS;\n}\n\n//\n// AuxIntOsc2Sel - This function switches to Internal oscillator 2.\n//\nvoid AuxIntOsc2Sel(void)\n{\n    EALLOW;\n    ClkCfgRegs.CLKSRCCTL1.bit.INTOSC2OFF=0;         // Turn on INTOSC2\n    ClkCfgRegs.CLKSRCCTL2.bit.AUXOSCCLKSRCSEL = 0;  // Clk Src = INTOSC2\n    EDIS;\n}\n\n//\n// AuxXtalOscSel - This function switches to External CRYSTAL oscillator.\n//\nvoid AuxXtalOscSel(void)\n{\n    EALLOW;\n    ClkCfgRegs.CLKSRCCTL1.bit.XTALOFF=0;            // Turn on XTALOSC\n    ClkCfgRegs.CLKSRCCTL2.bit.AUXOSCCLKSRCSEL = 1;  // Clk Src = XTAL\n    EDIS;\n}\n\n//\n// AuxAUXCLKOscSel - This function switches to AUXCLKIN (from a GPIO).\n//\nvoid AuxAuxClkSel(void)\n{\n    EALLOW;\n    ClkCfgRegs.CLKSRCCTL2.bit.AUXOSCCLKSRCSEL = 2; // Clk Src = XTAL\n    EDIS;\n}\n\n//\n// IDLE - Enter IDLE mode (single CPU).\n//\nvoid IDLE(void)\n{\n    EALLOW;\n    CpuSysRegs.LPMCR.bit.LPM = LPM_IDLE;\n    EDIS;\n    asm(\" IDLE\");\n}\n\n//\n// STANDBY - Enter STANDBY mode (single CPU).\n//\nvoid STANDBY(void)\n{\n    EALLOW;\n    CpuSysRegs.LPMCR.bit.LPM = LPM_STANDBY;\n    EDIS;\n    asm(\" IDLE\");\n}\n\n//\n// HALT - Enter HALT mode (dual CPU). Puts CPU2 in IDLE mode first.\n//\nvoid HALT(void)\n{\n#if defined(CPU2)\n    IDLE();\n#elif defined(CPU1)\n    EALLOW;\n    CpuSysRegs.LPMCR.bit.LPM = LPM_HALT;\n    EDIS;\n\n    while(DevCfgRegs.LPMSTAT.bit.CPU2LPMSTAT != 0x1);\n\n    EALLOW;\n    ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 0;\n    ClkCfgRegs.SYSPLLCTL1.bit.PLLEN = 0;\n    EDIS;\n    asm(\" IDLE\");\n#endif\n}\n\n//\n// HIB - Enter HIB mode (dual CPU). Puts CPU2 in STANDBY first. Alternately,\n//       CPU2 may be in reset.\nvoid HIB(void)\n{\n#if defined(CPU2)\n    STANDBY();\n#elif defined(CPU1)\n    EALLOW;\n    CpuSysRegs.LPMCR.bit.LPM = LPM_HIB;\n    EDIS;\n\n    while((DevCfgRegs.LPMSTAT.bit.CPU2LPMSTAT == 0x0) &&\n          (DevCfgRegs.RSTSTAT.bit.CPU2RES == 1));\n\n    DisablePeripheralClocks();\n    EALLOW;\n    ClkCfgRegs.SYSPLLCTL1.bit.PLLCLKEN = 0;\n    ClkCfgRegs.SYSPLLCTL1.bit.PLLEN = 0;\n    EDIS;\n    asm(\" IDLE\");\n#endif\n}\n\n#ifdef CPU1\n//\n// Function to implement Analog trim of TMX devices. This function should be\n// called post enabling the EALLOW protected writes.\n//\nvoid ConfigureTMXAnalogTrim(void)\n{\n    //\n    // Enable ADC clock\n    //\n    CpuSysRegs.PCLKCR13.bit.ADC_A = 1;\n    CpuSysRegs.PCLKCR13.bit.ADC_B = 1;\n    CpuSysRegs.PCLKCR13.bit.ADC_C = 1;\n    CpuSysRegs.PCLKCR13.bit.ADC_D = 1;\n\n\n    //\n    // Device is not trimmed--apply static calibration values\n    //\n    AnalogSubsysRegs.ANAREFTRIMA.all = 0x7BDD;\n    AnalogSubsysRegs.ANAREFTRIMB.all = 0x7BDD;\n    AnalogSubsysRegs.ANAREFTRIMC.all = 0x7BDD;\n    AnalogSubsysRegs.ANAREFTRIMD.all = 0x7BDD;\n\n    //\n    // Configure ADC offset trim. The user should generate the trim values\n    // by following the instructions in the \"ADC Zero Offset Calibration\"\n    // section in device TRM. The below lines needs to be uncommented and\n    // updated with the correct trim values.\n    //\n//    AdcaRegs.ADCOFFTRIM.all = 0x0;\n//    AdcbRegs.ADCOFFTRIM.all = 0x0;\n//    AdccRegs.ADCOFFTRIM.all = 0x0;\n//    AdcdRegs.ADCOFFTRIM.all = 0x0;\n\n    //\n    // Configure internal oscillator trim. If the internal oscillator trim\n    // contains all zeros, the user can adjust the lowest 10 bits of the\n    // oscillator trim register between 1 (minimum) and 1023 (maximum)\n    // while observing the system clock on the XCLOCKOUT pin. The below\n    // lines needs to be uncommented and updated with the correct trim values.\n    //\n//    if(AnalogSubsysRegs.INTOSC1TRIM.all == 0x0)\n//    {\n//        AnalogSubsysRegs.INTOSC1TRIM.all = 0x0;\n//    }\n//\n//    if(AnalogSubsysRegs.INTOSC2TRIM.all == 0x0)\n//    {\n//        AnalogSubsysRegs.INTOSC2TRIM.all = 0x0;\n//    }\n\n    //\n    // Disable ADC clock\n    //\n    CpuSysRegs.PCLKCR13.bit.ADC_A = 0;\n    CpuSysRegs.PCLKCR13.bit.ADC_B = 0;\n    CpuSysRegs.PCLKCR13.bit.ADC_C = 0;\n    CpuSysRegs.PCLKCR13.bit.ADC_D = 0;\n}\n#endif\n"},{"name":"F2837xD_usDelay.asm","type":"other","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\device_support\\f2837xd\\common\\source","tag":"","groupDisplay":"Other files","code":";//###########################################################################\n;//\n;// FILE: F2837xD_usDelay.asm\n;//\n;// TITLE: Simple delay function\n;//\n;// DESCRIPTION:\n;// This is a simple delay function that can be used to insert a specified\n;// delay into code.\n;// This function is only accurate if executed from internal zero-waitstate\n;// SARAM. If it is executed from waitstate memory then the delay will be\n;// longer then specified.\n;// To use this function:\n;//  1 - update the CPU clock speed in the F2837xD_Examples.h\n;//    file. For example:\n;//    #define CPU_RATE 6.667L // for a 150MHz CPU clock speed\n;//  2 - Call this function by using the DELAY_US(A) macro\n;//    that is defined in the F2837xD_Device.h file.  This macro\n;//    will convert the number of microseconds specified\n;//    into a loop count for use with this function.\n;//    This count will be based on the CPU frequency you specify.\n;//  3 - For the most accurate delay\n;//    - Execute this function in 0 waitstate RAM.\n;//    - Disable interrupts before calling the function\n;//      If you do not disable interrupts, then think of\n;//      this as an \"at least\" delay function as the actual\n;//      delay may be longer.\n;//  The C assembly call from the DELAY_US(time) macro will\n;//  look as follows:\n;//  extern void Delay(long LoopCount);\n;//        MOV   AL,#LowLoopCount\n;//        MOV   AH,#HighLoopCount\n;//        LCR   _Delay\n;//  Or as follows (if count is less then 16-bits):\n;//        MOV   ACC,#LoopCount\n;//        LCR   _Delay\n;//\n;//###########################################################################\n;//\n;// $Release Date: $\n;// $Copyright:\n;// Copyright (C) 2013-2024 Texas Instruments Incorporated - http://www.ti.com/\n;//\n;// Redistribution and use in source and binary forms, with or without \n;// modification, are permitted provided that the following conditions \n;// are met:\n;// \n;//   Redistributions of source code must retain the above copyright \n;//   notice, this list of conditions and the following disclaimer.\n;// \n;//   Redistributions in binary form must reproduce the above copyright\n;//   notice, this list of conditions and the following disclaimer in the \n;//   documentation and/or other materials provided with the   \n;//   distribution.\n;// \n;//   Neither the name of Texas Instruments Incorporated nor the names of\n;//   its contributors may be used to endorse or promote products derived\n;//   from this software without specific prior written permission.\n;// \n;// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n;// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n;// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n;// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n;// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n;// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n;// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n;// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n;// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n;// $\n;//###########################################################################\n\n\t   .if __TI_EABI__\n\t   .asg F28x_usDelay, _F28x_usDelay\n\t   .endif\n\n       .def _F28x_usDelay\n\n       .cdecls LIST ;;Used to populate __TI_COMPILER_VERSION__ macro\n       %{\n       %}\n\n       .if __TI_COMPILER_VERSION__\n       .if __TI_COMPILER_VERSION__ >= 15009000\n       .sect \".TI.ramfunc\"      ;;Used with compiler v15.9.0 and newer\n       .else\n       .sect \"ramfuncs\"         ;;Used with compilers older than v15.9.0\n       .endif\n       .endif\n\n        .global  __F28x_usDelay\n_F28x_usDelay:\n        SUB    ACC,#1\n        BF     _F28x_usDelay,GEQ    ;; Loop if ACC >= 0\n        LRETR\n\n;There is a 9/10 cycle overhead and each loop\n;takes five cycles. The LoopCount is given by\n;the following formula:\n;  DELAY_CPU_CYCLES = 9 + 5*LoopCount\n; LoopCount = (DELAY_CPU_CYCLES - 9) / 5\n; The macro DELAY_US(A) performs this calculation for you\n;\n;\n\n;//\n;// End of file\n;//\n"},{"name":"MW_c2000ISR.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2024b\\toolbox\\c2b\\tic2000\\src","tag":"","groupDisplay":"Other files","code":"/* Copyright 2021-2023 The MathWorks, Inc. */\n\n#include \"MW_target_hardware_resources.h\"\n#include \"MW_c2000ISR.h\"\n#include \"MW_ipc_helper.h\"\n\n#define CIPC0_IRQNUM 132\n#define CMTOCPUxIPCINTR0_IRQNUM 208\n\nvoid HWI_TIC28x_ConfigureIRQ(uint16_T irqnumber, void (*isrfcn)(void), uint16_T priority)\n{\n    #if (defined(MW_F2838X) || defined(MW_F2837XD) || defined(MW_F28P65X)) && defined(CPU1)\n            /* For 38x, 37x, p65 CPU1*/\n            if (irqnumber == CIPC0_IRQNUM)\n                CIPC0_INT_fptr = isrfcn;\n        #if defined(MW_F2838X)\n            /* For 38x CPU1*/\n            else if (irqnumber == CMTOCPUxIPCINTR0_IRQNUM)\n                CMTOCPUXIPC0_INT_fptr = isrfcn;\n        #endif\n            /* For 38x, 37x, p65 CPU1 non IPC0 */\n            else\n            {\n                EALLOW;\n                ((PINT *)&PieVectTable)[irqnumber] = isrfcn; /* Map ISR to vector table */\n                EDIS;\n            }\n    #else \n            /* For 38x, 37x, p65 non CPU1 or for non 38x, 37x, p65 */\n            EALLOW;\n            ((PINT *)&PieVectTable)[irqnumber] = isrfcn; /* Map ISR to vector table */\n            EDIS;\n    #endif\n\n    (void)priority;\n}\n\nvoid HWI_TIC28x_EnableIRQ(uint16_T irqnumber)\n{\n    /* Interrupt groups */\n    if ((1 == irqnumber) \n    ||  (1 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER1.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((2 == irqnumber) \n    || (2 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER2.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((3 == irqnumber)\n    ||  (3 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER3.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((4 == irqnumber)\n    ||  (4 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER4.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((5 == irqnumber)\n    ||  (5 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER5.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((6 == irqnumber)\n    ||  (6 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER6.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((7 == irqnumber)\n    ||  (7 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER7.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((8 == irqnumber)\n    ||  (8 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER8.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((9 == irqnumber)\n    ||  (9 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER9.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((10 == irqnumber)\n    ||  (10 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER10.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((11 == irqnumber)\n    ||  (11 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER11.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((12 == irqnumber)\n    ||  (12 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER12.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    /* CPU Timer 1 */\n    else if (13 == irqnumber)\n    {\n    }\n    /* CPU Timer 2 */\n    else if (14 == irqnumber)\n    {\n    }\n    /* DATALOG */\n    else if (15 == irqnumber)\n    {\n    }\n    /* RTOSINT */\n    else if (16 == irqnumber)\n    {\n    }\n    /* EMUINT */\n    else if (17 == irqnumber)\n    {\n    }\n    /* NMI */\n    else if (18 == irqnumber)\n    {\n    }\n    /* 18 - ILLEGAL, 20 to 31 - User-defined trap */\n    else if ((irqnumber >= 19) && (irqnumber <= 31))\n    {\n    }\n    else\n    {\n        /* do nothing */\n    }\n}\n\nvoid HWI_TIC28x_DisableIRQ(uint16_T irqnumber)\n{\n    /* Interrupt groups */\n    if ((1 == irqnumber) \n    ||  (1 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER1.all &= ~(1U << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((2 == irqnumber) \n    || (2 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER2.all &= ~(1U << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((3 == irqnumber)\n    ||  (3 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER3.all &= ~(1U << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((4 == irqnumber)\n    ||  (4 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER4.all &= ~(1U << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((5 == irqnumber)\n    ||  (5 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER5.all &= ~(1U << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((6 == irqnumber)\n    ||  (6 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER6.all &= ~(1U << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER |= (0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((7 == irqnumber)\n    ||  (7 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER7.all &= ~(1U << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((8 == irqnumber)\n    ||  (8 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER8.all &= ~(1 << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((9 == irqnumber)\n    ||  (9 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER9.all &= ~(1U << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((10 == irqnumber)\n    ||  (10 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER10.all &= ~(1U << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((11 == irqnumber)\n    ||  (11 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER11.all &= ~(1U << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    else if ((12 == irqnumber)\n    ||  (12 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIER12.all &= ~(1 << GET_PIE_OFFSET_IN_GROUP(irqnumber));\n        IER &= ~(0x1U << GET_PIE_GROUP(irqnumber));\n    }\n    /* CPU Timer 1 */\n    else if (13 == irqnumber)\n    {\n    }\n    /* CPU Timer 2 */\n    else if (14 == irqnumber)\n    {\n    }\n    /* DATALOG */\n    else if (15 == irqnumber)\n    {\n    }\n    /* RTOSINT */\n    else if (16 == irqnumber)\n    {\n    }\n    /* EMUINT */\n    else if (17 == irqnumber)\n    {\n    }\n    /* NMI */\n    else if (18 == irqnumber)\n    {\n    }\n    /* 18 - ILLEGAL, 20 to 31 - User-defined trap */\n    else if ((irqnumber >= 19) && (irqnumber <= 31))\n    {\n    }\n    else\n    {\n        /* do nothing */\n    }\n}\nvoid HWI_TIC28x_EnablePendingIRQ(uint16_T irqnumber)\n{\n    /* Interrupt groups */\n    if ((1 == irqnumber) \n    ||  (1 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR1.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((2 == irqnumber) \n    || (2 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR2.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((3 == irqnumber)\n    ||  (3 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR3.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((4 == irqnumber)\n    ||  (4 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR4.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((5 == irqnumber)\n    ||  (5 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR5.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((6 == irqnumber)\n    ||  (6 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR6.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((7 == irqnumber)\n    ||  (7 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR7.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((8 == irqnumber)\n    ||  (8 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR8.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((9 == irqnumber)\n    ||  (9 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR9.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((10 == irqnumber)\n    ||  (10 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR10.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((11 == irqnumber)\n    ||  (11 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR11.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    else if ((12 == irqnumber)\n    ||  (12 == GET_PIE_GROUP(irqnumber)+1))\n    {\n        /* Enable PIE interrupt */\n        PieCtrlRegs.PIEIFR12.all |= 1 << GET_PIE_OFFSET_IN_GROUP(irqnumber);\n        asm(\" RPT #1 || NOP\");               /*wait 1 cycles        */\n    }\n    /* CPU Timer 1 */\n    else if (13 == irqnumber)\n    {\n    }\n    /* CPU Timer 2 */\n    else if (14 == irqnumber)\n    {\n    }\n    /* DATALOG */\n    else if (15 == irqnumber)\n    {\n    }\n    /* RTOSINT */\n    else if (16 == irqnumber)\n    {\n    }\n    /* EMUINT */\n    else if (17 == irqnumber)\n    {\n    }\n    /* NMI */\n    else if (18 == irqnumber)\n    {\n    }\n    /* 18 - ILLEGAL, 20 to 31 - User-defined trap */\n    else if ((irqnumber >= 19) && (irqnumber <= 31))\n    {\n    }\n    else\n    {\n        /* do nothing */\n    }\n}\n\nvoid HWI_TIC28x_AcknowledgeIrq(uint16_T irqnumber)\n{\n    /* Acknowledge Corresponding PIE Interrupt groups */\n    uint16_T intrgrp = GET_PIE_GROUP(irqnumber)+1;\n\n    if ((irqnumber>=1 && irqnumber<=12) || (intrgrp>=1 && intrgrp <=12))\n    {\n        PieCtrlRegs.PIEACK.all = 1 << (intrgrp-1);\n    }\n}\n"},{"name":"MW_c28xGPIO.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2024b\\toolbox\\c2b\\tic2000_shared\\src","tag":"","groupDisplay":"Other files","code":"/*####################################################\n * FILE: MW_c28xGPIO.c\n * TITLE: GPIO functions to access the GPIO specific registers for C2000 target\n * Copyright 2017-2024 The MathWorks, Inc.\n * ####################################################*/\n\n/* ***************************************************************************/\n/* the includes */\n\n#include \"MW_c28xGPIO.h\"\n#ifdef CPU2\n#ifdef MW_F2837XD\n#include \"MW_f2837xD_includes.h\"\n#endif //MW_F2837XD\n#ifdef MW_F2838X\n#include \"MW_f2838x_includes.h\"\n#endif //MW_F2838X\n#ifdef MW_F28P65X\n#include \"MW_f28p65x_includes.h\"\n#endif //MW_F28P65X\n#endif //CPU2\n\n/* ***************************************************************************/\n/* the defines */\n\n/* ***************************************************************************/\n/* the globals */\n\nUint16 GPIO_oneTimeInit = 0;\n\n/* ***************************************************************************/\n/* the functions*/\nvoid InitGpio(void);\n/* One time initialization of all GPIOs */\nvoid OneTimeGpioInit(void)\n{    \n    if(GPIO_oneTimeInit == 0U)\n    {\n#ifdef CPU1\n        InitGpio();\n#endif //End of CPU1\n        GPIO_oneTimeInit = 1U;\n    }\n}\n\n#ifndef MW_F281X /*GPIO implementation not supported for C281x */\n#ifndef F2837X_REG_FORMAT /*GPIO functions are provided by TI*/\n#ifndef MW_F2804X /*GPIO initialization is provided by TI for F2804x*/\n\n/*Sets all pins to be muxed to GPIO in input mode with pull-ups enabled.\n * Also sets the qualification to synchronous.*/\nvoid InitGpio(void)\n{\n    volatile Uint32 *gpioBaseAddr;\n    Uint16 regOffset;\n    EALLOW;\n    /*Fill all registers with zeros. Writing to each register separately\n     * for all GPIO modules would make this function *very* long. Fortunately,\n     * we'd be writing them all with zeros anyway, so this saves a lot of space.*/\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs;\n    for (regOffset = 0U; regOffset < sizeof(GpioCtrlRegs)/2; regOffset++)\n    {\n        /*Hack to avoid enabling pull-ups on all pins. GPyPUD is offset\n         * 0x0C in each register group of 0x40 words. Since this is a\n         * 32-bit pointer, the addresses must be divided by 2.*/\n        if (regOffset % (0x10/2) != (0x0C/2))\n        {\n            gpioBaseAddr[regOffset] = 0x00000000U;\n        }\n    }\n    \n    gpioBaseAddr = (Uint32 *)&GpioDataRegs;\n    for (regOffset = 0; regOffset < sizeof(GpioDataRegs)/2; regOffset++)\n    {\n        gpioBaseAddr[regOffset] = 0x00000000U;\n    }\n    \n    /* For concerto additional registers needs to be initialized*/\n    #ifdef MW_PIL_TIC2000_CONCERTO\n    /*Fill all registers with zeros. Writing to each register separately\n     * for all GPIO modules would make this function *very* long. Fortunately,\n     * we'd be writing them all with zeros anyway, so this saves a lot of space.*/\n    gpioBaseAddr = (Uint32 *)&GpioG1CtrlRegs;\n    for (regOffset = 0U; regOffset < sizeof(GpioG1CtrlRegs)/2; regOffset++)\n    {\n        /*Hack to avoid enabling pull-ups on all pins. GPyPUD is offset\n         * 0x0C in each register group of 0x40 words. Since this is a\n         * 32-bit pointer, the addresses must be divided by 2.*/\n        if (regOffset % (0x10/2) != (0x0C/2))\n        {\n            gpioBaseAddr[regOffset] = 0x00000000U;\n        }\n    }\n    \n    gpioBaseAddr = (Uint32 *)&GpioG1DataRegs;\n    for (regOffset = 0U; regOffset < sizeof(GpioG1DataRegs)/2; regOffset++)\n    {\n        gpioBaseAddr[regOffset] = 0x00000000U;\n    }\n    #endif //End of MW_PIL_TIC2000_CONCERTO\n    EDIS;\n}\n#endif // End of MW_F2804X\n\n/*Set the peripheral muxing for the specified pin.\n * The appropriate parameters can be found in the GPIO Muxed Pins table.\n * Use the GPIO index row (0 to 4) to select a muxing option for the GPIO.*/\nvoid GPIO_SetupPinMux(Uint16 pin, Uint16 cpu, Uint16 peripheral)\n{\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *mux;\n    Uint16 pin32, pin16;\n    \n    pin32 = pin % 32;\n    pin16 = pin % 16;\n    #ifdef MW_PIL_TIC2000_CONCERTO\n    if (pin >= 128U)\n    {\n        #ifdef F28M36x_DEVICE_H\n        if (pin <= 135U)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs;\n        }\n        else if (pin >=192U && pin <= 199U)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x1080/2);\n        }\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        if (pin <= 135U)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x1000/2);\n        }\n        #endif //End of F28M35x_DEVICE_H\n    }\n    else\n    {\n        #ifdef F28M36x_DEVICE_H\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x80/2) + (pin/32)*GPY_CTRL_OFFSET;\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (pin/32)*GPY_CTRL_OFFSET;\n        #endif //End of F28M35x_DEVICE_H\n    }\n    #else\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (pin/32)*GPY_CTRL_OFFSET;\n    #endif // End of MW_PIL_TIC2000_CONCERTO\n    \n    /*Sanity check for valid peripheral values*/\n    if (peripheral > 0x4)\n    {\n        return;\n    }\n    /*Create pointers to the appropriate registers. This is a workaround\n     * for the way GPIO registers are defined. The standard definition\n     * in the header file makes it very easy to do named accesses of one\n     * register or bit, but hard to do arbitrary numerical accesses. It's\n     * easier to have an array of GPIO modules with identical registers,\n     * including arrays for multi-register groups like GPyCSEL1-4. But\n     * the header file doesn't define anything we can turn into an array,\n     * so manual pointer arithmetic is used instead.*/\n    mux = gpioBaseAddr + GPYMUX + pin32/16;\n    \n    //Now for the actual function\n    EALLOW;\n    \n    /* Unfortunately, since we don't know the pin in\n     * advance we can't hardcode a bitfield reference, so there's some tricky\n     * bit twiddling here.*/\n    *mux &= ~(0x3UL << (2*pin16));\n    *mux |= (Uint32)(peripheral & 0x3UL) << (2*pin16);\n    \n    //WARNING: This code does not touch the analog mode select registers,\n    //which are needed to give the USB module control of its IOs.\n    EDIS;\n}\n\n/*Setup up the GPIO input/output options for the specified pin.\n * The flags are a 16-bit mask produced by ORing together options.\n * For input pins, the valid flags are:\n * GPIO_PULLUP    Enable pull-up\n * GPIO_SYNC        Synchronize the input latch to PLLSYSCLK (default -- you don't need to specify this)\n * GPIO_QUAL3    Use 3-sample qualification\n * GPIO_QUAL6    Use 6-sample qualification\n * GPIO_ASYNC    Do not use synchronization or qualification\n * (Note: only one of SYNC, QUAL3, QUAL6, or ASYNC is allowed)\n * For output pins, the valid flags are:\n * GPIO_PULLUP        If open drain enabled, also enable the pull-up\n * and the input qualification flags (SYNC/QUAL3/QUAL6/SYNC) listed above.\n * With no flags, the default input state is synchronous with no pull-up or polarity inversion.\n * The default output state is the standard digital output.*/\nvoid GPIO_SetupPinOptions(Uint16 pin, Uint16 output, Uint16 flags)\n{\n    {\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *dir, *pud, *qsel;\n    Uint32 pin32, pin16, pinMask, qual;\n    \n    pin32 = pin % 32;\n    pin16 = pin % 16;\n    pinMask = 1UL << pin32;\n    #ifdef MW_PIL_TIC2000_CONCERTO\n    if (pin >= 128U)\n    {\n        #ifdef F28M36x_DEVICE_H\n        if (pin <= 135U)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs;\n        }\n        else if (pin >=192U && pin <= 199U)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x1080/2);\n        }\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        if (pin <= 135U)\n        {\n            gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x1000/2);\n        }\n        #endif //End of F28M35x_DEVICE_H\n    }\n    else\n    {\n        #ifdef F28M36x_DEVICE_H\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (0x80/2) + (pin/32)*GPY_CTRL_OFFSET;\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (pin/32)*GPY_CTRL_OFFSET;\n        #endif //End of F28M35x_DEVICE_H\n    }\n    #else\n    gpioBaseAddr = (Uint32 *)&GpioCtrlRegs + (pin/32)*GPY_CTRL_OFFSET;\n    #endif // End of MW_PIL_TIC2000_CONCERTO\n    \n    /*Create pointers to the appropriate registers. This is a workaround\n     * for the way GPIO registers are defined. The standard definition\n     * in the header file makes it very easy to do named accesses of one\n     * register or bit, but hard to do arbitrary numerical accesses. It's\n     * easier to have an array of GPIO modules with identical registers,\n     * including arrays for multi-register groups like GPyQSEL1-2. But\n     * the header file doesn't define anything we can turn into an array,\n     * so manual pointer arithmetic is used instead.*/\n    dir = gpioBaseAddr + GPYDIR;\n    pud = gpioBaseAddr + GPYPUD;\n    qsel = gpioBaseAddr + GPYQSEL + pin32/16;\n    \n    EALLOW;\n    \n    /*Set the data direction*/\n    *dir &= ~pinMask;\n    if (output == 1U)\n    {\n        /*Output, with optional open drain mode and pull-up*/\n        *dir |= pinMask;\n        \n        /*Enable pull-up if necessary. Open drain mode must be active.*/\n        if (flags & GPIO_PULLUP){\n            *pud &= ~pinMask;\n        }\n        else{\n            *pud |= pinMask;\n        }\n    } else\n    {\n        /*Input, with optional pull-up, qualification, and polarity inversion*/\n        *dir &= ~pinMask;\n        \n        /*Enable pull-up if necessary*/\n        if (flags & GPIO_PULLUP){\n            *pud &= ~pinMask;\n        }\n        else{\n            *pud |= pinMask;\n        }\n    }\n    \n    /*Extract the qualification parameter and load it into the register. This is\n     * also needed for open drain outputs, so we might as well do it all the time.*/\n    qual = (flags & GPIO_ASYNC) / GPIO_QUAL3;\n    *qsel &= ~(0x3L << (2 * pin16));\n    if (qual != 0x0){\n        *qsel |= qual << (2 * pin16);\n    }\n    \n    EDIS;\n    }\n}\n\n/*Read the GPyDAT register bit for the specified pin.\n * Note that this returns the actual state of the pin, not the state of the output latch.*/\nUint16 GPIO_ReadPin(Uint16 pin)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint16 pinVal;\n\n    #ifdef MW_PIL_TIC2000_CONCERTO\n    if (pin >= 128U)\n    {\n        #ifdef F28M36x_DEVICE_H\n        if (pin <= 135U)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x40/2);\n        }\n        else if (pin >=192U && pin <= 199U)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x10C0/2);\n        }\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        if (pin <= 135U)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x1000/2);\n        }\n        #endif //End of F28M35x_DEVICE_H\n    }\n    else\n    {\n        #ifdef F28M36x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (0xC0/2) + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M35x_DEVICE_H\n    }\n    #else\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    #endif // End of MW_PIL_TIC2000_CONCERTO\n    pinVal = (gpioDataReg[GPYDAT] >> (pin % 32)) & 0x1;\n    \n    return pinVal;\n}\n\n/*Set the GPyDAT register bit for the specified pin.*/\nvoid GPIO_WritePin(Uint16 pin, Uint16 outVal)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint32 pinMask;\n    \n    #ifdef MW_PIL_TIC2000_CONCERTO\n    if (pin >= 128U)\n    {\n        #ifdef F28M36x_DEVICE_H\n        if (pin <= 135U)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x40/2);\n        }\n        else if (pin >=192U && pin <= 199U)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x10C0/2);\n        }\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        if (pin <= 135U)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x1000/2);\n        }\n        #endif //End of F28M35x_DEVICE_H\n    }\n    else\n    {\n        #ifdef F28M36x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (0xC0/2) + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M36x_DEVICE_H\n\n        #ifdef F28M35x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M35x_DEVICE_H\n    }\n    #else\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    #endif // End of MW_PIL_TIC2000_CONCERTO\n    pinMask = 1UL << (pin % 32);\n    \n    if (outVal == 0U){        \n        gpioDataReg[GPYCLEAR] = pinMask;\n    }\n    else{\n        gpioDataReg[GPYSET] = pinMask;\n    }\n}\n\n/*Toggle the GPyDAT register bit for the specified pin.*/\nvoid GPIO_TogglePin(Uint16 pin)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint32 pinMask;\n    \n    #ifdef MW_PIL_TIC2000_CONCERTO\n    if (pin >= 128U)\n    {\n        #ifdef F28M36x_DEVICE_H\n        if (pin <= 135U)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x40/2);\n        }\n        else if (pin >=192U && pin <= 199U)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x10C0/2);\n        }\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        if (pin <= 135U)\n        {\n            gpioDataReg = (Uint32 *)&GpioDataRegs + (0x1000/2);\n        }\n        #endif //End of F28M35x_DEVICE_H\n    }\n    else\n    {\n        #ifdef F28M36x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (0xC0/2) + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M36x_DEVICE_H\n        #ifdef F28M35x_DEVICE_H\n        gpioDataReg = (Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n        #endif //End of F28M35x_DEVICE_H\n    }\n    #else\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    #endif // End of MW_PIL_TIC2000_CONCERTO\n    pinMask = 1UL << (pin % 32);\n    \n    \n    gpioDataReg[GPYTOGGLE] = pinMask;\n\n}\n\n#else // for F2837X_REG_FORMAT\n#if defined(MW_F2838X) \n#if defined(CPU1)\n\nvoid InitGpio(void)\n{\n    volatile Uint32 *gpioBaseAddr;\n    Uint16 regOffset;\n\n    /*Disable pin locks*/\n    EALLOW;\n    GpioCtrlRegs.GPALOCK.all = 0x00000000U;\n    GpioCtrlRegs.GPBLOCK.all = 0x00000000U;\n    GpioCtrlRegs.GPCLOCK.all = 0x00000000U;\n    GpioCtrlRegs.GPDLOCK.all = 0x00000000U;\n    GpioCtrlRegs.GPELOCK.all = 0x00000000U;\n    GpioCtrlRegs.GPFLOCK.all = 0x00000000U;\n\n    /* Fill all registers with zeros. Writing to each register separately\n     * for six GPIO modules would make this function *very* long.\n     * Fortunately, we'd be writing them all with zeros anyway, so this\n     * saves a lot of space.*/\n  \n    gpioBaseAddr = (volatile Uint32 *)&GpioCtrlRegs;\n\n    for (regOffset = 0U; regOffset < sizeof(GpioCtrlRegs)/2; regOffset++)\n    {\n        /* Hack to avoid enabling pull-ups on all pins. GPyPUD is offset\n         * 0x0C in each register group of 0x40 words. Since this is a\n         * 32-bit pointer, the addresses must be divided by 2.*/\n        if (regOffset % (0x40/2) != (0x0C/2))\n        {\n            gpioBaseAddr[regOffset] = 0x00000000U;\n        }\n    }\n\n    gpioBaseAddr = (volatile Uint32 *)&GpioDataRegs;\n    for (regOffset = 0U; regOffset < sizeof(GpioDataRegs)/2; regOffset++)\n    {\n        gpioBaseAddr[regOffset] = 0x00000000U;\n    }\n\n    EDIS;\n}\n\nvoid GPIO_SetupPinMux(Uint16 gpioNumber, Uint16 cpu, Uint16 muxPosition)\n{\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *mux, *gmux, *csel;\n    Uint16 pin32, pin16, pin8;\n\n    pin32 = gpioNumber % 32;\n    pin16 = gpioNumber % 16;\n    pin8 = gpioNumber % 8;\n\n    gpioBaseAddr = (volatile Uint32 *)&GpioCtrlRegs + (gpioNumber / 32) * (GPY_CTRL_OFFSET);\n\n    /*Sanity check for valid cpu and peripheral values*/\n    if (cpu > GPIO_MUX_CM || muxPosition > 0xF)\n    {\n        return;\n    }\n    /* Create pointers to the appropriate registers. This is a workaround\n     * for the way GPIO registers are defined. The standard definition\n     * in the header file makes it very easy to do named accesses of one\n     * register or bit, but hard to do arbitrary numerical accesses. It's\n     * easier to have an array of GPIO modules with identical registers,\n     * including arrays for multi-register groups like GPyCSEL1-4. But\n     * the header file doesn't define anything we can turn into an array,\n     * so manual pointer arithmetic is used instead.*/\n    mux = gpioBaseAddr + GPYMUX + pin32/16;\n    gmux = gpioBaseAddr + GPYGMUX + pin32/16;\n    csel = gpioBaseAddr + GPYCSEL + pin32/8;\n\n    /* Now for the actual function */\n    EALLOW;\n\n    /* To change the muxing, set the peripheral mux to 0/GPIO first to avoid\n     * glitches, then change the group mux, then set the peripheral mux to\n     * its target value. Finally, set the CPU select. This procedure is\n     * described in the TRM. Unfortunately, since we don't know the pin in\n     * advance we can't hardcode a bitfield reference, so there's some\n     * tricky bit twiddling here.*/\n    *mux &= ~(0x3UL << (2*pin16));\n    *gmux &= ~(0x3UL << (2*pin16));\n    *gmux |= (Uint32)((muxPosition >> 2) & 0x3UL) << (2*pin16);\n    *mux |= (Uint32)(muxPosition & 0x3UL) << (2*pin16);\n \n    *csel &= ~((Uint32)((Uint32)0x7u << ((Uint32) (4u * (Uint32)pin8))));\n    *csel |= (Uint32)(cpu & 0x7L) << (4*pin8);\n\n    /* WARNING: This code does not touch the analog mode select registers,\n     * which are needed to give the USB module control of its IOs.*/\n    EDIS;\n}\n\nvoid GPIO_SetupPinOptions(Uint16 gpioNumber, Uint16 output, Uint16 flags)\n{\n\n    volatile Uint32 *gpioBaseAddr;\n    volatile Uint32 *dir, *pud, *inv, *odr, *qsel;\n    Uint32 pin32, pin16, pinMask, qual;\n\n    pin32 = gpioNumber % 32;\n    pin16 = gpioNumber % 16;\n    pinMask = 1UL << pin32;\n\n    gpioBaseAddr = (volatile Uint32 *)&GpioCtrlRegs + (gpioNumber / 32) * (GPY_CTRL_OFFSET);\n    \n\n    /* Create pointers to the appropriate registers. This is a workaround\n     * for the way GPIO registers are defined. The standard definition\n     * in the header file makes it very easy to do named accesses of one\n     * register or bit, but hard to do arbitrary numerical accesses. It's\n     * easier to have an array of GPIO modules with identical registers,\n     * including arrays for multi-register groups like GPyQSEL1-4. But\n     * the header file doesn't define anything we can turn into an array,\n     * so manual pointer arithmetic is used instead.*/\n    dir = gpioBaseAddr + GPYDIR;\n    pud = gpioBaseAddr + GPYPUD;\n    inv = gpioBaseAddr + GPYINV;\n    odr = gpioBaseAddr + GPYODR;\n    qsel = gpioBaseAddr + GPYQSEL + pin32/16;\n\n    EALLOW;\n\n    /*Set the data direction*/\n    *dir &= ~pinMask;\n    if (output == 1)\n    {        \n        /* Output, with optional open drain mode and pull-up */        \n        *dir |= pinMask;\n\n        /* Enable open drain if necessary */\n        if (flags & GPIO_OPENDRAIN)\n        {\n            *odr |= pinMask;\n        }\n        else\n        {\n            *odr &= ~pinMask;\n        }\n\n        /* Enable pull-up if necessary. Open drain mode must be active. */\n        if (flags & (GPIO_OPENDRAIN | GPIO_PULLUP))\n        {\n            *pud &= ~pinMask;\n        }\n        else\n        {\n            *pud |= pinMask;\n        }\n    }\n    else\n    {\n        /* Input, with optional pull-up, qualification, and polarity\n         * inversion */\n        *dir &= ~pinMask;\n\n        /* Enable pull-up if necessary */\n        if (flags & GPIO_PULLUP)\n        {\n            *pud &= ~pinMask;\n        }\n        else\n        {\n            *pud |= pinMask;\n        }\n\n        /* Invert polarity if necessary */\n        if (flags & GPIO_INVERT)\n        {\n            *inv |= pinMask;\n        }\n        else\n        {\n            *inv &= ~pinMask;\n        }\n    }\n\n    /* Extract the qualification parameter and load it into the register.\n     * This is also needed for open drain outputs, so we might as well do it\n     * all the time. */\n    qual = (flags & GPIO_ASYNC) / GPIO_QUAL3;\n    *qsel &= ~((Uint32)0x3L << (2 * (Uint32)pin16));\n    if (qual != 0x0)\n    {\n        *qsel |= qual << (2 * pin16);\n    }\n\n    EDIS;\n}\n\nvoid GPIO_EnablePullups176Pin(void)\n{\n    EALLOW;\n    GpioCtrlRegs.GPCPUD.all = ~0x80000000U;  /* GPIO 95 */\n    GpioCtrlRegs.GPDPUD.all = ~0xFFFFFFF7U;  /* GPIOs 96-127 */\n    GpioCtrlRegs.GPEPUD.all = ~0xFFFFFFDFU;  /* GPIOs 128-159 except for 133 */\n    GpioCtrlRegs.GPFPUD.all = ~0x000001FFU;  /* GPIOs 160-168 */\n    EDIS;\n}\n\nvoid GPIO_EnablePullups100Pin(void)\n{\n    EALLOW;\n    GpioCtrlRegs.GPAPUD.all = ~0xFFC003E3U;  // GPIOs 0-1, 5-9, 22-31\n    GpioCtrlRegs.GPBPUD.all = ~0x03FFF1FFU;  // GPIOs 32-40, 44-57\n    GpioCtrlRegs.GPCPUD.all = ~0xE10FBC18U;  // GPIOs 67-68, 74-77, 79-83, 93-95\n    GpioCtrlRegs.GPDPUD.all = ~0xFFFFFFF7U;  // GPIOs 96-127\n    GpioCtrlRegs.GPEPUD.all = ~0xFFFFFFFFU;  // GPIOs 128-159\n    GpioCtrlRegs.GPFPUD.all = ~0x000001FFU;  // GPIOs 160-168\n    EDIS;\n}\n\nvoid GPIO_EnableUnbondedIOPullups(void)\n{\n\t/* bits 8-10 have pin count */\n    unsigned char pin_count = ((DevCfgRegs.PARTIDL.all & 0x00000700U) >> 8U) ;\n\n\t/* 5 = 100 pin\n\t * 6 = 176 pin\n\t * 7 = 337 pin */\n    if(pin_count == 5)\n    {\n        GPIO_EnablePullups100Pin();\n    }\n    else if (pin_count == 6)\n    {\n\t\tGPIO_EnablePullups176Pin();\n    }\n    else\n    {\n\t\t/* do nothing - this is 337 pin package */\n    }\n}\n#endif // defined(CPU1)\n/*Read the GPyDAT register bit for the specified pin.\n * Note that this returns the actual state of the pin, not the state of the output latch.*/\nUint16 GPIO_ReadPin(Uint16 pin)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint16 pinVal;\n\n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    pinVal = (gpioDataReg[GPYDAT] >> (pin % 32)) & 0x1U;\n    \n    return pinVal;\n}\n\n/*Set the GPyDAT register bit for the specified pin.*/\nvoid GPIO_WritePin(Uint16 pin, Uint16 outVal)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint32 pinMask;\n    \n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + (pin/32)*GPY_DATA_OFFSET;\n    pinMask = 1UL << (pin % 32);\n    \n    if (outVal == 0U)\n    {\n        gpioDataReg[GPYCLEAR] = pinMask;\n    }\n    else\n    {\n        gpioDataReg[GPYSET] = pinMask;\n    }\n}\n\n#endif // end of defined(MW_F2838X)\n\n/*Toggle the GPyDAT register bit for the specified pin.*/\nvoid GPIO_TogglePin(Uint16 pin)\n{\n    volatile Uint32 *gpioDataReg;\n    Uint32 pinMask;    \n    gpioDataReg = (volatile Uint32 *)&GpioDataRegs + ((pin/32)*GPY_DATA_OFFSET);\n    Uint32 temp = (1UL << (pin % 32U));\n    pinMask = (Uint32)temp;\n    gpioDataReg[GPYTOGGLE] = pinMask;\n}\n#endif // end of F2837X_REG_FORMAT\n\n/*Set the GPIO pin. Set the mux values and pin options for the specified pin.\n  This function can be used for all processors except C281x. The implementation is dependant on CPU1 and CPU2*/ \nvoid Set_GPIOPin(Uint16 pin, Uint16 cpu, Uint16 peripheral, Uint16 output, Uint16 flags)\n{\n#if defined(F2837X_REG_FORMAT) && defined(CPU2)\n    Uint32 *pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n    Uint32 gpioData = 0x00000000;\n    //Sanity check for valid cpu and peripheral values\n    #ifdef MW_F28P65X\n        if (peripheral > 0xFU)\n            return;\n    #else\n        if (cpu > GPIO_MUX_CPU2CLA || peripheral > 0xFU)\n            return;\n    #endif\n    gpioData = gpioData | pin;\n    gpioData = gpioData | ((Uint32)peripheral << 8U);\n    gpioData = gpioData | ((Uint32)output << 16U);\n    gpioData = gpioData | ((Uint32)flags << 24U);\n    #ifdef MW_F2837XD\n    Uint32 ulRWord32 = 0;\n    IPCLiteLtoRFunctionCall(IPC_FLAG0, pulMsgRam[0], gpioData, IPC_FLAG31);\n    while (IPCLiteLtoRGetResult(&ulRWord32,IPC_LENGTH_32_BITS,\n            IPC_FLAG31) != STATUS_PASS)\n    {\n    }\n    #else\n     MW_IPC_sendCommand(IPC_CPU2_L_CPU1_R, (IPC_FLAG0 | IPC_FLAG31), IPC_ADDR_CORRECTION_DISABLE, IPC_FUNC_CALL, pulMsgRam[0], gpioData);\n    IPC_waitForAck(IPC_CPU2_L_CPU1_R, IPC_FLAG31);\n    IPC_getResponse(IPC_CPU2_L_CPU1_R);\n    #endif //MW_F2837XD\n#else\n    GPIO_SetupPinMux(pin, cpu, peripheral);\n    GPIO_SetupPinOptions(pin, output, flags);\n#endif // end of defined(F2837X_REG_FORMAT) && defined(CPU2)\n}\n#endif //end of MW_F281X\n    \n"},{"name":"MW_c28xGlobalInterrupts.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2024b\\toolbox\\c2b\\tic2000_shared\\src","tag":"","groupDisplay":"Other files","code":"/*####################################################\n * FILE: MW_c28xGlobalInterrupts.c\n * TITLE: Common board support functions specific for C2000 targets\n * Copyright 2020-2024 The MathWorks, Inc.\n * ####################################################*/\n\n/* ***************************************************************************/\n/* the includes */\n#include \"MW_target_hardware_resources.h\"\n\n/* ***************************************************************************/\n/* the globals */\nvolatile int16_T MW_InterruptDisableLock = 0;\n\n\n/* ***************************************************************************/\n/* the functions*/\n\n/* Global interrupt enable function */\nvoid globalInterruptEnable(void)\n{\n    if (0 == MW_InterruptDisableLock)\n    {\n        /* Enabled the interrupts only if it was enabled before */\n        __enable_interrupts(); /* Enable Global Interrupt INTM and realtime interrupt DBGM */\n        return;\n    }\n    --MW_InterruptDisableLock;\n    \n}\n\n/* Global interrupt disable function */\nvoid globalInterruptDisable(void)\n{\n    /* Disable Global Interrupt INTM using __disable_interrupts()\n     The function will return 0 if interrupt was enabled previously\n     otherwise it will return 1 if the interrupt was previously disabled*/\n    MW_InterruptDisableLock += ((__disable_interrupts()) & 0x01);\n}\n"},{"name":"MW_c28xx_adc.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Other files","code":"#include \"c2000BoardSupport.h\"\r\n#include \"MW_f2837xD_includes.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d_private.h\"\r\n\r\nvoid config_ADCB_SOC0(void)\r\n{\r\n  EALLOW;\r\n  AdcbRegs.ADCSOC0CTL.bit.CHSEL = 2U;  /* Set SOC0 channel select to ADCIN2*/\r\n  AdcbRegs.ADCSOC0CTL.bit.TRIGSEL = 5U;\r\n  AdcbRegs.ADCSOC0CTL.bit.ACQPS = (uint16_T)14.0;\r\n                               /* Set SOC0 S/H Window to 15.0 ADC Clock Cycles*/\r\n  AdcbRegs.ADCINTSEL1N2.bit.INT1E = 1U;/* Enabled/Disable ADCINT1 interrupt*/\r\n  AdcbRegs.ADCINTSEL1N2.bit.INT1SEL = 0U;/* Setup EOC0 to trigger ADCINT1*/\r\n  AdcbRegs.ADCINTSEL1N2.bit.INT1CONT = 1U;\r\n                                     /* Enable/Disable ADCINT1 Continuous mode*/\r\n  AdcbRegs.ADCINTSOCSEL1.bit.SOC0 = 0U;\r\n                                   /* SOCx No ADCINT Interrupt Trigger Select.*/\r\n  AdcbRegs.ADCOFFTRIM.bit.OFFTRIM = (uint16_T)AdcbRegs.ADCOFFTRIM.bit.OFFTRIM;/* Set Offset Error Correction Value*/\r\n  AdcbRegs.ADCCTL1.bit.INTPULSEPOS = 1U;\r\n             /* Interrupt pulse generation occurs at the end of the conversion*/\r\n  AdcbRegs.ADCSOCPRICTL.bit.SOCPRIORITY = 0U;/* All in round robin mode SOC Priority*/\r\n  EDIS;\r\n}\r\n\r\nvoid config_ADCC_SOC0(void)\r\n{\r\n  EALLOW;\r\n  AdccRegs.ADCSOC0CTL.bit.CHSEL = 2U;  /* Set SOC0 channel select to ADCIN2*/\r\n  AdccRegs.ADCSOC0CTL.bit.TRIGSEL = 5U;\r\n  AdccRegs.ADCSOC0CTL.bit.ACQPS = (uint16_T)14.0;\r\n                               /* Set SOC0 S/H Window to 15.0 ADC Clock Cycles*/\r\n  AdccRegs.ADCINTSOCSEL1.bit.SOC0 = 0U;\r\n                                   /* SOCx No ADCINT Interrupt Trigger Select.*/\r\n  AdccRegs.ADCOFFTRIM.bit.OFFTRIM = (uint16_T)AdccRegs.ADCOFFTRIM.bit.OFFTRIM;/* Set Offset Error Correction Value*/\r\n  AdccRegs.ADCCTL1.bit.INTPULSEPOS = 1U;\r\n             /* Interrupt pulse generation occurs at the end of the conversion*/\r\n  AdccRegs.ADCSOCPRICTL.bit.SOCPRIORITY = 0U;/* All in round robin mode SOC Priority*/\r\n  EDIS;\r\n}\r\n\r\nvoid InitAdcB(void)\r\n{\r\n  EALLOW;\r\n  CpuSysRegs.PCLKCR13.bit.ADC_B = 1U;\r\n  AdcbRegs.ADCCTL2.bit.PRESCALE = 8U;\r\n  AdcSetMode((uint16_T)ADC_ADCB, (uint16_T)ADC_RESOLUTION_12BIT,(uint16_T)\r\n             ADC_SIGNALMODE_SINGLE);\r\n\r\n  //power up the ADC\r\n  AdcbRegs.ADCCTL1.bit.ADCPWDNZ = 1U;\r\n\r\n  //delay for 1ms to allow ADC time to power up\r\n  DELAY_US(1000);\r\n  EDIS;\r\n}\r\n\r\nvoid InitAdcC(void)\r\n{\r\n  EALLOW;\r\n  CpuSysRegs.PCLKCR13.bit.ADC_C = 1U;\r\n  AdccRegs.ADCCTL2.bit.PRESCALE = 8U;\r\n  AdcSetMode((uint16_T)ADC_ADCC, (uint16_T)ADC_RESOLUTION_12BIT,(uint16_T)\r\n             ADC_SIGNALMODE_SINGLE);\r\n\r\n  //power up the ADC\r\n  AdccRegs.ADCCTL1.bit.ADCPWDNZ = 1U;\r\n\r\n  //delay for 1ms to allow ADC time to power up\r\n  DELAY_US(1000);\r\n  EDIS;\r\n}\r\n"},{"name":"MW_c28xx_board.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Other files","code":"#include \"c2000BoardSupport.h\"\r\n#include \"MW_f2837xD_includes.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d_private.h\"\r\n\r\nvoid init_board (void)\r\n{\r\n  DisableDog();\r\n  EALLOW;\r\n  CpuSysRegs.PCLKCR0.bit.DMA = 1U;\r\n  CpuSysRegs.PCLKCR6.bit.SD1 = 1U;\r\n  CpuSysRegs.PCLKCR6.bit.SD2 = 1U;\r\n  EDIS;\r\n\r\n#ifdef CPU1\r\n\r\n  EALLOW;\r\n\r\n  //enable pull-ups on unbonded IOs as soon as possible to reduce power consumption.\r\n  GPIO_EnableUnbondedIOPullups();\r\n  CpuSysRegs.PCLKCR13.bit.ADC_A = 1U;\r\n  CpuSysRegs.PCLKCR13.bit.ADC_B = 1U;\r\n  CpuSysRegs.PCLKCR13.bit.ADC_C = 1U;\r\n  CpuSysRegs.PCLKCR13.bit.ADC_D = 1U;\r\n\r\n  //check if device is trimmed\r\n  if (*((Uint16 *)0x5D1B6) == 0x0000U) {\r\n    //device is not trimmed, apply static calibration values\r\n    AnalogSubsysRegs.ANAREFTRIMA.all = 31709U;\r\n    AnalogSubsysRegs.ANAREFTRIMB.all = 31709U;\r\n    AnalogSubsysRegs.ANAREFTRIMC.all = 31709U;\r\n    AnalogSubsysRegs.ANAREFTRIMD.all = 31709U;\r\n  }\r\n\r\n  CpuSysRegs.PCLKCR13.bit.ADC_A = 0U;\r\n  CpuSysRegs.PCLKCR13.bit.ADC_B = 0U;\r\n  CpuSysRegs.PCLKCR13.bit.ADC_C = 0U;\r\n  CpuSysRegs.PCLKCR13.bit.ADC_D = 0U;\r\n  EDIS;\r\n  InitSysPll(XTAL_OSC,40,0,1);\r\n\r\n  //Turn on all peripherals\r\n  //InitPeripheralClocks();\r\n  EALLOW;\r\n  CpuSysRegs.PCLKCR0.bit.CPUTIMER0 = 1U;\r\n  CpuSysRegs.PCLKCR0.bit.CPUTIMER1 = 1U;\r\n  CpuSysRegs.PCLKCR0.bit.CPUTIMER2 = 1U;\r\n  CpuSysRegs.PCLKCR0.bit.HRPWM = 1U;\r\n  CpuSysRegs.PCLKCR1.bit.EMIF1 = 1U;\r\n  CpuSysRegs.PCLKCR1.bit.EMIF2 = 1U;\r\n\r\n  /* Assign all Peripherals to CPU2 */\r\n  DevCfgRegs.CPUSEL11.all = 0x0000000FU;\r\n  DevCfgRegs.CPUSEL5.all = 0x0000000FU;\r\n  DevCfgRegs.CPUSEL14.all = 0x00070000U;\r\n  DevCfgRegs.CPUSEL7.all = 0x00000003U;\r\n  DevCfgRegs.CPUSEL0.all = 0x00000FFFU;\r\n  DevCfgRegs.CPUSEL1.all = 0x0000003FU;\r\n  DevCfgRegs.CPUSEL2.all = 0x00000007U;\r\n  DevCfgRegs.CPUSEL4.all = 0x00000003U;\r\n  DevCfgRegs.CPUSEL6.all = 0x00000007U;\r\n  DevCfgRegs.CPUSEL8.all = 0x00000003U;\r\n  DevCfgRegs.CPUSEL12.all = 0x000000FFU;\r\n  EDIS;\r\n\r\n#endif                                 // #ifdef CPU1\r\n\r\n  EALLOW;\r\n\r\n  /* Configure low speed peripheral clocks */\r\n  ClkCfgRegs.LOSPCP.bit.LSPCLKDIV = 0U;\r\n  EDIS;\r\n\r\n  /* Disable and clear all CPU interrupts */\r\n  DINT;\r\n  IER = 0x0000U;\r\n  IFR = 0x0000U;\r\n  InitPieCtrl();\r\n  InitPieVectTable();\r\n  initSetGPIOIPC();\r\n  InitCpuTimers();\r\n\r\n#ifdef CPU1\r\n\r\n  EALLOW;\r\n\r\n  /* Assign used ADC modules to CPU1 */\r\n  DevCfgRegs.CPUSEL11.bit.ADC_B = 0U;\r\n  DevCfgRegs.CPUSEL11.bit.ADC_C = 0U;\r\n\r\n#ifdef MW_DAC_CHANNEL_A\r\n\r\n  DevCfgRegs.CPUSEL14.bit.DAC_A = 0U;\r\n\r\n#endif\r\n\r\n#ifdef MW_DAC_CHANNEL_B\r\n\r\n  DevCfgRegs.CPUSEL14.bit.DAC_B = 0U;\r\n\r\n#endif\r\n\r\n#ifdef MW_DAC_CHANNEL_C\r\n\r\n  DevCfgRegs.CPUSEL14.bit.DAC_C = 0U;\r\n\r\n#endif\r\n\r\n  /* Assign SDFM modules to CPU1 */\r\n#ifdef MW_SDFM_1\r\n\r\n  DevCfgRegs.CPUSEL4.bit.SD1 = 0U;\r\n\r\n#endif\r\n\r\n#ifdef MW_SDFM_2\r\n\r\n  DevCfgRegs.CPUSEL4.bit.SD2 = 0U;\r\n\r\n#endif\r\n\r\n#ifdef MW_SDFM_3\r\n\r\n  DevCfgRegs.CPUSEL4.bit.SD3 = 0U;\r\n\r\n#endif\r\n\r\n#ifdef MW_SDFM_4\r\n\r\n  DevCfgRegs.CPUSEL4.bit.SD4 = 0U;\r\n\r\n#endif\r\n\r\n  /* Assign used PWM modules to CPU1 */\r\n  DevCfgRegs.CPUSEL0.bit.EPWM1 = 0U;\r\n  DevCfgRegs.CPUSEL0.bit.EPWM2 = 0U;\r\n  DevCfgRegs.CPUSEL0.bit.EPWM3 = 0U;\r\n\r\n  /* Assign used eQEP modules to CPU1 */\r\n  DevCfgRegs.CPUSEL2.bit.EQEP1 = 0U;\r\n\r\n  /* Assign used SCI modules to CPU1 */\r\n  DevCfgRegs.CPUSEL5.bit.SCI_A = 0U;\r\n\r\n  /* Assign used SPI modules to CPU1 */\r\n#ifdef MW_SPI_A\r\n\r\n  DevCfgRegs.CPUSEL6.bit.SPI_A = 0U;\r\n\r\n#endif\r\n\r\n#ifdef MW_SPI_B\r\n\r\n  DevCfgRegs.CPUSEL6.bit.SPI_B = 0U;\r\n\r\n#endif\r\n\r\n#ifdef MW_SPI_C\r\n\r\n  DevCfgRegs.CPUSEL6.bit.SPI_C = 0U;\r\n\r\n#endif\r\n\r\n#ifdef MW_SPI_D\r\n\r\n  DevCfgRegs.CPUSEL6.bit.SPI_D = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS1_COMPH || defined MW_CMPSS1_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS1 = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS2_COMPH || defined MW_CMPSS2_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS2 = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS3_COMPH || defined MW_CMPSS3_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS3 = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS4_COMPH || defined MW_CMPSS4_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS4 = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS5_COMPH || defined MW_CMPSS5_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS5 = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS6_COMPH || defined MW_CMPSS6_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS6 = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS7_COMPH || defined MW_CMPSS7_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS7 = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS8_COMPH || defined MW_CMPSS8_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS8 = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS9_COMPH || defined MW_CMPSS9_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS9 = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS10_COMPH || defined MW_CMPSS10_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS10 = 0U;\r\n\r\n#endif\r\n\r\n#if defined MW_CMPSS11_COMPH || defined MW_CMPSS11_COMPL\r\n\r\n  DevCfgRegs.CPUSEL12.bit.CMPSS11 = 0U;\r\n\r\n#endif\r\n\r\n  EDIS;\r\n\r\n#endif                                 // #ifdef CPU1\r\n\r\n  init_SCI();\r\n  init_SCI_GPIO();\r\n  init_SCIFrame();\r\n\r\n  /* initial ePWM GPIO assignment... */\r\n  config_ePWM_GPIO();\r\n  EALLOW;\r\n\r\n  /* Enable clock to ePWM */\r\n  CpuSysRegs.PCLKCR2.bit.EPWM1 = 1U;\r\n  CpuSysRegs.PCLKCR2.bit.EPWM2 = 1U;\r\n  CpuSysRegs.PCLKCR2.bit.EPWM3 = 1U;\r\n\r\n  /* Disable TBCLK within ePWM before module configuration */\r\n  CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = 0U;\r\n  EDIS;\r\n  config_ePWMSyncSource();\r\n\r\n#ifdef CPU1\r\n\r\n  /* initial GPIO qualification settings.... */\r\n  EALLOW;\r\n  GpioCtrlRegs.GPAQSEL1.all = 0x0U;\r\n  GpioCtrlRegs.GPAQSEL2.all = 0x0U;\r\n  GpioCtrlRegs.GPBQSEL1.all = 0x0U;\r\n  GpioCtrlRegs.GPBQSEL2.all = 0x0U;\r\n  GpioCtrlRegs.GPCQSEL1.all = 0x0U;\r\n  GpioCtrlRegs.GPCQSEL2.all = 0x0U;\r\n  GpioCtrlRegs.GPDQSEL1.all = 0x0U;\r\n  GpioCtrlRegs.GPDQSEL2.all = 0x0U;\r\n  GpioCtrlRegs.GPEQSEL1.all = 0x0U;\r\n  GpioCtrlRegs.GPEQSEL2.all = 0x0U;\r\n  GpioCtrlRegs.GPFQSEL1.all = 0x0U;\r\n  EDIS;\r\n\r\n#endif                                 // #ifdef CPU1\r\n\r\n}\r\n"},{"name":"MW_c28xx_csl.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Other files","code":"#include \"c2000BoardSupport.h\"\r\n#include \"MW_f2837xD_includes.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d_private.h\"\r\n\r\nvoid enableExtInterrupt (void);\r\nvoid configureGPIOExtInterrupt(void);\r\n\r\n#include <stdint.h>\r\n\r\nvoid disableWatchdog(void)\r\n{\r\n  int *WatchdogWDCR = (int *)(uintptr_t)0x7029;\r\n  asm(\" EALLOW \");\r\n  *WatchdogWDCR = 0x0068;\r\n  asm(\" EDIS \");\r\n}\r\n\r\nvoid init_SCI(void)\r\n{\r\n  /* initialize SCI & FIFO registers */\r\n  EALLOW;\r\n\r\n  /*\r\n   * Initialize SCI_A with following parameters:\r\n   *    BaudRate              : 12500000\r\n   *    CharacterLengthBits   : 8\r\n   *    EnableLoopBack        : 0\r\n   *    NumberOfStopBits      : 1\r\n   *    ParityMode            : None\r\n   *    SuspensionMode        : Free_run\r\n   */\r\n  CpuSysRegs.PCLKCR7.bit.SCI_A = 1U;\r\n  asm(\" NOP\");\r\n  SciaRegs.SCICCR.bit.STOPBITS = 0U;\r\n                    /*Number of stop bits. (0: One stop bit, 1: Two stop bits)*/\r\n  SciaRegs.SCICCR.bit.PARITY = 0U;\r\n                                 /*Parity mode (0: Odd parity, 1: Even parity)*/\r\n  SciaRegs.SCICCR.bit.PARITYENA = 0U;  /*Enable Pary Mode */\r\n  SciaRegs.SCICCR.bit.LOOPBKENA = 0U;  /*Loop Back enable*/\r\n  SciaRegs.SCICCR.bit.ADDRIDLE_MODE = 0U;/*ADDR/IDLE Mode control*/\r\n  SciaRegs.SCICCR.bit.SCICHAR = 7U;    /*Character length*/\r\n  SciaRegs.SCICTL1.bit.RXERRINTENA = 0U;/*Disable receive error interrupt*/\r\n  SciaRegs.SCICTL1.bit.SWRESET = 1U;   /*Software reset*/\r\n  SciaRegs.SCICTL1.bit.TXENA = 1U;     /* SCI transmitter enable*/\r\n  SciaRegs.SCICTL1.bit.RXENA = 1U;     /* SCI receiver enable*/\r\n  SciaRegs.SCIHBAUD.bit.BAUD = 0U;\r\n  SciaRegs.SCILBAUD.bit.BAUD = 1U;\r\n\r\n  /*Free run, continue SCI operation regardless of suspend*/\r\n  SciaRegs.SCIPRI.bit.FREESOFT = 3U;\r\n  SciaRegs.SCIFFCT.bit.ABDCLR = 0U;\r\n  SciaRegs.SCIFFCT.bit.CDC = 0U;\r\n  SciaRegs.SCIFFTX.bit.SCIRST = 1U;    /* SCI reset rx/tx channels*/\r\n  SciaRegs.SCIFFTX.bit.SCIFFENA = 1U;  /* SCI FIFO enhancements are enabled.*/\r\n  SciaRegs.SCIFFTX.bit.TXFIFORESET = 1U;/* Re-enable transmit FIFO operation.*/\r\n  SciaRegs.SCIFFRX.bit.RXFIFORESET = 1U;/* Re-enable receive FIFO operation.*/\r\n  SciaRegs.SCIFFRX.bit.RXFFIENA = 1U;\r\n  SciaRegs.SCIFFRX.bit.RXFFIL = 4U;\r\n  SciaRegs.SCICTL1.bit.RXERRINTENA = 1U;\r\n  /*Enable receive error interrupt by default if receive FIFO interrupt is enabled*/\r\n  EDIS;\r\n}\r\n\r\nvoid init_SCI_GPIO(void)\r\n{\r\n  EALLOW;\r\n  GpioCtrlRegs.GPBQSEL1.bit.GPIO43 = 3U;/*Asynch input GPIO43 SCIRXDA*/\r\n  GpioCtrlRegs.GPBPUD.bit.GPIO43 = 0U; /*Enable pull-up for GPIO43*/\r\n  GpioCtrlRegs.GPBGMUX1.bit.GPIO43 = 3U;\r\n  GpioCtrlRegs.GPBMUX1.bit.GPIO43 = 3U;/*Configure GPIO43 as SCIRXDA*/\r\n  GpioCtrlRegs.GPBPUD.bit.GPIO42 = 0U; /*Enable pull-up for GPIO42*/\r\n  GpioCtrlRegs.GPBGMUX1.bit.GPIO42 = 3U;\r\n  GpioCtrlRegs.GPBMUX1.bit.GPIO42 = 3U;/*Configure GPIO42 as SCITXDA*/\r\n  EDIS;\r\n}\r\n"},{"name":"MW_c28xx_pie.h","type":"header","group":"other","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef __MW_C28XX_PIE_H__\r\n#define __MW_C28XX_PIE_H__\r\n#define PIEMASK0                       64\r\n#define PIEMASK8                       1\r\n#define IFRMASK                        257\r\n#endif                                 /* MW_C28XX_PIE_H */\r\n"},{"name":"MW_c28xx_pwm.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Other files","code":"#include \"c2000BoardSupport.h\"\r\n#include \"MW_f2837xD_includes.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d_private.h\"\r\n\r\nvoid config_ePWM_GPIO (void)\r\n{\r\n  EALLOW;\r\n  ClkCfgRegs.PERCLKDIVSEL.bit.EPWMCLKDIV = 0U;\r\n\r\n  /*-- Configure pin assignments for ePWM1 --*/\r\n  GpioCtrlRegs.GPAGMUX1.bit.GPIO0 = 0U;\r\n  GpioCtrlRegs.GPAMUX1.bit.GPIO0 = 1U; /* Configure GPIOGPIO0 as EPWM1A*/\r\n  GpioCtrlRegs.GPAGMUX1.bit.GPIO1 = 0U;\r\n  GpioCtrlRegs.GPAMUX1.bit.GPIO1 = 1U; /* Configure GPIOGPIO1 as EPWM1B*/\r\n\r\n  /*-- Configure pin assignments for ePWM2 --*/\r\n  GpioCtrlRegs.GPAGMUX1.bit.GPIO2 = 0U;\r\n  GpioCtrlRegs.GPAMUX1.bit.GPIO2 = 1U; /* Configure GPIOGPIO2 as EPWM2A*/\r\n  GpioCtrlRegs.GPAGMUX1.bit.GPIO3 = 0U;\r\n  GpioCtrlRegs.GPAMUX1.bit.GPIO3 = 1U; /* Configure GPIOGPIO3 as EPWM2B*/\r\n\r\n  /*-- Configure pin assignments for ePWM3 --*/\r\n  GpioCtrlRegs.GPAGMUX1.bit.GPIO4 = 0U;\r\n  GpioCtrlRegs.GPAMUX1.bit.GPIO4 = 1U; /* Configure GPIOGPIO4 as EPWM3A*/\r\n  GpioCtrlRegs.GPAGMUX1.bit.GPIO5 = 0U;\r\n  GpioCtrlRegs.GPAMUX1.bit.GPIO5 = 1U; /* Configure GPIOGPIO5 as EPWM3B*/\r\n  EDIS;\r\n}\r\n\r\nvoid config_ePWM_TBSync (void)\r\n{\r\n  /* Enable TBCLK within the EPWM*/\r\n  EALLOW;\r\n\r\n  /* Enable TBCLK after the ePWM configurations */\r\n  CpuSysRegs.PCLKCR0.bit.TBCLKSYNC = 1U;\r\n  EDIS;\r\n}\r\n\r\nvoid config_ePWMSyncSource (void)\r\n{\r\n  /* Configuring EXTSYNCOUT source selection */\r\n  EALLOW;\r\n  SyncSocRegs.SYNCSELECT.bit.SYNCOUT = 0U;\r\n\r\n  /* Configuring ePWM Sync in source selection */\r\n  SyncSocRegs.SYNCSELECT.bit.EPWM4SYNCIN = 0U;\r\n  SyncSocRegs.SYNCSELECT.bit.EPWM7SYNCIN = 0U;\r\n  SyncSocRegs.SYNCSELECT.bit.EPWM10SYNCIN = 0U;\r\n  EDIS;\r\n}\r\n"},{"name":"MW_c28xx_qep.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Other files","code":"#include \"c2000BoardSupport.h\"\r\n#include \"MW_f2837xD_includes.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d.h\"\r\n#include \"mcb_pmsm_qep_offset_f28379d_private.h\"\r\n\r\nvoid config_QEP_eQEP1(uint32_T pcmaximumvalue, uint32_T pcInitialvalue, uint32_T\r\n                      unittimerperiod, uint32_T comparevalue, uint16_T\r\n                      watchdogtimer, uint16_T qdecctl, uint16_T qepctl, uint16_T\r\n                      qposctl, uint16_T qcapctl, uint16_T qeint)\r\n{\r\n  EALLOW;\r\n  CpuSysRegs.PCLKCR4.bit.EQEP1 = 1U;\r\n  EDIS;\r\n  EALLOW;                              /* Enable EALLOW*/\r\n\r\n  /* Enable internal pull-up for the selected pins */\r\n  GpioCtrlRegs.GPAPUD.bit.GPIO20 = 0U; /* Enable pull-up on GPIO20 (EQEP1A)*/\r\n  GpioCtrlRegs.GPAPUD.bit.GPIO21 = 0U; /* Enable pull-up on GPIO21 (EQEP1B)*/\r\n  GpioCtrlRegs.GPDPUD.bit.GPIO99 = 0U; /* Enable pull-up on GPIO99 (EQEP1I)*/\r\n\r\n  /* Configure eQEP-1 pins using GPIO regs*/\r\n  GpioCtrlRegs.GPAMUX2.bit.GPIO20 = 1U;/* Configure GPIO20 as EQEP1A*/\r\n  GpioCtrlRegs.GPAGMUX2.bit.GPIO20 = 0U;\r\n  GpioCtrlRegs.GPAMUX2.bit.GPIO21 = 1U;/* Configure GPIO21 as EQEP1B  */\r\n  GpioCtrlRegs.GPAGMUX2.bit.GPIO21 = 0U;\r\n  GpioCtrlRegs.GPDMUX1.bit.GPIO99 = 1U;/* Configure GPIO99 as EQEP1I*/\r\n  GpioCtrlRegs.GPDGMUX1.bit.GPIO99 = 1U;\r\n  EDIS;\r\n  EQep1Regs.QPOSINIT = pcInitialvalue; /*eQEP Initialization Position Count*/\r\n  EQep1Regs.QPOSMAX = pcmaximumvalue;  /*eQEP Maximum Position Count*/\r\n  EQep1Regs.QUPRD = unittimerperiod;   /*eQEP Unit Period Register*/\r\n  EQep1Regs.QWDPRD = watchdogtimer;    /*eQEP watchdog timer Register*/\r\n  EQep1Regs.QDECCTL.all = qdecctl;   /*eQEP Decoder Control (QDECCTL) Register*/\r\n  EQep1Regs.QEPCTL.all = qepctl;       /*eQEP Control (QEPCTL) Register*/\r\n  EQep1Regs.QPOSCTL.all = qposctl;\r\n                            /*eQEP Position-compare Control (QPOSCTL) Register*/\r\n  EQep1Regs.QCAPCTL.all = qcapctl;   /*eQEP Capture Control (QCAPCTL) Register*/\r\n  EQep1Regs.QEPCTL.bit.FREE_SOFT = 2U; /*unaffected by emulation suspend*/\r\n  EQep1Regs.QPOSCMP = comparevalue;    /*eQEP Position-compare*/\r\n  EQep1Regs.QEINT.all = qeint;         /*eQEPx interrupt enable register*/\r\n}\r\n"},{"name":"MW_target_hardware_resources.h","type":"header","group":"other","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef PORTABLE_WORDSIZES\n#ifdef __MW_TARGET_USE_HARDWARE_RESOURCES_H__\n#ifndef __MW_TARGET_HARDWARE_RESOURCES_H__\n#define __MW_TARGET_HARDWARE_RESOURCES_H__\n\n#define MW_MULTI_TASKING_MODE 1\n#include \"c2000BoardSupport.h\"\n#include \"MW_f2837xD_includes.h\"\n#include \"c2000SchedulerTimer.h\"\n\n#define MW_USECODERTARGET 1\n#define MW_TARGETHARDWARE TI Delfino F28379D LaunchPad\n#define MW_CONNECTIONINFO_SERIAL_IPADDRESS codertarget.registry.getLoopbackIP;\n#define MW_CONNECTIONINFO_SERIAL_PORT 17725\n#define MW_CONNECTIONINFO_SERIAL_VERBOSE 0\n#define MW_CONNECTIONINFO_CAN_MEXARGS  \n#define MW_CONNECTIONINFO_XCPONCAN_MEXARGS  \n#define MW_CONNECTIONINFO_XCPONCAN_BUSSPEED codertarget.registry.getExtModeCANBusSpeed(hCS)\n#define MW_CONNECTIONINFO_XCPONCAN_CANCHANNEL \n#define MW_CONNECTIONINFO_XCPONCAN_CANDEVICE \n#define MW_CONNECTIONINFO_XCPONCAN_CANIDCOMMAND 2\n#define MW_CONNECTIONINFO_XCPONCAN_CANIDRESPONSE 3\n#define MW_CONNECTIONINFO_XCPONCAN_CANVENDOR \n#define MW_CONNECTIONINFO_XCPONCAN_ISCANIDEXTENDED 0\n#define MW_CONNECTIONINFO_XCPONCAN_VERBOSE 1\n#define MW_CONNECTIONINFO_XCPONSERIAL_BAUDRATE codertarget.registry.getExtModeHostBaud(hCS);\n#define MW_CONNECTIONINFO_XCPONSERIAL_COMPORT codertarget.registry.serialPortValueCallback(hCS, 'ExtModeCOMPort');\n#define MW_CONNECTIONINFO_XCPONSERIAL_VERBOSE 1\n#define MW_EXTMODE_CONFIGURATION XCP on Serial\n#define MW_EXTMODE_SIGNALBUFFERSIZE 1000000.000000\n#define MW_EXTMODE_SCIMODULE 0\n#define MW_EXTMODE_HOSTINTERFACE 3P Tools\n#define MW_EXTMODE_CANMODULE 0\n#define MW_EXTMODE_CANIDTYPE Standard (11-bit)\n#define MW_EXTMODE_CANMASTERID 0x02\n#define MW_EXTMODE_CANSLAVEID 0x03\n#define MW_EXTMODE_CANRXMAILBOXNUMBER 0\n#define MW_EXTMODE_CANTXMAILBOXNUMBER 1\n#define MW_EXTMODE_USEREALTIMESTAMPLOGGING 0\n#define MW_RTOS Baremetal\n#define MW_SCHEDULER_INTERRUPT_SOURCE 0\n#define MW_RUNTIME_BUILDACTION 1\n#define MW_RUNTIME_DEVICEID 0\n#define MW_RUNTIME_FLASHLOAD 1\n#define MW_RUNTIME_CPU CPU1\n#define MW_RUNTIME_LOADCOMMANDARG $(TARGET_ROOT)/CCS_Config/f28379D.ccxml\n#define MW_RUNTIME_CPU2MODELENABLE 102 97108115101\n#define MW_RUNTIME_CPU2MODEL \n#define MW_RUNTIME_PF1DMAACCESS 0\n#define MW_RUNTIME_PF2DMAACCESS 0\n#define MW_RUNTIME_ENABLETMU 1\n#define MW_RUNTIME_DISABLEPARALLELBUILD 0\n#define MW_RUNTIME_ENABLEDATATYPEREPLACEMENT 0\n#define MW_RUNTIME_BITSPERDOUBLE 1\n#define MW_TARGETLINKOBJ_USECUSTOMLINKER 0\n#define MW_TARGETLINKOBJ_NAME $(TARGET_ROOT)/src/c28377D.cmd\n#define MW_CLOCKING_CPUCLOCKRATEMHZ 200\n#define MW_CLOCKING_USEINTERNALOSC 0\n#define MW_CLOCKING_OSCCLK 10\n#define MW_CLOCKING_AUTOSETPLLSETTINGS 1\n#define MW_CLOCKING_PLLCR 40\n#define MW_CLOCKING_DIVSEL 2\n#define MW_CLOCKING_CLOSESTCPUCLOCK 200\n#define MW_CLOCKING_LSPCLKDIV 0\n#define MW_CLOCKING_LSPCLK 200\n#define MW_CLOCKING_CLOSESTCPUCLOCK1 200\n#define MW_CLOCKING_LSPCLKDIV1 0\n#define MW_ADCA_CPUCORE 0\n#define MW_ADCA_CLOCKDIV 7\n#define MW_ADCA_CLOCKFREQUENCY 40.000000\n#define MW_ADCA_OFFSETCORRECTIONVALUE AdcaRegs.ADCOFFTRIM.bit.OFFTRIM\n#define MW_ADCA_EXTERNALREFERENCESELECTOR 0\n#define MW_ADCA_EXTERNALREFERENCEVREFHI 3.3\n#define MW_ADCA_EXTERNALREFERENCEVREFLO 0\n#define MW_ADCA_INTPULSEGENERATION 0\n#define MW_ADCA_SOCPRIORITY 0\n#define MW_ADCA_XINT2GPIO GPIO0\n#define MW_ADCA_XINT2GPIO_IXBAR 0\n#define MW_ADCB_CPUCORE 0\n#define MW_ADCB_CLOCKDIV 7\n#define MW_ADCB_CLOCKFREQUENCY 40.000000\n#define MW_ADCB_OFFSETCORRECTIONVALUE AdcbRegs.ADCOFFTRIM.bit.OFFTRIM\n#define MW_ADCB_EXTERNALREFERENCESELECTOR 0\n#define MW_ADCB_EXTERNALREFERENCEVREFHI 3.3\n#define MW_ADCB_EXTERNALREFERENCEVREFLO 0\n#define MW_ADCB_INTPULSEGENERATION 0\n#define MW_ADCB_SOCPRIORITY 0\n#define MW_ADCB_XINT2GPIO GPIO0\n#define MW_ADCB_XINT2GPIO_IXBAR 0\n#define MW_ADCC_CPUCORE 0\n#define MW_ADCC_CLOCKDIV 7\n#define MW_ADCC_CLOCKFREQUENCY 40.000000\n#define MW_ADCC_OFFSETCORRECTIONVALUE AdccRegs.ADCOFFTRIM.bit.OFFTRIM\n#define MW_ADCC_EXTERNALREFERENCESELECTOR 0\n#define MW_ADCC_EXTERNALREFERENCEVREFHI 3.3\n#define MW_ADCC_EXTERNALREFERENCEVREFLO 0\n#define MW_ADCC_INTPULSEGENERATION 0\n#define MW_ADCC_SOCPRIORITY 0\n#define MW_ADCC_XINT2GPIO GPIO0\n#define MW_ADCC_XINT2GPIO_IXBAR 0\n#define MW_ADCD_CPUCORE 0\n#define MW_ADCD_CLOCKDIV 7\n#define MW_ADCD_CLOCKFREQUENCY 40.000000\n#define MW_ADCD_OFFSETCORRECTIONVALUE AdcdRegs.ADCOFFTRIM.bit.OFFTRIM\n#define MW_ADCD_EXTERNALREFERENCESELECTOR 0\n#define MW_ADCD_EXTERNALREFERENCEVREFHI 3.3\n#define MW_ADCD_EXTERNALREFERENCEVREFLO 0\n#define MW_ADCD_INTPULSEGENERATION 0\n#define MW_ADCD_SOCPRIORITY 0\n#define MW_ADCD_XINT2GPIO GPIO0\n#define MW_ADCD_XINT2GPIO_IXBAR 0\n#define MW_DACA_VOLTAGE 0\n#define MW_DACA_LOADMODE 0\n#define MW_DACB_VOLTAGE 0\n#define MW_DACB_LOADMODE 0\n#define MW_DACC_VOLTAGE 0\n#define MW_DACC_LOADMODE 0\n#define MW_EPWM_CLOCKDIV 0\n#define MW_EPWM_PINASSIGNMENT_TZ1 None\n#define MW_EPWM_PINASSIGNMENT_TZ2 None\n#define MW_EPWM_PINASSIGNMENT_TZ3 None\n#define MW_EPWM_PINASSIGNMENT_SYNCI None\n#define MW_EPWM_PINASSIGNMENT_SYNCO None\n#define MW_EPWM_PINASSIGNMENT_PWM1A 1\n#define MW_EPWM_PINASSIGNMENT_PWM1B 1\n#define MW_EPWM_PINASSIGNMENT_PWM2A 1\n#define MW_EPWM_PINASSIGNMENT_PWM2B 1\n#define MW_EPWM_PINASSIGNMENT_PWM3A 1\n#define MW_EPWM_PINASSIGNMENT_PWM3B 1\n#define MW_EPWM_PINASSIGNMENT_PWM4A 1\n#define MW_EPWM_PINASSIGNMENT_PWM4B 1\n#define MW_EPWM_PINASSIGNMENT_PWM5A 1\n#define MW_EPWM_PINASSIGNMENT_PWM5B 1\n#define MW_EPWM_PINASSIGNMENT_PWM6A 1\n#define MW_EPWM_PINASSIGNMENT_PWM6B 1\n#define MW_EPWM_PINASSIGNMENT_PWM7A 1\n#define MW_EPWM_PINASSIGNMENT_PWM7B 1\n#define MW_EPWM_PINASSIGNMENT_PWM8A 1\n#define MW_EPWM_PINASSIGNMENT_PWM8B 1\n#define MW_EPWM_PINASSIGNMENT_PWM9A 1\n#define MW_EPWM_PINASSIGNMENT_PWM9B 1\n#define MW_EPWM_PINASSIGNMENT_PWM10A 1\n#define MW_EPWM_PINASSIGNMENT_PWM10B 1\n#define MW_EPWM_PINASSIGNMENT_PWM11A 1\n#define MW_EPWM_PINASSIGNMENT_PWM11B 1\n#define MW_EPWM_PINASSIGNMENT_PWM12A 1\n#define MW_EPWM_PINASSIGNMENT_PWM12B 1\n#define MW_EPWM_CLOCKDIV1 0\n#define MW_EPWM_PINASSIGNMENT_TZ1_IXBAR 0\n#define MW_EPWM_PINASSIGNMENT_TZ2_IXBAR 0\n#define MW_EPWM_PINASSIGNMENT_TZ3_IXBAR 0\n#define MW_EPWM_EXBAR_TRIP4 0\n#define MW_EPWM_EXBAR_MUX_TRIP4 -1\n#define MW_EPWM_EXBAR_TRIP4_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP4_INVERT 0\n#define MW_EPWM_EXBAR_TRIP5 0\n#define MW_EPWM_EXBAR_MUX_TRIP5 -1\n#define MW_EPWM_EXBAR_TRIP5_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP5_INVERT 0\n#define MW_EPWM_EXBAR_TRIP7 0\n#define MW_EPWM_EXBAR_MUX_TRIP7 -1\n#define MW_EPWM_EXBAR_TRIP7_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP7_INVERT 0\n#define MW_EPWM_EXBAR_TRIP8 0\n#define MW_EPWM_EXBAR_MUX_TRIP8 -1\n#define MW_EPWM_EXBAR_TRIP8_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP8_INVERT 0\n#define MW_EPWM_EXBAR_TRIP9 0\n#define MW_EPWM_EXBAR_MUX_TRIP9 -1\n#define MW_EPWM_EXBAR_TRIP9_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP9_INVERT 0\n#define MW_EPWM_EXBAR_TRIP10 0\n#define MW_EPWM_EXBAR_MUX_TRIP10 -1\n#define MW_EPWM_EXBAR_TRIP10_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP10_INVERT 0\n#define MW_EPWM_EXBAR_TRIP11 0\n#define MW_EPWM_EXBAR_MUX_TRIP11 -1\n#define MW_EPWM_EXBAR_TRIP11_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP11_INVERT 0\n#define MW_EPWM_EXBAR_TRIP12 0\n#define MW_EPWM_EXBAR_MUX_TRIP12 -1\n#define MW_EPWM_EXBAR_TRIP12_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_EPWM_EXBAR_TRIP12_INVERT 0\n#define MW_EPWM_PINASSIGNMENT_SYNCI_IXBAR 0\n#define MW_EPWM_SYNCSEL_SYNCOUT 0\n#define MW_EPWM_SYNCSEL_EPWM4SYNCIN 0\n#define MW_EPWM_SYNCSEL_EPWM7SYNCIN 0\n#define MW_EPWM_SYNCSEL_EPWM10SYNCIN 0\n#define MW_ECAP_PINASSIGNMENT_ECAP1 GPIO24\n#define MW_ECAP_PINASSIGNMENT_ECAP2 GPIO25\n#define MW_ECAP_PINASSIGNMENT_ECAP3 GPIO26\n#define MW_ECAP_PINASSIGNMENT_ECAP4 GPIO20\n#define MW_ECAP_PINASSIGNMENT_ECAP5 GPIO21\n#define MW_ECAP_PINASSIGNMENT_ECAP6 GPIO23\n#define MW_ECAP_PINASSIGNMENT_APWM1 13\n#define MW_ECAP_PINASSIGNMENT_APWM2 14\n#define MW_ECAP_PINASSIGNMENT_APWM3 15\n#define MW_ECAP_PINASSIGNMENT_APWM4 16\n#define MW_ECAP_PINASSIGNMENT_APWM5 17\n#define MW_ECAP_PINASSIGNMENT_APWM6 18\n#define MW_ECAP_PINASSIGNMENT_ECAP1_IXBAR 0\n#define MW_ECAP_PINASSIGNMENT_ECAP2_IXBAR 0\n#define MW_ECAP_PINASSIGNMENT_ECAP3_IXBAR 0\n#define MW_ECAP_PINASSIGNMENT_ECAP4_IXBAR 0\n#define MW_ECAP_PINASSIGNMENT_ECAP5_IXBAR 0\n#define MW_ECAP_PINASSIGNMENT_ECAP6_IXBAR 0\n#define MW_ECAP_PINASSIGNMENT_APWM1_OXBAR 1.000000\n#define MW_ECAP_PINASSIGNMENT_APWM2_OXBAR 2.000000\n#define MW_ECAP_PINASSIGNMENT_APWM3_OXBAR 3.000000\n#define MW_ECAP_PINASSIGNMENT_APWM4_OXBAR 4.000000\n#define MW_ECAP_PINASSIGNMENT_APWM5_OXBAR 5.000000\n#define MW_ECAP_PINASSIGNMENT_APWM6_OXBAR 6.000000\n#define MW_ECAP_SYNCSEL_ECAP1SYNCIN 0\n#define MW_ECAP_SYNCSEL_ECAP4SYNCIN 0\n#define MW_EQEP_PINASSIGNMENT_EQEP1A 2\n#define MW_EQEP_PINASSIGNMENT_EQEP1B 2\n#define MW_EQEP_PINASSIGNMENT_EQEP1S 0\n#define MW_EQEP_PINASSIGNMENT_EQEP1I 4\n#define MW_EQEP_PINASSIGNMENT_EQEP2A 1\n#define MW_EQEP_PINASSIGNMENT_EQEP2B 1\n#define MW_EQEP_PINASSIGNMENT_EQEP2S 1\n#define MW_EQEP_PINASSIGNMENT_EQEP2I 1\n#define MW_EQEP_PINASSIGNMENT_EQEP3A 2\n#define MW_EQEP_PINASSIGNMENT_EQEP3B 2\n#define MW_EQEP_PINASSIGNMENT_EQEP3S 2\n#define MW_EQEP_PINASSIGNMENT_EQEP3I 2\n#define MW_I2C_MODE 0\n#define MW_I2C_ADDRDATAFORMAT 0\n#define MW_I2C_OWNADDRESS 1\n#define MW_I2C_BITCOUNT 0\n#define MW_I2C_MODULECLOCKPRESCALER 9\n#define MW_I2C_MODULECLOCKFREQUENCY 20000000\n#define MW_I2C_MASTERCLKLOWTIME 20\n#define MW_I2C_MASTERCLKHIGHTIME 20\n#define MW_I2C_MASTERCLOCKFREQUENCY 400000\n#define MW_I2C_MASTERCLOCKFREQUENCY_1 400000\n#define MW_I2C_MASTERCLOCKFREQUENCY_2 400000\n#define MW_I2C_ENABLELOOPBACK 0\n#define MW_I2C_PINASSIGNMENT_SDAA 1\n#define MW_I2C_PINASSIGNMENT_SCLA 1\n#define MW_I2C_ENABLETXINT 0\n#define MW_I2C_TXFIFOLEVEL 16\n#define MW_I2C_ENABLERXINT 0\n#define MW_I2C_RXFIFOLEVEL 16\n#define MW_I2C_ENABLESYSINT 0\n#define MW_I2C_AAS 0\n#define MW_I2C_SCD 0\n#define MW_I2C_ARDY 0\n#define MW_I2C_NACK 0\n#define MW_I2C_AL 0\n#define MW_I2C_PINVALUE_SDA 32\n#define MW_I2C_PINVALUE_SCL 33\n#define MW_I2C_PINMUX_SDA 1\n#define MW_I2C_PINMUX_SCL 1\n#define MW_I2C_B_MODE 0\n#define MW_I2C_B_ADDRDATAFORMAT 0\n#define MW_I2C_B_OWNADDRESS 1\n#define MW_I2C_B_BITCOUNT 0\n#define MW_I2C_B_MODULECLOCKPRESCALER 9\n#define MW_I2C_B_MODULECLOCKFREQUENCY 20000000\n#define MW_I2C_B_MASTERCLKLOWTIME 20\n#define MW_I2C_B_MASTERCLKHIGHTIME 20\n#define MW_I2C_B_MASTERCLOCKFREQUENCY 400000\n#define MW_I2C_B_MASTERCLOCKFREQUENCY_1 400000\n#define MW_I2C_B_MASTERCLOCKFREQUENCY_2 400000\n#define MW_I2C_B_ENABLELOOPBACK 0\n#define MW_I2C_B_PINASSIGNMENT_SDAA 1\n#define MW_I2C_B_PINASSIGNMENT_SCLA 1\n#define MW_I2C_B_ENABLETXINT 0\n#define MW_I2C_B_TXFIFOLEVEL 16\n#define MW_I2C_B_ENABLERXINT 0\n#define MW_I2C_B_RXFIFOLEVEL 16\n#define MW_I2C_B_ENABLESYSINT 0\n#define MW_I2C_B_AAS 0\n#define MW_I2C_B_SCD 0\n#define MW_I2C_B_ARDY 0\n#define MW_I2C_B_NACK 0\n#define MW_I2C_B_AL 0\n#define MW_I2C_B_PINVALUE_SDA 34\n#define MW_I2C_B_PINVALUE_SCL 35\n#define MW_I2C_B_PINMUX_SDA 6\n#define MW_I2C_B_PINMUX_SCL 6\n#define MW_SCI_A_ENABLELOOPBACK 0\n#define MW_SCI_A_SUSPENSIONMODE 2\n#define MW_SCI_A_NUMBEROFSTOPBITS 0\n#define MW_SCI_A_PARITYMODE 0\n#define MW_SCI_A_CHARACTERLENGTHBITS 0\n#define MW_SCI_A_USERBAUDRATE 12e6\n#define MW_SCI_A_BAUDRATEPRESCALER 1.000000\n#define MW_SCI_A_BAUDRATE 12500000.000000\n#define MW_SCI_A_COMMUNICATIONMODE 0\n#define MW_SCI_A_BLOCKINGMODE 0\n#define MW_SCI_A_DATABYTEORDER 0\n#define MW_SCI_A_DATASWAPWIDTH 0\n#define MW_SCI_A_PINASSIGNMENT_TX 4\n#define MW_SCI_A_PINASSIGNMENT_RX 4\n#define MW_SCI_A_ENABLEINTERRUPTTX 0\n#define MW_SCI_A_FIFOINTERRUPTLEVELTX 1\n#define MW_SCI_A_ENABLEINTERRUPTRX 1\n#define MW_SCI_A_FIFOINTERRUPTLEVELRX 4\n#define MW_SCI_B_ENABLELOOPBACK 0\n#define MW_SCI_B_SUSPENSIONMODE 2\n#define MW_SCI_B_NUMBEROFSTOPBITS 0\n#define MW_SCI_B_PARITYMODE 0\n#define MW_SCI_B_CHARACTERLENGTHBITS 0\n#define MW_SCI_B_USERBAUDRATE 115200\n#define MW_SCI_B_BAUDRATEPRESCALER 216.000000\n#define MW_SCI_B_BAUDRATE 115207.000000\n#define MW_SCI_B_COMMUNICATIONMODE 0\n#define MW_SCI_B_BLOCKINGMODE 0\n#define MW_SCI_B_DATABYTEORDER 0\n#define MW_SCI_B_DATASWAPWIDTH 0\n#define MW_SCI_B_PINASSIGNMENT_TX 1\n#define MW_SCI_B_PINASSIGNMENT_RX 1\n#define MW_SCI_B_ENABLEINTERRUPTTX 0\n#define MW_SCI_B_FIFOINTERRUPTLEVELTX 1\n#define MW_SCI_B_ENABLEINTERRUPTRX 0\n#define MW_SCI_B_FIFOINTERRUPTLEVELRX 1\n#define MW_SCI_C_ENABLELOOPBACK 0\n#define MW_SCI_C_SUSPENSIONMODE 2\n#define MW_SCI_C_NUMBEROFSTOPBITS 0\n#define MW_SCI_C_PARITYMODE 0\n#define MW_SCI_C_CHARACTERLENGTHBITS 0\n#define MW_SCI_C_USERBAUDRATE 115200\n#define MW_SCI_C_BAUDRATEPRESCALER 216.000000\n#define MW_SCI_C_BAUDRATE 115207.000000\n#define MW_SCI_C_COMMUNICATIONMODE 0\n#define MW_SCI_C_BLOCKINGMODE 0\n#define MW_SCI_C_DATABYTEORDER 0\n#define MW_SCI_C_DATASWAPWIDTH 0\n#define MW_SCI_C_PINASSIGNMENT_TX 1\n#define MW_SCI_C_PINASSIGNMENT_RX 1\n#define MW_SCI_C_ENABLEINTERRUPTTX 0\n#define MW_SCI_C_FIFOINTERRUPTLEVELTX 1\n#define MW_SCI_C_ENABLEINTERRUPTRX 0\n#define MW_SCI_C_FIFOINTERRUPTLEVELRX 1\n#define MW_SCI_D_ENABLELOOPBACK 0\n#define MW_SCI_D_SUSPENSIONMODE 2\n#define MW_SCI_D_NUMBEROFSTOPBITS 0\n#define MW_SCI_D_PARITYMODE 0\n#define MW_SCI_D_CHARACTERLENGTHBITS 0\n#define MW_SCI_D_USERBAUDRATE 115200\n#define MW_SCI_D_BAUDRATEPRESCALER 216.000000\n#define MW_SCI_D_BAUDRATE 115207.000000\n#define MW_SCI_D_COMMUNICATIONMODE 0\n#define MW_SCI_D_BLOCKINGMODE 0\n#define MW_SCI_D_DATABYTEORDER 0\n#define MW_SCI_D_DATASWAPWIDTH 0\n#define MW_SCI_D_PINASSIGNMENT_TX 1\n#define MW_SCI_D_PINASSIGNMENT_RX 1\n#define MW_SCI_D_ENABLEINTERRUPTTX 0\n#define MW_SCI_D_FIFOINTERRUPTLEVELTX 1\n#define MW_SCI_D_ENABLEINTERRUPTRX 0\n#define MW_SCI_D_FIFOINTERRUPTLEVELRX 1\n#define MW_SPI_A_MODE 0\n#define MW_SPI_A_USERBAUDRATE 1843200\n#define MW_SPI_A_BAUDRATEFACTOR 108.000000\n#define MW_SPI_A_BAUDRATE 1834862.000000\n#define MW_SPI_A_DATABITS 15\n#define MW_SPI_A_CLOCKPOLARITY 0\n#define MW_SPI_A_CLOCKPHASE 0\n#define MW_SPI_A_SUSPENSIONMODE 2\n#define MW_SPI_A_ENABLELOOPBACK 0\n#define MW_SPI_A_ENABLETHREEWIRE 0\n#define MW_SPI_A_TXINTERRUPTENABLE 0\n#define MW_SPI_A_FIFOINTERRUPTLEVEL_TX 0\n#define MW_SPI_A_RXINTERRUPTENABLE 0\n#define MW_SPI_A_FIFOINTERRUPTLEVEL_RX 16\n#define MW_SPI_A_FIFOENABLE 1\n#define MW_SPI_A_FIFOTRANSMITDELAY 0\n#define MW_SPI_A_PINASSIGNMENT_SIMO 1\n#define MW_SPI_A_PINASSIGNMENT_SOMI 1\n#define MW_SPI_A_PINASSIGNMENT_CLK 1\n#define MW_SPI_A_PINASSIGNMENT_STE 1\n#define MW_SPI_A_PINVALUE_SIMO 16\n#define MW_SPI_A_PINVALUE_SOMI 17\n#define MW_SPI_A_PINVALUE_CLK 18\n#define MW_SPI_A_PINVALUE_STE 19\n#define MW_SPI_A_PINMUX_SIMO 1\n#define MW_SPI_A_PINMUX_SOMI 1\n#define MW_SPI_A_PINMUX_CLK 1\n#define MW_SPI_A_PINMUX_STE 1\n#define MW_SPI_A_FIFO_LEVEL 16.000000\n#define MW_SPI_A_ENABLEHIGHSPEEDMODE 1\n#define MW_SPI_B_MODE 0\n#define MW_SPI_B_USERBAUDRATE 1843200\n#define MW_SPI_B_BAUDRATEFACTOR 108.000000\n#define MW_SPI_B_BAUDRATE 1834862.000000\n#define MW_SPI_B_DATABITS 15\n#define MW_SPI_B_CLOCKPOLARITY 0\n#define MW_SPI_B_CLOCKPHASE 0\n#define MW_SPI_B_SUSPENSIONMODE 2\n#define MW_SPI_B_ENABLELOOPBACK 0\n#define MW_SPI_B_ENABLETHREEWIRE 0\n#define MW_SPI_B_TXINTERRUPTENABLE 0\n#define MW_SPI_B_FIFOINTERRUPTLEVEL_TX 0\n#define MW_SPI_B_RXINTERRUPTENABLE 0\n#define MW_SPI_B_FIFOINTERRUPTLEVEL_RX 16\n#define MW_SPI_B_FIFOENABLE 1\n#define MW_SPI_B_FIFOTRANSMITDELAY 0\n#define MW_SPI_B_PINASSIGNMENT_SIMO 1\n#define MW_SPI_B_PINASSIGNMENT_SOMI 1\n#define MW_SPI_B_PINASSIGNMENT_CLK 2\n#define MW_SPI_B_PINASSIGNMENT_STE 2\n#define MW_SPI_B_PINVALUE_SIMO 24\n#define MW_SPI_B_PINVALUE_SOMI 25\n#define MW_SPI_B_PINVALUE_CLK 26\n#define MW_SPI_B_PINVALUE_STE 27\n#define MW_SPI_B_PINMUX_SIMO 6\n#define MW_SPI_B_PINMUX_SOMI 6\n#define MW_SPI_B_PINMUX_CLK 6\n#define MW_SPI_B_PINMUX_STE 6\n#define MW_SPI_B_FIFO_LEVEL 16.000000\n#define MW_SPI_B_ENABLEHIGHSPEEDMODE 1\n#define MW_SPI_C_MODE 0\n#define MW_SPI_C_USERBAUDRATE 1843200\n#define MW_SPI_C_BAUDRATEFACTOR 108.000000\n#define MW_SPI_C_BAUDRATE 1834862.000000\n#define MW_SPI_C_DATABITS 15\n#define MW_SPI_C_CLOCKPOLARITY 0\n#define MW_SPI_C_CLOCKPHASE 0\n#define MW_SPI_C_SUSPENSIONMODE 2\n#define MW_SPI_C_ENABLELOOPBACK 0\n#define MW_SPI_C_ENABLETHREEWIRE 0\n#define MW_SPI_C_TXINTERRUPTENABLE 0\n#define MW_SPI_C_FIFOINTERRUPTLEVEL_TX 0\n#define MW_SPI_C_RXINTERRUPTENABLE 0\n#define MW_SPI_C_FIFOINTERRUPTLEVEL_RX 16\n#define MW_SPI_C_FIFOENABLE 1\n#define MW_SPI_C_FIFOTRANSMITDELAY 0\n#define MW_SPI_C_PINASSIGNMENT_SIMO 1\n#define MW_SPI_C_PINASSIGNMENT_SOMI 1\n#define MW_SPI_C_PINASSIGNMENT_CLK 1\n#define MW_SPI_C_PINASSIGNMENT_STE 1\n#define MW_SPI_C_PINVALUE_SIMO 50\n#define MW_SPI_C_PINVALUE_SOMI 51\n#define MW_SPI_C_PINVALUE_CLK 52\n#define MW_SPI_C_PINVALUE_STE 53\n#define MW_SPI_C_PINMUX_SIMO 6\n#define MW_SPI_C_PINMUX_SOMI 6\n#define MW_SPI_C_PINMUX_CLK 6\n#define MW_SPI_C_PINMUX_STE 6\n#define MW_SPI_C_FIFO_LEVEL 16.000000\n#define MW_SPI_C_ENABLEHIGHSPEEDMODE 1\n#define MW_ECAN_A_MODULECLOCKFREQUENCY 200\n#define MW_ECAN_A_BAUDRATEPRESCALER 20.000000\n#define MW_ECAN_A_TSEG1 4\n#define MW_ECAN_A_TSEG2 3\n#define MW_ECAN_A_BAUDRATE 1000000\n#define MW_ECAN_A_SBG 0\n#define MW_ECAN_A_SJW 1\n#define MW_ECAN_A_SAM 0\n#define MW_ECAN_A_ENHANCEDCANMODE 1\n#define MW_ECAN_A_SELFTESTMODE 0\n#define MW_ECAN_A_PINASSIGNMENT_TX 3\n#define MW_ECAN_A_PINASSIGNMENT_RX 3\n#define MW_ECAN_B_MODULECLOCKFREQUENCY 200\n#define MW_ECAN_B_BAUDRATEPRESCALER 20.000000\n#define MW_ECAN_B_TSEG1 4\n#define MW_ECAN_B_TSEG2 3\n#define MW_ECAN_B_BAUDRATE 1000000\n#define MW_ECAN_B_SBG 0\n#define MW_ECAN_B_SJW 1\n#define MW_ECAN_B_SAM 0\n#define MW_ECAN_B_ENHANCEDCANMODE 1\n#define MW_ECAN_B_SELFTESTMODE 0\n#define MW_ECAN_B_PINASSIGNMENT_TX 2\n#define MW_ECAN_B_PINASSIGNMENT_RX 2\n#define MW_WATCHDOG_ENABLE_WATCHDOG 0\n#define MW_WATCHDOG_WATCHDOGCLOCK 0\n#define MW_WATCHDOG_TIME_PERIOD 0.013107\n#define MW_WATCHDOG_WATCHDOGEVENT 0\n#define MW_GPIO0_7_GPIOQUALSEL0 0\n#define MW_GPIO0_7_GPIOQUALSEL1 0\n#define MW_GPIO0_7_GPIOQUALSEL2 0\n#define MW_GPIO0_7_GPIOQUALSEL3 0\n#define MW_GPIO0_7_GPIOQUALSEL4 0\n#define MW_GPIO0_7_GPIOQUALSEL5 0\n#define MW_GPIO0_7_GPIOQUALSEL6 0\n#define MW_GPIO0_7_GPIOQUALSEL7 0\n#define MW_GPIO0_7_QUALPRD 0\n#define MW_GPIO8_15_GPIOQUALSEL8 0\n#define MW_GPIO8_15_GPIOQUALSEL9 0\n#define MW_GPIO8_15_GPIOQUALSEL10 0\n#define MW_GPIO8_15_GPIOQUALSEL11 0\n#define MW_GPIO8_15_GPIOQUALSEL12 0\n#define MW_GPIO8_15_GPIOQUALSEL13 0\n#define MW_GPIO8_15_GPIOQUALSEL14 0\n#define MW_GPIO8_15_GPIOQUALSEL15 0\n#define MW_GPIO8_15_QUALPRD 0\n#define MW_GPIO16_23_GPIOQUALSEL16 0\n#define MW_GPIO16_23_GPIOQUALSEL17 0\n#define MW_GPIO16_23_GPIOQUALSEL18 0\n#define MW_GPIO16_23_GPIOQUALSEL19 0\n#define MW_GPIO16_23_GPIOQUALSEL20 0\n#define MW_GPIO16_23_GPIOQUALSEL21 0\n#define MW_GPIO16_23_GPIOQUALSEL22 0\n#define MW_GPIO16_23_GPIOQUALSEL23 0\n#define MW_GPIO16_23_QUALPRD 0\n#define MW_GPIO24_31_GPIOQUALSEL24 0\n#define MW_GPIO24_31_GPIOQUALSEL25 0\n#define MW_GPIO24_31_GPIOQUALSEL26 0\n#define MW_GPIO24_31_GPIOQUALSEL27 0\n#define MW_GPIO24_31_GPIOQUALSEL28 0\n#define MW_GPIO24_31_GPIOQUALSEL29 0\n#define MW_GPIO24_31_GPIOQUALSEL30 0\n#define MW_GPIO24_31_GPIOQUALSEL31 0\n#define MW_GPIO24_31_QUALPRD 0\n#define MW_GPIO32_39_GPIOQUALSEL32 0\n#define MW_GPIO32_39_GPIOQUALSEL33 0\n#define MW_GPIO32_39_GPIOQUALSEL34 0\n#define MW_GPIO32_39_GPIOQUALSEL35 0\n#define MW_GPIO32_39_GPIOQUALSEL36 0\n#define MW_GPIO32_39_GPIOQUALSEL37 0\n#define MW_GPIO32_39_GPIOQUALSEL38 0\n#define MW_GPIO32_39_GPIOQUALSEL39 0\n#define MW_GPIO32_39_QUALPRD 0\n#define MW_GPIO40_47_GPIOQUALSEL40 0\n#define MW_GPIO40_47_GPIOQUALSEL41 0\n#define MW_GPIO40_47_GPIOQUALSEL42 0\n#define MW_GPIO40_47_GPIOQUALSEL43 0\n#define MW_GPIO40_47_GPIOQUALSEL44 0\n#define MW_GPIO40_47_GPIOQUALSEL45 0\n#define MW_GPIO40_47_GPIOQUALSEL46 0\n#define MW_GPIO40_47_GPIOQUALSEL47 0\n#define MW_GPIO40_47_QUALPRD 0\n#define MW_GPIO48_55_GPIOQUALSEL48 0\n#define MW_GPIO48_55_GPIOQUALSEL49 0\n#define MW_GPIO48_55_GPIOQUALSEL50 0\n#define MW_GPIO48_55_GPIOQUALSEL51 0\n#define MW_GPIO48_55_GPIOQUALSEL52 0\n#define MW_GPIO48_55_GPIOQUALSEL53 0\n#define MW_GPIO48_55_GPIOQUALSEL54 0\n#define MW_GPIO48_55_GPIOQUALSEL55 0\n#define MW_GPIO48_55_QUALPRD 0\n#define MW_GPIO56_63_GPIOQUALSEL56 0\n#define MW_GPIO56_63_GPIOQUALSEL57 0\n#define MW_GPIO56_63_GPIOQUALSEL58 0\n#define MW_GPIO56_63_GPIOQUALSEL59 0\n#define MW_GPIO56_63_GPIOQUALSEL60 0\n#define MW_GPIO56_63_GPIOQUALSEL61 0\n#define MW_GPIO56_63_GPIOQUALSEL62 0\n#define MW_GPIO56_63_GPIOQUALSEL63 0\n#define MW_GPIO56_63_QUALPRD 0\n#define MW_GPIO64_71_GPIOQUALSEL64 0\n#define MW_GPIO64_71_GPIOQUALSEL65 0\n#define MW_GPIO64_71_GPIOQUALSEL66 0\n#define MW_GPIO64_71_GPIOQUALSEL67 0\n#define MW_GPIO64_71_GPIOQUALSEL68 0\n#define MW_GPIO64_71_GPIOQUALSEL69 0\n#define MW_GPIO64_71_GPIOQUALSEL70 0\n#define MW_GPIO64_71_GPIOQUALSEL71 0\n#define MW_GPIO64_71_QUALPRD 0\n#define MW_GPIO72_79_GPIOQUALSEL72 0\n#define MW_GPIO72_79_GPIOQUALSEL73 0\n#define MW_GPIO72_79_GPIOQUALSEL74 0\n#define MW_GPIO72_79_GPIOQUALSEL75 0\n#define MW_GPIO72_79_GPIOQUALSEL76 0\n#define MW_GPIO72_79_GPIOQUALSEL77 0\n#define MW_GPIO72_79_GPIOQUALSEL78 0\n#define MW_GPIO72_79_GPIOQUALSEL79 0\n#define MW_GPIO72_79_QUALPRD 0\n#define MW_GPIO80_87_GPIOQUALSEL80 0\n#define MW_GPIO80_87_GPIOQUALSEL81 0\n#define MW_GPIO80_87_GPIOQUALSEL82 0\n#define MW_GPIO80_87_GPIOQUALSEL83 0\n#define MW_GPIO80_87_GPIOQUALSEL84 0\n#define MW_GPIO80_87_GPIOQUALSEL85 0\n#define MW_GPIO80_87_GPIOQUALSEL86 0\n#define MW_GPIO80_87_GPIOQUALSEL87 0\n#define MW_GPIO80_87_QUALPRD 0\n#define MW_GPIO88_95_GPIOQUALSEL88 0\n#define MW_GPIO88_95_GPIOQUALSEL89 0\n#define MW_GPIO88_95_GPIOQUALSEL90 0\n#define MW_GPIO88_95_GPIOQUALSEL91 0\n#define MW_GPIO88_95_GPIOQUALSEL92 0\n#define MW_GPIO88_95_GPIOQUALSEL93 0\n#define MW_GPIO88_95_GPIOQUALSEL94 0\n#define MW_GPIO88_95_GPIOQUALSEL95 0\n#define MW_GPIO88_95_QUALPRD 0\n#define MW_GPIO96_103_GPIOQUALSEL96 0\n#define MW_GPIO96_103_GPIOQUALSEL97 0\n#define MW_GPIO96_103_GPIOQUALSEL98 0\n#define MW_GPIO96_103_GPIOQUALSEL99 0\n#define MW_GPIO96_103_GPIOQUALSEL100 0\n#define MW_GPIO96_103_GPIOQUALSEL101 0\n#define MW_GPIO96_103_GPIOQUALSEL102 0\n#define MW_GPIO96_103_GPIOQUALSEL103 0\n#define MW_GPIO96_103_QUALPRD 0\n#define MW_GPIO104_111_GPIOQUALSEL104 0\n#define MW_GPIO104_111_GPIOQUALSEL105 0\n#define MW_GPIO104_111_GPIOQUALSEL106 0\n#define MW_GPIO104_111_GPIOQUALSEL107 0\n#define MW_GPIO104_111_GPIOQUALSEL108 0\n#define MW_GPIO104_111_GPIOQUALSEL109 0\n#define MW_GPIO104_111_GPIOQUALSEL110 0\n#define MW_GPIO104_111_GPIOQUALSEL111 0\n#define MW_GPIO104_111_QUALPRD 0\n#define MW_GPIO112_119_GPIOQUALSEL112 0\n#define MW_GPIO112_119_GPIOQUALSEL113 0\n#define MW_GPIO112_119_GPIOQUALSEL114 0\n#define MW_GPIO112_119_GPIOQUALSEL115 0\n#define MW_GPIO112_119_GPIOQUALSEL116 0\n#define MW_GPIO112_119_GPIOQUALSEL117 0\n#define MW_GPIO112_119_GPIOQUALSEL118 0\n#define MW_GPIO112_119_GPIOQUALSEL119 0\n#define MW_GPIO112_119_QUALPRD 0\n#define MW_GPIO120_127_GPIOQUALSEL120 0\n#define MW_GPIO120_127_GPIOQUALSEL121 0\n#define MW_GPIO120_127_GPIOQUALSEL122 0\n#define MW_GPIO120_127_GPIOQUALSEL123 0\n#define MW_GPIO120_127_GPIOQUALSEL124 0\n#define MW_GPIO120_127_GPIOQUALSEL125 0\n#define MW_GPIO120_127_GPIOQUALSEL126 0\n#define MW_GPIO120_127_GPIOQUALSEL127 0\n#define MW_GPIO120_127_QUALPRD 0\n#define MW_GPIO128_135_GPIOQUALSEL128 0\n#define MW_GPIO128_135_GPIOQUALSEL129 0\n#define MW_GPIO128_135_GPIOQUALSEL130 0\n#define MW_GPIO128_135_GPIOQUALSEL131 0\n#define MW_GPIO128_135_GPIOQUALSEL132 0\n#define MW_GPIO128_135_GPIOQUALSEL133 0\n#define MW_GPIO128_135_GPIOQUALSEL134 0\n#define MW_GPIO128_135_GPIOQUALSEL135 0\n#define MW_GPIO128_135_QUALPRD 0\n#define MW_GPIO136_143_GPIOQUALSEL136 0\n#define MW_GPIO136_143_GPIOQUALSEL137 0\n#define MW_GPIO136_143_GPIOQUALSEL138 0\n#define MW_GPIO136_143_GPIOQUALSEL139 0\n#define MW_GPIO136_143_GPIOQUALSEL140 0\n#define MW_GPIO136_143_GPIOQUALSEL141 0\n#define MW_GPIO136_143_GPIOQUALSEL142 0\n#define MW_GPIO136_143_GPIOQUALSEL143 0\n#define MW_GPIO136_143_QUALPRD 0\n#define MW_GPIO144_151_GPIOQUALSEL144 0\n#define MW_GPIO144_151_GPIOQUALSEL145 0\n#define MW_GPIO144_151_GPIOQUALSEL146 0\n#define MW_GPIO144_151_GPIOQUALSEL147 0\n#define MW_GPIO144_151_GPIOQUALSEL148 0\n#define MW_GPIO144_151_GPIOQUALSEL149 0\n#define MW_GPIO144_151_GPIOQUALSEL150 0\n#define MW_GPIO144_151_GPIOQUALSEL151 0\n#define MW_GPIO144_151_QUALPRD 0\n#define MW_GPIO152_159_GPIOQUALSEL152 0\n#define MW_GPIO152_159_GPIOQUALSEL153 0\n#define MW_GPIO152_159_GPIOQUALSEL154 0\n#define MW_GPIO152_159_GPIOQUALSEL155 0\n#define MW_GPIO152_159_GPIOQUALSEL156 0\n#define MW_GPIO152_159_GPIOQUALSEL157 0\n#define MW_GPIO152_159_GPIOQUALSEL158 0\n#define MW_GPIO152_159_GPIOQUALSEL159 0\n#define MW_GPIO152_159_QUALPRD 0\n#define MW_GPIO160_167_GPIOQUALSEL160 0\n#define MW_GPIO160_167_GPIOQUALSEL161 0\n#define MW_GPIO160_167_GPIOQUALSEL162 0\n#define MW_GPIO160_167_GPIOQUALSEL163 0\n#define MW_GPIO160_167_GPIOQUALSEL164 0\n#define MW_GPIO160_167_GPIOQUALSEL165 0\n#define MW_GPIO160_167_GPIOQUALSEL166 0\n#define MW_GPIO160_167_GPIOQUALSEL167 0\n#define MW_GPIO160_167_QUALPRD 0\n#define MW_GPIO168_175_GPIOQUALSEL168 0\n#define MW_GPIO168_175_GPIOQUALSEL169 0\n#define MW_GPIO168_175_GPIOQUALSEL170 0\n#define MW_GPIO168_175_GPIOQUALSEL171 0\n#define MW_GPIO168_175_GPIOQUALSEL172 0\n#define MW_GPIO168_175_GPIOQUALSEL173 0\n#define MW_GPIO168_175_GPIOQUALSEL174 0\n#define MW_GPIO168_175_GPIOQUALSEL175 0\n#define MW_GPIO168_175_QUALPRD 0\n#define MW_DMA_CH1_ENABLEDMACHANNEL 0\n#define MW_DMA_CH1_DATASIZE 0\n#define MW_DMA_CH1_INTERRUPTSRC 0\n#define MW_DMA_CH1_BURSTSIZE 0\n#define MW_DMA_CH1_TRANSFERSIZE 1\n#define MW_DMA_CH1_SRCBEGINADD 0xC000\n#define MW_DMA_CH1_DSTBEGINADD 0xD000\n#define MW_DMA_CH1_SRCBURSTSTEP 0\n#define MW_DMA_CH1_DSTBURSTSTEP 0\n#define MW_DMA_CH1_SRCTRANSSTEP 0\n#define MW_DMA_CH1_DSTTRANSSTEP 0\n#define MW_DMA_CH1_WRAPSRCSIZE 65536\n#define MW_DMA_CH1_WRAPDSTSIZE 65536\n#define MW_DMA_CH1_SRCWRAPSTEP 0\n#define MW_DMA_CH1_DSTWRAPSTEP 0\n#define MW_DMA_CH1_SETCH1TOHIGH 0\n#define MW_DMA_CH1_ENABLEONESHOT 0\n#define MW_DMA_CH1_ENABLECONTINUOUS 1\n#define MW_DMA_CH1_GENINTERRUPT 0\n#define MW_DMA_CH1_ENABLEOVERFLOW 0\n#define MW_DMA_CH2_ENABLEDMACHANNEL 0\n#define MW_DMA_CH2_DATASIZE 0\n#define MW_DMA_CH2_INTERRUPTSRC 0\n#define MW_DMA_CH2_BURSTSIZE 0\n#define MW_DMA_CH2_TRANSFERSIZE 1\n#define MW_DMA_CH2_SRCBEGINADD 0xC000\n#define MW_DMA_CH2_DSTBEGINADD 0xD000\n#define MW_DMA_CH2_SRCBURSTSTEP 0\n#define MW_DMA_CH2_DSTBURSTSTEP 0\n#define MW_DMA_CH2_SRCTRANSSTEP 0\n#define MW_DMA_CH2_DSTTRANSSTEP 0\n#define MW_DMA_CH2_WRAPSRCSIZE 65536\n#define MW_DMA_CH2_WRAPDSTSIZE 65536\n#define MW_DMA_CH2_SRCWRAPSTEP 0\n#define MW_DMA_CH2_DSTWRAPSTEP 0\n#define MW_DMA_CH2_ENABLEONESHOT 0\n#define MW_DMA_CH2_ENABLECONTINUOUS 1\n#define MW_DMA_CH2_GENINTERRUPT 0\n#define MW_DMA_CH2_ENABLEOVERFLOW 0\n#define MW_DMA_CH3_ENABLEDMACHANNEL 0\n#define MW_DMA_CH3_DATASIZE 0\n#define MW_DMA_CH3_INTERRUPTSRC 0\n#define MW_DMA_CH3_BURSTSIZE 0\n#define MW_DMA_CH3_TRANSFERSIZE 1\n#define MW_DMA_CH3_SRCBEGINADD 0xC000\n#define MW_DMA_CH3_DSTBEGINADD 0xD000\n#define MW_DMA_CH3_SRCBURSTSTEP 0\n#define MW_DMA_CH3_DSTBURSTSTEP 0\n#define MW_DMA_CH3_SRCTRANSSTEP 0\n#define MW_DMA_CH3_DSTTRANSSTEP 0\n#define MW_DMA_CH3_WRAPSRCSIZE 65536\n#define MW_DMA_CH3_WRAPDSTSIZE 65536\n#define MW_DMA_CH3_SRCWRAPSTEP 0\n#define MW_DMA_CH3_DSTWRAPSTEP 0\n#define MW_DMA_CH3_ENABLEONESHOT 0\n#define MW_DMA_CH3_ENABLECONTINUOUS 1\n#define MW_DMA_CH3_GENINTERRUPT 0\n#define MW_DMA_CH3_ENABLEOVERFLOW 0\n#define MW_DMA_CH4_ENABLEDMACHANNEL 0\n#define MW_DMA_CH4_DATASIZE 0\n#define MW_DMA_CH4_INTERRUPTSRC 0\n#define MW_DMA_CH4_BURSTSIZE 0\n#define MW_DMA_CH4_TRANSFERSIZE 1\n#define MW_DMA_CH4_SRCBEGINADD 0xC000\n#define MW_DMA_CH4_DSTBEGINADD 0xD000\n#define MW_DMA_CH4_SRCBURSTSTEP 0\n#define MW_DMA_CH4_DSTBURSTSTEP 0\n#define MW_DMA_CH4_SRCTRANSSTEP 0\n#define MW_DMA_CH4_DSTTRANSSTEP 0\n#define MW_DMA_CH4_WRAPSRCSIZE 65536\n#define MW_DMA_CH4_WRAPDSTSIZE 65536\n#define MW_DMA_CH4_SRCWRAPSTEP 0\n#define MW_DMA_CH4_DSTWRAPSTEP 0\n#define MW_DMA_CH4_ENABLEONESHOT 0\n#define MW_DMA_CH4_ENABLECONTINUOUS 1\n#define MW_DMA_CH4_GENINTERRUPT 0\n#define MW_DMA_CH4_ENABLEOVERFLOW 0\n#define MW_DMA_CH5_ENABLEDMACHANNEL 0\n#define MW_DMA_CH5_DATASIZE 0\n#define MW_DMA_CH5_INTERRUPTSRC 0\n#define MW_DMA_CH5_BURSTSIZE 0\n#define MW_DMA_CH5_TRANSFERSIZE 1\n#define MW_DMA_CH5_SRCBEGINADD 0xC000\n#define MW_DMA_CH5_DSTBEGINADD 0xD000\n#define MW_DMA_CH5_SRCBURSTSTEP 0\n#define MW_DMA_CH5_DSTBURSTSTEP 0\n#define MW_DMA_CH5_SRCTRANSSTEP 0\n#define MW_DMA_CH5_DSTTRANSSTEP 0\n#define MW_DMA_CH5_WRAPSRCSIZE 65536\n#define MW_DMA_CH5_WRAPDSTSIZE 65536\n#define MW_DMA_CH5_SRCWRAPSTEP 0\n#define MW_DMA_CH5_DSTWRAPSTEP 0\n#define MW_DMA_CH5_ENABLEONESHOT 0\n#define MW_DMA_CH5_ENABLECONTINUOUS 1\n#define MW_DMA_CH5_GENINTERRUPT 0\n#define MW_DMA_CH5_ENABLEOVERFLOW 0\n#define MW_DMA_CH6_ENABLEDMACHANNEL 0\n#define MW_DMA_CH6_DATASIZE 0\n#define MW_DMA_CH6_INTERRUPTSRC 0\n#define MW_DMA_CH6_BURSTSIZE 0\n#define MW_DMA_CH6_TRANSFERSIZE 1\n#define MW_DMA_CH6_SRCBEGINADD 0xC000\n#define MW_DMA_CH6_DSTBEGINADD 0xD000\n#define MW_DMA_CH6_SRCBURSTSTEP 0\n#define MW_DMA_CH6_DSTBURSTSTEP 0\n#define MW_DMA_CH6_SRCTRANSSTEP 0\n#define MW_DMA_CH6_DSTTRANSSTEP 0\n#define MW_DMA_CH6_WRAPSRCSIZE 65536\n#define MW_DMA_CH6_WRAPDSTSIZE 65536\n#define MW_DMA_CH6_SRCWRAPSTEP 0\n#define MW_DMA_CH6_DSTWRAPSTEP 0\n#define MW_DMA_CH6_ENABLEONESHOT 0\n#define MW_DMA_CH6_ENABLECONTINUOUS 1\n#define MW_DMA_CH6_GENINTERRUPT 0\n#define MW_DMA_CH6_ENABLEOVERFLOW 0\n#define MW_XINT_GPIOXINT1SEL 99\n#define MW_XINT_GPIOXINT2SEL 0\n#define MW_XINT_GPIOXINT3SEL 0\n#define MW_XINT_GPIOXINT4SEL 0\n#define MW_XINT_GPIOXINT5SEL 0\n#define MW_XINT_POLARITY1 0\n#define MW_XINT_POLARITY2 0\n#define MW_XINT_POLARITY3 0\n#define MW_XINT_POLARITY4 0\n#define MW_XINT_POLARITY5 0\n#define MW_XINT_GPIOXINT1SEL_IXBAR 0\n#define MW_XINT_GPIOXINT2SEL_IXBAR 0\n#define MW_XINT_GPIOXINT3SEL_IXBAR 0\n#define MW_XINT_GPIOXINT4SEL_IXBAR 0\n#define MW_XINT_GPIOXINT5SEL_IXBAR 0\n#define MW_EXTMODECOMPORT -1\n#define MW_EXECUTIONPROFILEBUFFERLEN 50.000000\n#define MW_DATAVERSION 2016.02\n#define MW_EMIF1_CLOCKDIV 1\n#define MW_EMIF1_CLOCKFREQUENCY 100\n#define MW_EMIF1_CS0 0\n#define MW_EMIF1_COLUMNADDRESS 0\n#define MW_EMIF1_PAGESIZE 256\n#define MW_EMIF1_BANKS 0\n#define MW_EMIF1_BUSWIDTH 0\n#define MW_EMIF1_T_RFC 3\n#define MW_EMIF1_T_RFC_NS 40\n#define MW_EMIF1_T_RP 1\n#define MW_EMIF1_T_RP_NS 20\n#define MW_EMIF1_T_RCD 2\n#define MW_EMIF1_T_RCD_NS 30\n#define MW_EMIF1_T_WR 1\n#define MW_EMIF1_T_WR_NS 20\n#define MW_EMIF1_T_RAS 4\n#define MW_EMIF1_T_RAS_NS 50\n#define MW_EMIF1_T_RC 6\n#define MW_EMIF1_T_RC_NS 70\n#define MW_EMIF1_T_RRD 1\n#define MW_EMIF1_T_RRD_NS 20\n#define MW_EMIF1_T_XSR 7\n#define MW_EMIF1_T_XSR_NS 80\n#define MW_EMIF1_REFRESHPERIOD 64\n#define MW_EMIF1_REFRESHCYCLE 4096\n#define MW_EMIF1_REFRESHRATE 1562\n#define MW_EMIF1_CASLATENCY 1\n#define MW_EMIF1_CS2 0\n#define MW_EMIF1_CS2_ASYNCHRONOUSMODE 0\n#define MW_EMIF1_CS2_ASYNCDATAWIDTH 1\n#define MW_EMIF1_CS2_R_SETUP 15\n#define MW_EMIF1_CS2_R_SETUP_NS 160\n#define MW_EMIF1_CS2_R_STROBE 63\n#define MW_EMIF1_CS2_R_STROBE_NS 640\n#define MW_EMIF1_CS2_R_HOLD 7\n#define MW_EMIF1_CS2_R_HOLD_NS 80\n#define MW_EMIF1_CS2_W_SETUP 15\n#define MW_EMIF1_CS2_W_SETUP_NS 160\n#define MW_EMIF1_CS2_W_STROBE 63\n#define MW_EMIF1_CS2_W_STROBE_NS 640\n#define MW_EMIF1_CS2_W_HOLD 7\n#define MW_EMIF1_CS2_W_HOLD_NS 80\n#define MW_EMIF1_CS2_TA_CYCLES 3\n#define MW_EMIF1_CS2_EXTEND_WAIT_ENABLE 0\n#define MW_EMIF1_CS3 0\n#define MW_EMIF1_CS3_ASYNCHRONOUSMODE 0\n#define MW_EMIF1_CS3_ASYNCDATAWIDTH 1\n#define MW_EMIF1_CS3_R_SETUP 15\n#define MW_EMIF1_CS3_R_SETUP_NS 160\n#define MW_EMIF1_CS3_R_STROBE 63\n#define MW_EMIF1_CS3_R_STROBE_NS 640\n#define MW_EMIF1_CS3_R_HOLD 7\n#define MW_EMIF1_CS3_R_HOLD_NS 80\n#define MW_EMIF1_CS3_W_SETUP 15\n#define MW_EMIF1_CS3_W_SETUP_NS 160\n#define MW_EMIF1_CS3_W_STROBE 63\n#define MW_EMIF1_CS3_W_STROBE_NS 640\n#define MW_EMIF1_CS3_W_HOLD 7\n#define MW_EMIF1_CS3_W_HOLD_NS 80\n#define MW_EMIF1_CS3_TA_CYCLES 3\n#define MW_EMIF1_CS3_EXTEND_WAIT_ENABLE 0\n#define MW_EMIF1_CS4 0\n#define MW_EMIF1_CS4_ASYNCHRONOUSMODE 0\n#define MW_EMIF1_CS4_ASYNCDATAWIDTH 1\n#define MW_EMIF1_CS4_R_SETUP 15\n#define MW_EMIF1_CS4_R_SETUP_NS 160\n#define MW_EMIF1_CS4_R_STROBE 63\n#define MW_EMIF1_CS4_R_STROBE_NS 640\n#define MW_EMIF1_CS4_R_HOLD 7\n#define MW_EMIF1_CS4_R_HOLD_NS 80\n#define MW_EMIF1_CS4_W_SETUP 15\n#define MW_EMIF1_CS4_W_SETUP_NS 160\n#define MW_EMIF1_CS4_W_STROBE 63\n#define MW_EMIF1_CS4_W_STROBE_NS 640\n#define MW_EMIF1_CS4_W_HOLD 7\n#define MW_EMIF1_CS4_W_HOLD_NS 80\n#define MW_EMIF1_CS4_TA_CYCLES 3\n#define MW_EMIF1_CS4_EXTEND_WAIT_ENABLE 0\n#define MW_EMIF1_EXTENDED_WAIT_CYCLE 128\n#define MW_EMIF1_EXTENDED_WAIT_POLARITY 0\n#define MW_EMIF1_WAITRISE 0\n#define MW_EMIF1_TIMEOUT 0\n#define MW_EMIF1_LINETRAP 0\n#define MW_EMIF2_CLOCKDIV 1\n#define MW_EMIF2_CLOCKFREQUENCY 100\n#define MW_EMIF2_CS0 0\n#define MW_EMIF2_COLUMNADDRESS 0\n#define MW_EMIF2_PAGESIZE 256\n#define MW_EMIF2_BANKS 0\n#define MW_EMIF2_BUSWIDTH 0\n#define MW_EMIF2_T_RFC 3\n#define MW_EMIF2_T_RFC_NS 40\n#define MW_EMIF2_T_RP 1\n#define MW_EMIF2_T_RP_NS 20\n#define MW_EMIF2_T_RCD 2\n#define MW_EMIF2_T_RCD_NS 30\n#define MW_EMIF2_T_WR 1\n#define MW_EMIF2_T_WR_NS 20\n#define MW_EMIF2_T_RAS 4\n#define MW_EMIF2_T_RAS_NS 50\n#define MW_EMIF2_T_RC 6\n#define MW_EMIF2_T_RC_NS 70\n#define MW_EMIF2_T_RRD 1\n#define MW_EMIF2_T_RRD_NS 20\n#define MW_EMIF2_T_XSR 7\n#define MW_EMIF2_T_XSR_NS 80\n#define MW_EMIF2_REFRESHPERIOD 64\n#define MW_EMIF2_REFRESHCYCLE 4096\n#define MW_EMIF2_REFRESHRATE 1562\n#define MW_EMIF2_CASLATENCY 1\n#define MW_EMIF2_CS2 0\n#define MW_EMIF2_CS2_ASYNCHRONOUSMODE 0\n#define MW_EMIF2_CS2_ASYNCDATAWIDTH 1\n#define MW_EMIF2_CS2_R_SETUP 15\n#define MW_EMIF2_CS2_R_SETUP_NS 160\n#define MW_EMIF2_CS2_R_STROBE 63\n#define MW_EMIF2_CS2_R_STROBE_NS 640\n#define MW_EMIF2_CS2_R_HOLD 7\n#define MW_EMIF2_CS2_R_HOLD_NS 80\n#define MW_EMIF2_CS2_W_SETUP 15\n#define MW_EMIF2_CS2_W_SETUP_NS 160\n#define MW_EMIF2_CS2_W_STROBE 63\n#define MW_EMIF2_CS2_W_STROBE_NS 640\n#define MW_EMIF2_CS2_W_HOLD 7\n#define MW_EMIF2_CS2_W_HOLD_NS 80\n#define MW_EMIF2_CS2_TA_CYCLES 3\n#define MW_EMIF2_CS2_EXTEND_WAIT_ENABLE 0\n#define MW_EMIF2_EXTENDED_WAIT_CYCLE 128\n#define MW_EMIF2_EXTENDED_WAIT_POLARITY 0\n#define MW_EMIF2_WAITRISE 0\n#define MW_EMIF2_TIMEOUT 0\n#define MW_EMIF2_LINETRAP 0\n#define MW_SDCARD_ENABLE 0\n#define MW_SDCARD_SPIMODULE 0\n#define MW_SDCARD_SPIBAUDRATE 1\n#define MW_CMPSS_ENABLE_MODULE_CMPSS1 0\n#define MW_CMPSS_CMPSS1_COMPH 0\n#define MW_CMPSS_CMPSS1_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS1_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS1_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS1_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS1_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS1_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS1_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS1_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS1_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS1_COMPL 0\n#define MW_CMPSS_CMPSS1_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS1_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS1_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS1_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS1_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS1_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS1_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS1_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS1_COMP_SELREF 0\n#define MW_CMPSS_CMPSS1_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS1_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS1_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS2 0\n#define MW_CMPSS_CMPSS2_COMPH 0\n#define MW_CMPSS_CMPSS2_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS2_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS2_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS2_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS2_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS2_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS2_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS2_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS2_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS2_COMPL 0\n#define MW_CMPSS_CMPSS2_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS2_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS2_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS2_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS2_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS2_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS2_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS2_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS2_COMP_SELREF 0\n#define MW_CMPSS_CMPSS2_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS2_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS2_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS3 0\n#define MW_CMPSS_CMPSS3_COMPH 0\n#define MW_CMPSS_CMPSS3_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS3_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS3_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS3_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS3_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS3_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS3_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS3_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS3_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS3_COMPL 0\n#define MW_CMPSS_CMPSS3_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS3_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS3_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS3_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS3_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS3_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS3_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS3_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS3_COMP_SELREF 0\n#define MW_CMPSS_CMPSS3_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS3_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS3_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS4 0\n#define MW_CMPSS_CMPSS4_COMPH 0\n#define MW_CMPSS_CMPSS4_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS4_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS4_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS4_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS4_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS4_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS4_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS4_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS4_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS4_COMPL 0\n#define MW_CMPSS_CMPSS4_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS4_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS4_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS4_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS4_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS4_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS4_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS4_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS4_COMP_SELREF 0\n#define MW_CMPSS_CMPSS4_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS4_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS4_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS5 0\n#define MW_CMPSS_CMPSS5_COMPH 0\n#define MW_CMPSS_CMPSS5_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS5_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS5_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS5_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS5_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS5_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS5_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS5_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS5_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS5_COMPL 0\n#define MW_CMPSS_CMPSS5_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS5_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS5_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS5_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS5_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS5_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS5_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS5_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS5_COMP_SELREF 0\n#define MW_CMPSS_CMPSS5_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS5_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS5_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS6 0\n#define MW_CMPSS_CMPSS6_COMPH 0\n#define MW_CMPSS_CMPSS6_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS6_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS6_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS6_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS6_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS6_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS6_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS6_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS6_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS6_COMPL 0\n#define MW_CMPSS_CMPSS6_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS6_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS6_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS6_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS6_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS6_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS6_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS6_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS6_COMP_SELREF 0\n#define MW_CMPSS_CMPSS6_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS6_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS6_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS7 0\n#define MW_CMPSS_CMPSS7_COMPH 0\n#define MW_CMPSS_CMPSS7_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS7_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS7_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS7_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS7_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS7_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS7_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS7_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS7_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS7_COMPL 0\n#define MW_CMPSS_CMPSS7_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS7_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS7_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS7_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS7_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS7_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS7_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS7_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS7_COMP_SELREF 0\n#define MW_CMPSS_CMPSS7_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS7_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS7_COMP_COMPHYS 0\n#define MW_CMPSS_ENABLE_MODULE_CMPSS8 0\n#define MW_CMPSS_CMPSS8_COMPH 0\n#define MW_CMPSS_CMPSS8_COMPH_RAMPLOADSEL 0\n#define MW_CMPSS_CMPSS8_COMPH_COMPHINV 0\n#define MW_CMPSS_CMPSS8_COMPH_HSYNCCLREN 0\n#define MW_CMPSS_CMPSS8_COMPH_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS8_COMPH_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS8_COMPH_SAMPWIN 0\n#define MW_CMPSS_CMPSS8_COMPH_THRESH 0\n#define MW_CMPSS_CMPSS8_COMPH_CTRIPH 0\n#define MW_CMPSS_CMPSS8_COMPH_CTRIPOUTH 0\n#define MW_CMPSS_CMPSS8_COMPL 0\n#define MW_CMPSS_CMPSS8_COMPL_COMPLINV 0\n#define MW_CMPSS_CMPSS8_COMPL_LSYNCCLREN 0\n#define MW_CMPSS_CMPSS8_COMPL_DIGITALFILTER 0\n#define MW_CMPSS_CMPSS8_COMPL_CLKPRESCALE 0\n#define MW_CMPSS_CMPSS8_COMPL_SAMPWIN 0\n#define MW_CMPSS_CMPSS8_COMPL_THRESH 0\n#define MW_CMPSS_CMPSS8_COMPL_CTRIPL 0\n#define MW_CMPSS_CMPSS8_COMPL_CTRIPOUTL 0\n#define MW_CMPSS_CMPSS8_COMP_SELREF 0\n#define MW_CMPSS_CMPSS8_COMP_SWLOADSEL 0\n#define MW_CMPSS_CMPSS8_COMP_RAMPSOURCE 0\n#define MW_CMPSS_CMPSS8_COMP_COMPHYS 0\n#define MW_SDFM1_F1 0\n#define MW_SDFM1_D1 0\n#define MW_SDFM1_C1 0\n#define MW_SDFM1_F1_MODE 0\n#define MW_SDFM1_F1_C_FILTERTYPE 1\n#define MW_SDFM1_F1_COSR 0\n#define MW_SDFM1_F1_HLT 0\n#define MW_SDFM1_F1_LLT 0\n#define MW_SDFM1_F1_D_FILTERTYPE 1\n#define MW_SDFM1_F1_DOSR 0\n#define MW_SDFM1_F1_EXTPWM 0\n#define MW_SDFM1_F1_IEL 0\n#define MW_SDFM1_F1_IEH 0\n#define MW_SDFM1_F1_MFIE 0\n#define MW_SDFM1_F1_AE 0\n#define MW_SDFM1_F2 0\n#define MW_SDFM1_D2 0\n#define MW_SDFM1_C2 0\n#define MW_SDFM1_F2_MODE 0\n#define MW_SDFM1_F2_C_FILTERTYPE 1\n#define MW_SDFM1_F2_COSR 0\n#define MW_SDFM1_F2_HLT 0\n#define MW_SDFM1_F2_LLT 0\n#define MW_SDFM1_F2_D_FILTERTYPE 1\n#define MW_SDFM1_F2_DOSR 0\n#define MW_SDFM1_F2_EXTPWM 0\n#define MW_SDFM1_F2_IEL 0\n#define MW_SDFM1_F2_IEH 0\n#define MW_SDFM1_F2_MFIE 0\n#define MW_SDFM1_F2_AE 0\n#define MW_SDFM1_F3 0\n#define MW_SDFM1_D3 0\n#define MW_SDFM1_C3 0\n#define MW_SDFM1_F3_MODE 0\n#define MW_SDFM1_F3_C_FILTERTYPE 1\n#define MW_SDFM1_F3_COSR 0\n#define MW_SDFM1_F3_HLT 0\n#define MW_SDFM1_F3_LLT 0\n#define MW_SDFM1_F3_D_FILTERTYPE 1\n#define MW_SDFM1_F3_DOSR 0\n#define MW_SDFM1_F3_EXTPWM 0\n#define MW_SDFM1_F3_IEL 0\n#define MW_SDFM1_F3_IEH 0\n#define MW_SDFM1_F3_MFIE 0\n#define MW_SDFM1_F3_AE 0\n#define MW_SDFM1_F4 0\n#define MW_SDFM1_D4 0\n#define MW_SDFM1_C4 0\n#define MW_SDFM1_F4_MODE 0\n#define MW_SDFM1_F4_C_FILTERTYPE 1\n#define MW_SDFM1_F4_COSR 0\n#define MW_SDFM1_F4_HLT 0\n#define MW_SDFM1_F4_LLT 0\n#define MW_SDFM1_F4_D_FILTERTYPE 1\n#define MW_SDFM1_F4_DOSR 0\n#define MW_SDFM1_F4_EXTPWM 0\n#define MW_SDFM1_F4_IEL 0\n#define MW_SDFM1_F4_IEH 0\n#define MW_SDFM1_F4_MFIE 0\n#define MW_SDFM1_F4_AE 0\n#define MW_SDFM1_PINVALUE_D1 16\n#define MW_SDFM1_PINVALUE_C1 17\n#define MW_SDFM1_PINVALUE_D2 18\n#define MW_SDFM1_PINVALUE_C2 19\n#define MW_SDFM1_PINVALUE_D3 20\n#define MW_SDFM1_PINVALUE_C3 21\n#define MW_SDFM1_PINVALUE_D4 22\n#define MW_SDFM1_PINVALUE_C4 23\n#define MW_SDFM1_PINMUX_D1 7\n#define MW_SDFM1_PINMUX_C1 7\n#define MW_SDFM1_PINMUX_D2 7\n#define MW_SDFM1_PINMUX_C2 7\n#define MW_SDFM1_PINMUX_D3 7\n#define MW_SDFM1_PINMUX_C3 7\n#define MW_SDFM1_PINMUX_D4 7\n#define MW_SDFM1_PINMUX_C4 7\n#define MW_SDFM2_F1 0\n#define MW_SDFM2_D1 0\n#define MW_SDFM2_C1 0\n#define MW_SDFM2_F1_MODE 0\n#define MW_SDFM2_F1_C_FILTERTYPE 1\n#define MW_SDFM2_F1_COSR 0\n#define MW_SDFM2_F1_HLT 0\n#define MW_SDFM2_F1_LLT 0\n#define MW_SDFM2_F1_D_FILTERTYPE 1\n#define MW_SDFM2_F1_DOSR 0\n#define MW_SDFM2_F1_EXTPWM 0\n#define MW_SDFM2_F1_IEL 0\n#define MW_SDFM2_F1_IEH 0\n#define MW_SDFM2_F1_MFIE 0\n#define MW_SDFM2_F1_AE 0\n#define MW_SDFM2_F2 0\n#define MW_SDFM2_D2 0\n#define MW_SDFM2_C2 0\n#define MW_SDFM2_F2_MODE 0\n#define MW_SDFM2_F2_C_FILTERTYPE 1\n#define MW_SDFM2_F2_COSR 0\n#define MW_SDFM2_F2_HLT 0\n#define MW_SDFM2_F2_LLT 0\n#define MW_SDFM2_F2_D_FILTERTYPE 1\n#define MW_SDFM2_F2_DOSR 0\n#define MW_SDFM2_F2_EXTPWM 0\n#define MW_SDFM2_F2_IEL 0\n#define MW_SDFM2_F2_IEH 0\n#define MW_SDFM2_F2_MFIE 0\n#define MW_SDFM2_F2_AE 0\n#define MW_SDFM2_F3 0\n#define MW_SDFM2_D3 0\n#define MW_SDFM2_C3 0\n#define MW_SDFM2_F3_MODE 0\n#define MW_SDFM2_F3_C_FILTERTYPE 1\n#define MW_SDFM2_F3_COSR 0\n#define MW_SDFM2_F3_HLT 0\n#define MW_SDFM2_F3_LLT 0\n#define MW_SDFM2_F3_D_FILTERTYPE 1\n#define MW_SDFM2_F3_DOSR 0\n#define MW_SDFM2_F3_EXTPWM 0\n#define MW_SDFM2_F3_IEL 0\n#define MW_SDFM2_F3_IEH 0\n#define MW_SDFM2_F3_MFIE 0\n#define MW_SDFM2_F3_AE 0\n#define MW_SDFM2_F4 0\n#define MW_SDFM2_D4 0\n#define MW_SDFM2_C4 0\n#define MW_SDFM2_F4_MODE 0\n#define MW_SDFM2_F4_C_FILTERTYPE 1\n#define MW_SDFM2_F4_COSR 0\n#define MW_SDFM2_F4_HLT 0\n#define MW_SDFM2_F4_LLT 0\n#define MW_SDFM2_F4_D_FILTERTYPE 1\n#define MW_SDFM2_F4_DOSR 0\n#define MW_SDFM2_F4_EXTPWM 0\n#define MW_SDFM2_F4_IEL 0\n#define MW_SDFM2_F4_IEH 0\n#define MW_SDFM2_F4_MFIE 0\n#define MW_SDFM2_F4_AE 0\n#define MW_SDFM2_PINVALUE_D1 24\n#define MW_SDFM2_PINVALUE_C1 25\n#define MW_SDFM2_PINVALUE_D2 26\n#define MW_SDFM2_PINVALUE_C2 27\n#define MW_SDFM2_PINVALUE_D3 28\n#define MW_SDFM2_PINVALUE_C3 29\n#define MW_SDFM2_PINVALUE_D4 30\n#define MW_SDFM2_PINVALUE_C4 31\n#define MW_SDFM2_PINMUX_D1 7\n#define MW_SDFM2_PINMUX_C1 7\n#define MW_SDFM2_PINMUX_D2 7\n#define MW_SDFM2_PINMUX_C2 7\n#define MW_SDFM2_PINMUX_D3 7\n#define MW_SDFM2_PINMUX_C3 7\n#define MW_SDFM2_PINMUX_D4 7\n#define MW_SDFM2_PINMUX_C4 7\n#define MW_PIL_COMMUNICATIONINTERFACE 0\n#define MW_PIL_SCIMODULE 0\n#define MW_PIL_COMPORT COM3\n#define MW_OVERRUNDETECTION_ENABLE_OVERRUN_DETECTION 0\n#define MW_OVERRUNDETECTION_CHECK_GPIO_STATUS 1\n#define MW_OVERRUNDETECTION_DIGITAL_OUTPUT_TO_SET_ON_OVERRUN 6\n#define MW_OVERRUNDETECTION_GPIOMODE 0\n#define MW_OVERRUNDETECTION_CUSTOM_LOGIC 0\n#define MW_OVERRUNDETECTION_PIE_NUMBER 0\n#define MW_OVERRUNDETECTION_CPU_NUMBER 0\n#define MW_OVERRUNDETECTION_CUSTOM_FUNCTION c2000_OverrunFunction\n#define MW_IXBAR_FLAG 49\n#define MW_IXBAR_I1 None\n#define MW_IXBAR_I2 None\n#define MW_IXBAR_I3 None\n#define MW_IXBAR_I4 99\n#define MW_IXBAR_I5 0\n#define MW_IXBAR_I6 0\n#define MW_IXBAR_I7 24\n#define MW_IXBAR_I8 25\n#define MW_IXBAR_I9 26\n#define MW_IXBAR_I10 20\n#define MW_IXBAR_I11 21\n#define MW_IXBAR_I12 23\n#define MW_IXBAR_I13 0\n#define MW_IXBAR_I14 0\n#define MW_IXBAR_ONE_TIME 0.000000\n#define MW_OUTPUTXBAR_OXBAR1 0\n#define MW_OUTPUTXBAR_OXBAR_MUX1 -1\n#define MW_OUTPUTXBAR_OXBAR1_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR1_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR1_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR1_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR2 0\n#define MW_OUTPUTXBAR_OXBAR_MUX2 -1\n#define MW_OUTPUTXBAR_OXBAR2_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR2_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR2_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR2_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR3 0\n#define MW_OUTPUTXBAR_OXBAR_MUX3 -1\n#define MW_OUTPUTXBAR_OXBAR3_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR3_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR3_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR3_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR4 0\n#define MW_OUTPUTXBAR_OXBAR_MUX4 -1\n#define MW_OUTPUTXBAR_OXBAR4_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR4_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR4_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR4_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR5 0\n#define MW_OUTPUTXBAR_OXBAR_MUX5 -1\n#define MW_OUTPUTXBAR_OXBAR5_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR5_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR5_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR5_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR6 0\n#define MW_OUTPUTXBAR_OXBAR_MUX6 -1\n#define MW_OUTPUTXBAR_OXBAR6_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR6_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR6_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR6_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR7 0\n#define MW_OUTPUTXBAR_OXBAR_MUX7 -1\n#define MW_OUTPUTXBAR_OXBAR7_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR7_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR7_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR7_INVERT 0\n#define MW_OUTPUTXBAR_OXBAR8 0\n#define MW_OUTPUTXBAR_OXBAR_MUX8 -1\n#define MW_OUTPUTXBAR_OXBAR8_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_OUTPUTXBAR_OXBAR8_GPIO 0\n#define MW_OUTPUTXBAR_OXBAR8_LATCH 0\n#define MW_OUTPUTXBAR_OXBAR8_INVERT 0\n#define MW_I2C_A_PINVALUE_SDA 32\n#define MW_I2C_A_PINVALUE_SCL 33\n#define MW_I2C_A_PINMUX_SDA 1\n#define MW_I2C_A_PINMUX_SCL 1\n#define MW_IOBLOCKSMODE deployed\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_HOSTINTERFACE Simulink\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERAUTO 1\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERSIZE 1000\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERNUM 3\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_MAXCONTIGSAMPLES 8\n#define MW_EXTMODEPROTOCOLINFO_XCPONCAN_HOSTINTERFACE Simulink\n#define MW_EXTMODEPROTOCOLINFO_XCPONCAN_LOGGINGBUFFERAUTO 1\n#define MW_EXTMODEPROTOCOLINFO_XCPONCAN_LOGGINGBUFFERSIZE 1000\n#define MW_EXTMODEPROTOCOLINFO_XCPONCAN_LOGGINGBUFFERNUM 3\n#define MW_EXTMODEPROTOCOLINFO_XCPONCAN_MAXCONTIGSAMPLES 10\n#define MW_CLA_LSCONFIGENABLE 0\n#define MW_CLA_PMLENGTH 0\n#define MW_CLA_DMLENGTH 1\n#define MW_CLA_CPULSLENGTH 6\n#define MW_CLBXBAR_AUXSIG0 0\n#define MW_CLBXBAR_AUXSIG_MUX0 -1\n#define MW_CLBXBAR_AUXSIG0_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG0_INVERT 0\n#define MW_CLBXBAR_AUXSIG1 0\n#define MW_CLBXBAR_AUXSIG_MUX1 -1\n#define MW_CLBXBAR_AUXSIG1_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG1_INVERT 0\n#define MW_CLBXBAR_AUXSIG2 0\n#define MW_CLBXBAR_AUXSIG_MUX2 -1\n#define MW_CLBXBAR_AUXSIG2_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG2_INVERT 0\n#define MW_CLBXBAR_AUXSIG3 0\n#define MW_CLBXBAR_AUXSIG_MUX3 -1\n#define MW_CLBXBAR_AUXSIG3_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG3_INVERT 0\n#define MW_CLBXBAR_AUXSIG4 0\n#define MW_CLBXBAR_AUXSIG_MUX4 -1\n#define MW_CLBXBAR_AUXSIG4_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG4_INVERT 0\n#define MW_CLBXBAR_AUXSIG5 0\n#define MW_CLBXBAR_AUXSIG_MUX5 -1\n#define MW_CLBXBAR_AUXSIG5_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG5_INVERT 0\n#define MW_CLBXBAR_AUXSIG6 0\n#define MW_CLBXBAR_AUXSIG_MUX6 -1\n#define MW_CLBXBAR_AUXSIG6_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG6_INVERT 0\n#define MW_CLBXBAR_AUXSIG7 0\n#define MW_CLBXBAR_AUXSIG_MUX7 -1\n#define MW_CLBXBAR_AUXSIG7_MUXSELECT XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n#define MW_CLBXBAR_AUXSIG7_INVERT 0\n#define MW_CLB_TILE1 0\n#define MW_CLB_TILE1_NAME TILE1\n#define MW_CLB_TILE1_IN0_MUX 0\n#define MW_CLB_TILE1_IN0 -1\n#define MW_CLB_TILE1_IN0_FILTER 0\n#define MW_CLB_TILE1_IN0_SYNC 0\n#define MW_CLB_TILE1_IN1_MUX 0\n#define MW_CLB_TILE1_IN1 -1\n#define MW_CLB_TILE1_IN1_FILTER 0\n#define MW_CLB_TILE1_IN1_SYNC 0\n#define MW_CLB_TILE1_IN2_MUX 0\n#define MW_CLB_TILE1_IN2 -1\n#define MW_CLB_TILE1_IN2_FILTER 0\n#define MW_CLB_TILE1_IN2_SYNC 0\n#define MW_CLB_TILE1_IN3_MUX 0\n#define MW_CLB_TILE1_IN3 -1\n#define MW_CLB_TILE1_IN3_FILTER 0\n#define MW_CLB_TILE1_IN3_SYNC 0\n#define MW_CLB_TILE1_IN4_MUX 0\n#define MW_CLB_TILE1_IN4 -1\n#define MW_CLB_TILE1_IN4_FILTER 0\n#define MW_CLB_TILE1_IN4_SYNC 0\n#define MW_CLB_TILE1_IN5_MUX 0\n#define MW_CLB_TILE1_IN5 -1\n#define MW_CLB_TILE1_IN5_FILTER 0\n#define MW_CLB_TILE1_IN5_SYNC 0\n#define MW_CLB_TILE1_IN6_MUX 0\n#define MW_CLB_TILE1_IN6 -1\n#define MW_CLB_TILE1_IN6_FILTER 0\n#define MW_CLB_TILE1_IN6_SYNC 0\n#define MW_CLB_TILE1_IN7_MUX 0\n#define MW_CLB_TILE1_IN7 -1\n#define MW_CLB_TILE1_IN7_FILTER 0\n#define MW_CLB_TILE1_IN7_SYNC 0\n#define MW_CLB_TILE1_OUT0_0 0\n#define MW_CLB_TILE1_OUT0_1 0\n#define MW_CLB_TILE1_OUT1_0 0\n#define MW_CLB_TILE1_OUT1_1 0\n#define MW_CLB_TILE1_OUT2_0 0\n#define MW_CLB_TILE1_OUT2_1 0\n#define MW_CLB_TILE1_OUT3_0 0\n#define MW_CLB_TILE1_OUT3_1 0\n#define MW_CLB_TILE1_OUT4_0 0\n#define MW_CLB_TILE1_OUT4_1 0\n#define MW_CLB_TILE1_OUT5_0 0\n#define MW_CLB_TILE1_OUT5_1 0\n#define MW_CLB_TILE1_OUT6_0 0\n#define MW_CLB_TILE1_OUT6_1 0\n#define MW_CLB_TILE1_OUT7_0 0\n#define MW_CLB_TILE1_OUT7_1 0\n#define MW_CLB_TILE2 0\n#define MW_CLB_TILE2_NAME TILE2\n#define MW_CLB_TILE2_IN0_MUX 0\n#define MW_CLB_TILE2_IN0 -1\n#define MW_CLB_TILE2_IN0_FILTER 0\n#define MW_CLB_TILE2_IN0_SYNC 0\n#define MW_CLB_TILE2_IN1_MUX 0\n#define MW_CLB_TILE2_IN1 -1\n#define MW_CLB_TILE2_IN1_FILTER 0\n#define MW_CLB_TILE2_IN1_SYNC 0\n#define MW_CLB_TILE2_IN2_MUX 0\n#define MW_CLB_TILE2_IN2 -1\n#define MW_CLB_TILE2_IN2_FILTER 0\n#define MW_CLB_TILE2_IN2_SYNC 0\n#define MW_CLB_TILE2_IN3_MUX 0\n#define MW_CLB_TILE2_IN3 -1\n#define MW_CLB_TILE2_IN3_FILTER 0\n#define MW_CLB_TILE2_IN3_SYNC 0\n#define MW_CLB_TILE2_IN4_MUX 0\n#define MW_CLB_TILE2_IN4 -1\n#define MW_CLB_TILE2_IN4_FILTER 0\n#define MW_CLB_TILE2_IN4_SYNC 0\n#define MW_CLB_TILE2_IN5_MUX 0\n#define MW_CLB_TILE2_IN5 -1\n#define MW_CLB_TILE2_IN5_FILTER 0\n#define MW_CLB_TILE2_IN5_SYNC 0\n#define MW_CLB_TILE2_IN6_MUX 0\n#define MW_CLB_TILE2_IN6 -1\n#define MW_CLB_TILE2_IN6_FILTER 0\n#define MW_CLB_TILE2_IN6_SYNC 0\n#define MW_CLB_TILE2_IN7_MUX 0\n#define MW_CLB_TILE2_IN7 -1\n#define MW_CLB_TILE2_IN7_FILTER 0\n#define MW_CLB_TILE2_IN7_SYNC 0\n#define MW_CLB_TILE2_OUT0_0 0\n#define MW_CLB_TILE2_OUT0_1 0\n#define MW_CLB_TILE2_OUT1_0 0\n#define MW_CLB_TILE2_OUT1_1 0\n#define MW_CLB_TILE2_OUT2_0 0\n#define MW_CLB_TILE2_OUT2_1 0\n#define MW_CLB_TILE2_OUT3_0 0\n#define MW_CLB_TILE2_OUT3_1 0\n#define MW_CLB_TILE2_OUT4_0 0\n#define MW_CLB_TILE2_OUT4_1 0\n#define MW_CLB_TILE2_OUT5_0 0\n#define MW_CLB_TILE2_OUT5_1 0\n#define MW_CLB_TILE2_OUT6_0 0\n#define MW_CLB_TILE2_OUT6_1 0\n#define MW_CLB_TILE2_OUT7_0 0\n#define MW_CLB_TILE2_OUT7_1 0\n#define MW_CLB_TILE3 0\n#define MW_CLB_TILE3_NAME TILE3\n#define MW_CLB_TILE3_IN0_MUX 0\n#define MW_CLB_TILE3_IN0 -1\n#define MW_CLB_TILE3_IN0_FILTER 0\n#define MW_CLB_TILE3_IN0_SYNC 0\n#define MW_CLB_TILE3_IN1_MUX 0\n#define MW_CLB_TILE3_IN1 -1\n#define MW_CLB_TILE3_IN1_FILTER 0\n#define MW_CLB_TILE3_IN1_SYNC 0\n#define MW_CLB_TILE3_IN2_MUX 0\n#define MW_CLB_TILE3_IN2 -1\n#define MW_CLB_TILE3_IN2_FILTER 0\n#define MW_CLB_TILE3_IN2_SYNC 0\n#define MW_CLB_TILE3_IN3_MUX 0\n#define MW_CLB_TILE3_IN3 -1\n#define MW_CLB_TILE3_IN3_FILTER 0\n#define MW_CLB_TILE3_IN3_SYNC 0\n#define MW_CLB_TILE3_IN4_MUX 0\n#define MW_CLB_TILE3_IN4 -1\n#define MW_CLB_TILE3_IN4_FILTER 0\n#define MW_CLB_TILE3_IN4_SYNC 0\n#define MW_CLB_TILE3_IN5_MUX 0\n#define MW_CLB_TILE3_IN5 -1\n#define MW_CLB_TILE3_IN5_FILTER 0\n#define MW_CLB_TILE3_IN5_SYNC 0\n#define MW_CLB_TILE3_IN6_MUX 0\n#define MW_CLB_TILE3_IN6 -1\n#define MW_CLB_TILE3_IN6_FILTER 0\n#define MW_CLB_TILE3_IN6_SYNC 0\n#define MW_CLB_TILE3_IN7_MUX 0\n#define MW_CLB_TILE3_IN7 -1\n#define MW_CLB_TILE3_IN7_FILTER 0\n#define MW_CLB_TILE3_IN7_SYNC 0\n#define MW_CLB_TILE3_OUT0_0 0\n#define MW_CLB_TILE3_OUT0_1 0\n#define MW_CLB_TILE3_OUT1_0 0\n#define MW_CLB_TILE3_OUT1_1 0\n#define MW_CLB_TILE3_OUT2_0 0\n#define MW_CLB_TILE3_OUT2_1 0\n#define MW_CLB_TILE3_OUT3_0 0\n#define MW_CLB_TILE3_OUT3_1 0\n#define MW_CLB_TILE3_OUT4_0 0\n#define MW_CLB_TILE3_OUT4_1 0\n#define MW_CLB_TILE3_OUT5_0 0\n#define MW_CLB_TILE3_OUT5_1 0\n#define MW_CLB_TILE3_OUT6_0 0\n#define MW_CLB_TILE3_OUT6_1 0\n#define MW_CLB_TILE3_OUT7_0 0\n#define MW_CLB_TILE3_OUT7_1 0\n#define MW_CLB_TILE4 0\n#define MW_CLB_TILE4_NAME TILE4\n#define MW_CLB_TILE4_IN0_MUX 0\n#define MW_CLB_TILE4_IN0 -1\n#define MW_CLB_TILE4_IN0_FILTER 0\n#define MW_CLB_TILE4_IN0_SYNC 0\n#define MW_CLB_TILE4_IN1_MUX 0\n#define MW_CLB_TILE4_IN1 -1\n#define MW_CLB_TILE4_IN1_FILTER 0\n#define MW_CLB_TILE4_IN1_SYNC 0\n#define MW_CLB_TILE4_IN2_MUX 0\n#define MW_CLB_TILE4_IN2 -1\n#define MW_CLB_TILE4_IN2_FILTER 0\n#define MW_CLB_TILE4_IN2_SYNC 0\n#define MW_CLB_TILE4_IN3_MUX 0\n#define MW_CLB_TILE4_IN3 -1\n#define MW_CLB_TILE4_IN3_FILTER 0\n#define MW_CLB_TILE4_IN3_SYNC 0\n#define MW_CLB_TILE4_IN4_MUX 0\n#define MW_CLB_TILE4_IN4 -1\n#define MW_CLB_TILE4_IN4_FILTER 0\n#define MW_CLB_TILE4_IN4_SYNC 0\n#define MW_CLB_TILE4_IN5_MUX 0\n#define MW_CLB_TILE4_IN5 -1\n#define MW_CLB_TILE4_IN5_FILTER 0\n#define MW_CLB_TILE4_IN5_SYNC 0\n#define MW_CLB_TILE4_IN6_MUX 0\n#define MW_CLB_TILE4_IN6 -1\n#define MW_CLB_TILE4_IN6_FILTER 0\n#define MW_CLB_TILE4_IN6_SYNC 0\n#define MW_CLB_TILE4_IN7_MUX 0\n#define MW_CLB_TILE4_IN7 -1\n#define MW_CLB_TILE4_IN7_FILTER 0\n#define MW_CLB_TILE4_IN7_SYNC 0\n#define MW_CLB_TILE4_OUT0_0 0\n#define MW_CLB_TILE4_OUT1_0 0\n#define MW_CLB_TILE4_OUT2_0 0\n#define MW_CLB_TILE4_OUT3_0 0\n#define MW_CLB_TILE4_OUT4_0 0\n#define MW_CLB_TILE4_OUT4_1 0\n#define MW_CLB_TILE4_OUT5_0 0\n#define MW_CLB_TILE4_OUT5_1 0\n#define MW_CLB_TILE4_OUT6_0 0\n#define MW_CLB_TILE4_OUT6_1 0\n#define MW_CLB_TILE4_OUT7_0 0\n#define MW_CLB_TILE4_OUT7_1 0\n#define MW_CLB_HEADER clb_config.h\n#define MW_CLB_SOURCE clb_config.c\n#define MW_SIMULINKIO_COMMUNICATIONINTERFACE 0\n#define MW_SIMULINKIO_SCIMODULE 0\n#define MW_SIMULINKIO_MODELTRANSPORTDATAFCN codertarget.simulinkIO.tic2000.getModelTransportInfo\n#define MW_SIMULINKIO_SERVERDEPLOYFCN codertarget.simulinkIO.tic2000.updateServer\n#define MW_SIMULINKIO_COMPORT COM3\n#define MW_ESB_PROCESSINGUNIT c28xCPU1\n#define MW_ESB_SIMDIAGSHOWINSDI 1\n#define MW_ESB_SIMDIAGSAVETOFILE 1\n#define MW_ESB_SIMDIAGOVERWRITEFILE 0\n#define MW_ESB_HWDIAGSHOWINSDI 0\n#define MW_ESB_HWDIAGSAVETOFILE 0\n#define MW_ESB_HWDIAGOVERWRITEFILE 0\n#define MW_ESB_HWDIAGINSTRUMENTATION Code\n#define MW_ESB_HWDIAGRECORDING Continuous\n#define MW_ESB_HWDIAGSTREAMINGMODETYPE Unlimited\n#define MW_ESB_HWDIAGBUFFERSIZE 1024.000000\n#define MW_ESB_HWDIAGNUMBUFFERS 1.000000\n#define MW_ESB_HWDIAGVIEWLEVEL Task manager tasks\n#define MW_ESB_SETRNG 0\n#define MW_ESB_RNGSEED default\n#define MW_ESB_CACHEDATA 0\n#define MW_ESB_SCHEDULEEDITORSCHEDULERESET 0\n#define MW_TASKMAP_TASKS_HWI_ADCB1_INT_EVENT1_MAPPEDGROUP ADC - Analog to Digital Converter\n#define MW_TASKMAP_TASKS_HWI_ADCB1_INT_EVENT1_MAPPEDINTERRUPT ADCB1_INT\n#define MW_TASKMAP_TASKS_HWI_ADCB1_INT_EVENT1_MAPPEDSOURCE Default event\n#define MW_TASKMAP_TASKS_HWI_ADCB1_INT_EVENT1_DISABLEPREMPTION on\n#define MW_TASKMAP_TASKS_HWI_ADCB1_INT_EVENT1_CLEARINTERRUPTFLAGSATENDOFEVENT on\n#define MW_TASKMAP_TASKS_HWI_ADCB1_INT_EVENT1_TASKPRIORITY 30\n#define MW_TASKMAP_TASKS_HWI_ADCB1_INT_EVENT1_EVENTORDER 1.000000\n#define MW_TASKMAP_TASKS_HWI_SCIA_RX_INT_EVENT1_MAPPEDGROUP SCI - Serial Communications Interface\n#define MW_TASKMAP_TASKS_HWI_SCIA_RX_INT_EVENT1_MAPPEDINTERRUPT SCIA_RX_INT\n#define MW_TASKMAP_TASKS_HWI_SCIA_RX_INT_EVENT1_MAPPEDSOURCE Default event\n#define MW_TASKMAP_TASKS_HWI_SCIA_RX_INT_EVENT1_DISABLEPREMPTION off\n#define MW_TASKMAP_TASKS_HWI_SCIA_RX_INT_EVENT1_CLEARINTERRUPTFLAGSATENDOFEVENT on\n#define MW_TASKMAP_TASKS_HWI_SCIA_RX_INT_EVENT1_TASKPRIORITY 50\n#define MW_TASKMAP_TASKS_HWI_SCIA_RX_INT_EVENT1_EVENTORDER 1.000000\n#define MW_FPGADESIGN_PROJECTFOLDER soc_prj\n\n#endif /* __MW_TARGET_HARDWARE_RESOURCES_H__ */\n\n#endif\n\n#endif\n"},{"name":"c2000HardwareTimerConfig.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2024b\\toolbox\\c2b\\tic2000\\src","tag":"","groupDisplay":"Other files","code":"/* Copyrights 2016-2021, MathWorks Inc */\n#include \"MW_target_hardware_resources.h\"\n#include \"rtwtypes.h\"\n\nvoid hardwareTimer1Init(void)\n{\n  /* InitCpuTimers() - CPU Timers are initialized in\n   * MW_c28xx_board.c in the generated code.\n   */\n  CpuTimer1Regs.PRD.all = 0xFFFFFFFF;  /* max Period*/\n  CpuTimer1Regs.TIM.all = 0xFFFFFFFF;  /* set Ctr*/\n#if defined(MW_TIMER_PRESCALE_FOR_XCP)\n  CpuTimer1Regs.TPR.all = (0xFF & (MW_TIMER_PRESCALE_FOR_XCP - 1));         /* prescaler defined in make file dynamically based on clock */\n#else\n  CpuTimer1Regs.TPR.all = 0x00;        /* no prescaler    */\n#endif\n  StartCpuTimer1();\n}\n\n/* EOF */\n"},{"name":"c2837xDBoard_Realtime_Support.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2024b\\toolbox\\c2b\\tic2000_shared\\src","tag":"","groupDisplay":"Other files","code":"/*\n *   Copyright 2015-2023 The MathWorks, Inc.\n *\n *\n */\n\n#include \"MW_target_hardware_resources.h\"\n#include \"MW_f2837xD_includes.h\"\n#include \"MW_ipc_helper.h\"\n\nextern Uint16 RamfuncsLoadSize;\nextern Uint16 Cla1funcsRunStart;\nextern Uint16 Cla1funcsLoadStart;\nextern Uint16 Cla1funcsLoadSize;\nextern Uint16 Cla1mathTablesRunStart;\nextern Uint16 Cla1mathTablesLoadStart;\nextern Uint16 Cla1mathTablesLoadSize;\n#ifdef CPU1\nextern interrupt void IPC0_INT_isr(void);\nvoid (*CIPC0_INT_fptr)(void) = NULL;\nuint32_t mwInitStart = 0;\nuint32_t mwInitEnd = 0;\n__interrupt void CPU02toCPU01IPC0IntHandler(void);\nUint32 setGPIOForCPU2(Uint32 gpioData);\nUint32 setInXBARForCPU2(Uint32 inData);\nUint32 setOutXBARForCPU2(Uint32 inData);\nUint32 setEpwmXBARForCPU2(Uint32 inData);\nUint32 setCLBXBARForCPU2(Uint32 inData);\nUint32 setSyncSocRegsForCPU2(Uint32 inData);\nvolatile uint16_t ErrorFlag;\n#else\nvoid configureCPU2Peripherals(Uint32 gpioNumber, Uint32 gpGRegValA, Uint32 gpRegValA);\nvoid configureInputXBar(Uint32 gpioNumber, Uint32 inputXbarNumber);\nvoid configureOutputXBar(Uint32 xbar , Uint32 mux, Uint32 muxVal, Uint32 invert, Uint32 latch);\nvoid configureEpwmXBar(Uint32 xbar , Uint32 mux, Uint32 muxVal, Uint32 invert);\nvoid configureCLBXbarInCPU2(Uint32 xbar , Uint32 mux, Uint32 muxVal, Uint32 invert);\nvoid configureSyncSocRegsInCPU2(Uint32 syncSelectVal , Uint32 syncSelectPosition);\n#endif\nvoid initSetGPIOIPC(void);\n\n#if MW_RUNTIME_FLASHLOAD\nextern Uint16 MW_RamfuncsRunStart;\nextern Uint16 MW_RamfuncsLoadSize;\nextern Uint16 MW_RamfuncsLoadStart;\n#endif\nextern Uint16 Cla1ConstRunStart, Cla1ConstLoadStart, Cla1ConstLoadSize;\nvoid c2000_flash_init(void)\n{\n  #if MW_RUNTIME_FLASHLOAD\n  /* Copy InitFlash function code and Flash setup code to RAM */\n  memcpy(&RamfuncsRunStart,&RamfuncsLoadStart, (Uint32)(&RamfuncsLoadEnd-&RamfuncsLoadStart));\n  memcpy(&MW_RamfuncsRunStart, &MW_RamfuncsLoadStart, (Uint32)&MW_RamfuncsLoadSize);\n  #ifdef CLA_BLOCK_INCLUDED\n    memcpy(&Cla1funcsRunStart, &Cla1funcsLoadStart, (Uint32)&Cla1funcsLoadSize);\n    memcpy(&Cla1ConstRunStart, &Cla1ConstLoadStart, (Uint32)&Cla1ConstLoadSize);\n    /*memcpy(&Cla1mathTablesRunStart, &Cla1mathTablesLoadStart, (Uint32)&Cla1mathTablesLoadSize); */\n  #endif\n  /* Call Flash Initialization to setup flash waitstates\n   This function must reside in RAM */\n  InitFlash();\n  #endif\n}\n\nvoid initSetGPIOIPC(void)\n{\n\n    uint32_t *pulMsgRam;\n    volatile uint32_t ipcCountVar = 0;\n    #ifdef CPU1\n\tuint32_t i = 0;\n\tuint32_t MemCfgRegVar = 0;\n        EALLOW; // This is needed to write to EALLOW protected registers\n        PieVectTable.IPC0_INT = &CPU02toCPU01IPC0IntHandler;\n        /*Each global shared RAM section size is 4096 (2^12)*/\n        for (i=((uint32_t)CPU2_RAMGS_DATA_START) >> 12; i < (((uint32_t)CPU2_RAMGS_DATA_LENGTH + (uint32_t)CPU2_RAMGS_DATA_START) >> 12); i++)\n        {\n            /*Global shred RAM strts at 0xC000*/\n            MemCfgRegVar = MemCfgRegVar | (1UL<<(i-12));\n        }\n        for (i=((uint32_t)CPU2_RAMGS_PROG_START) >> 12; i < (((uint32_t)CPU2_RAMGS_PROG_LENGTH + (uint32_t)CPU2_RAMGS_PROG_START) >> 12); i++)\n        {\n            MemCfgRegVar = MemCfgRegVar | (1UL<<(i-12));\n        }\n        MemCfgRegs.GSxMSEL.all = MemCfgRegs.GSxMSEL.all | MemCfgRegVar;\n        EDIS;    // This is needed to disable write to EALLOW protected registers\n\t\t\n\t    // Any new entry to pulMsgRam should follow with change in starting address CPU01_TO_CPU02_PASSMSG\n        pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n        pulMsgRam[0] = (uint32_t)&setGPIOForCPU2;\n        pulMsgRam[1] = (uint32_t)&mwInitStart;\n        pulMsgRam[2] = (uint32_t)&mwInitEnd;\n        pulMsgRam[3] = (uint32_t)&setInXBARForCPU2;\n        pulMsgRam[4] = (uint32_t)&setOutXBARForCPU2;\n        pulMsgRam[5] = (uint32_t)&setEpwmXBARForCPU2;\n        pulMsgRam[6] = (uint32_t)&setCLBXBARForCPU2;\n        pulMsgRam[7] = (uint32_t)&setSyncSocRegsForCPU2;\n        PieCtrlRegs.PIEIER1.bit.INTx13 = 1;     // IPC INT0\n        IER |= M_INT1;\n        EINT;  // Enable Global interrupt INTM\n        ERTM;  // Enable Global realtime interrupt DBGM\n        \n    //#if MW_RUNTIME_FLASHLOAD\n      #ifndef TIC2000_SOC_BASEPRODUCT\n        //Wait for CPU2 to get ready to accept boot command from CPU1\n        while (((IpcRegs.IPCBOOTSTS & 0x0000000F) != C2_BOOTROM_BOOTSTS_SYSTEM_READY) && (700 > ipcCountVar))\n        {\n            ipcCountVar++;\n        }\n        //CPU01 to CPU02 IPC Boot Mode Register\n        IpcRegs.IPCBOOTMODE = C1C2_BROM_BOOTMODE_BOOT_FROM_FLASH;\n        // CPU01 To CPU02 IPC Command Register\n        IpcRegs.IPCSENDCOM  = BROM_IPC_EXECUTE_BOOTMODE_CMD;\n        // CPU01 to CPU02 IPC flag register\n        IpcRegs.IPCSET.all = 0x80000001;\n        ipcCountVar = 0;\n        // Give ~35 usec delay to start CPU2 init\n        while (500 > ipcCountVar) {\n            ipcCountVar++;\n        }\n      #endif\n\n    //#endif\n\n    #else\n        #ifndef TIC2000_SOC_BASEPRODUCT\n        pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n        IPCLiteLtoRDataWrite(IPC_FLAG0, pulMsgRam[1], 0x425,\n                         IPC_LENGTH_32_BITS, IPC_FLAG31);\n        #endif\n    #endif\n}\n\n#ifdef CPU1\nUint32 setGPIOForCPU2(Uint32 gpioData)\n{\n    if (((gpioData & 0xFF000000)>>24) == GPIO_MUX_CPU2CLA) /* from CLA inside CPU2, GPIO_MUX_CPU2CLA defined to value 3*/\n    {\n        gpioData = gpioData & 0x00FFFFFF; /* remove added encryption GPIO_MUX_CPU2CLA, MSB is the flag and we use only flag 0*/\n        GPIO_SetupPinMux(gpioData & 0x000000FF, GPIO_MUX_CPU2CLA, (gpioData & 0x0000FF00)>>8);\n        GPIO_SetupPinOptions(gpioData & 0x000000FF, (gpioData & 0x00FF0000)>>16, (gpioData & 0xFF000000)>>24);\n    }\n    else\n    {\n        GPIO_SetupPinMux(gpioData & 0x000000FF, GPIO_MUX_CPU2, (gpioData & 0x0000FF00)>>8);/* From CPU2*/\n        GPIO_SetupPinOptions(gpioData & 0x000000FF, (gpioData & 0x00FF0000)>>16, (gpioData & 0xFF000000)>>24);\n    }\n    return 1;\n}\n\nUint32 setInXBARForCPU2(Uint32 inData)\n{\n    Uint16 pin = (Uint16)(inData & 0x000000FF);\n    EALLOW;\n    switch((inData & 0x0000FF00) >> 8)\n    {\n        case 1:\n            InputXbarRegs.INPUT1SELECT = pin;\n            break;\n        case 2:\n            InputXbarRegs.INPUT2SELECT = pin;\n            break;\n        case 3:\n            InputXbarRegs.INPUT3SELECT = pin;\n            break;\n        case 4:\n            InputXbarRegs.INPUT4SELECT = pin;\n            break;\n        case 5:\n            InputXbarRegs.INPUT5SELECT = pin;\n            break;\n        case 6:\n            InputXbarRegs.INPUT6SELECT = pin;\n            break;\n        case 7:\n            InputXbarRegs.INPUT7SELECT = pin;\n            break;\n        case 8:\n            InputXbarRegs.INPUT8SELECT = pin;\n            break;\n        case 9:\n            InputXbarRegs.INPUT9SELECT = pin;\n            break;\n        case 10:\n            InputXbarRegs.INPUT10SELECT = pin;\n            break;\n        case 11:\n            InputXbarRegs.INPUT11SELECT = pin;\n            break;\n        case 12:\n            InputXbarRegs.INPUT12SELECT = pin;\n            break;\n        case 13:\n            InputXbarRegs.INPUT13SELECT = pin;\n            break;\n        case 14:\n            InputXbarRegs.INPUT14SELECT = pin;\n            break;\n    }\n    EDIS;\n    return 1;\n}\n\nUint32 setOutXBARForCPU2(Uint32 inData)\n{\n    volatile Uint32 *muxEnableRegAddr;\n    volatile Uint32 *muxRegAddr;\n    volatile Uint32 *muxLatchRegAddr;\n    volatile Uint32 *muxInvertRegAddr;\n    Uint16 latch = (Uint16)((inData & 0xF0000000) >> 28);\n    Uint16 invert = (Uint16)((inData & 0x0F000000) >> 24);\n    Uint16 muxVal = (Uint16)((inData & 0x00FF0000) >> 16);\n    Uint16 mux = (Uint16)((inData & 0x0000FF00) >> 8);\n    Uint16 xbar = (Uint16)(inData & 0x000000FF);\n    Uint16 muxPosition = mux%16;\n    \n    muxRegAddr          = (Uint32 *)&OutputXbarRegs + ((2*xbar)-2) + (mux/16);\n    muxEnableRegAddr    = (Uint32 *)&OutputXbarRegs + 0x10 + (xbar-1);\n    muxLatchRegAddr    = (Uint32 *)&OutputXbarRegs + 0x1B;\n    muxInvertRegAddr    = (Uint32 *)&OutputXbarRegs + 0x1C;\n    EALLOW;\n    *muxRegAddr        |= (Uint32)(muxVal & 0x3) << (2*muxPosition);\n    *muxEnableRegAddr  |= (Uint32)1 << mux;\n    *muxLatchRegAddr   |= (Uint32)(latch & 0x1) << (xbar-1);\n    *muxInvertRegAddr  |= (Uint32)(invert & 0x1) << (xbar-1);\n    EDIS;\n    return 1;\n}\n\nUint32 setEpwmXBARForCPU2(Uint32 inData)\n{\n    volatile Uint32 *muxEnableRegAddr;\n    volatile Uint32 *muxRegAddr;\n    volatile Uint32 *muxInvertRegAddr;\n    Uint16 invert = (Uint16)((inData & 0x0F000000) >> 24);\n    Uint16 muxVal = (Uint16)((inData & 0x00FF0000) >> 16);\n    Uint16 mux = (Uint16)((inData & 0x0000FF00) >> 8);\n    Uint16 xbar = (Uint16)(inData & 0x000000FF);\n    Uint16 muxPosition = mux%16;\n    \n    muxRegAddr          = (Uint32 *)&EPwmXbarRegs + ((2*xbar)-2) + (mux/16);\n    muxEnableRegAddr    = (Uint32 *)&EPwmXbarRegs + 0x10 + (xbar-1);\n    muxInvertRegAddr    = (Uint32 *)&EPwmXbarRegs + 0x1C;\n    EALLOW;\n    *muxRegAddr        |= (Uint32)(muxVal & 0x3) << (2*muxPosition);\n    *muxEnableRegAddr  |= (Uint32)1 << mux;\n    *muxInvertRegAddr  |= (Uint32)(invert & 0x1) << (xbar-1);\n    EDIS;\n    return 1;\n}\n\nUint32 setCLBXBARForCPU2(Uint32 inData)\n{\n    volatile Uint32 *muxEnableRegAddr;\n    volatile Uint32 *muxRegAddr;\n    volatile Uint32 *muxInvertRegAddr;\n    Uint16 invert = (Uint16)((inData & 0x0F000000) >> 24);\n    Uint16 muxVal = (Uint16)((inData & 0x00FF0000) >> 16);\n    Uint16 mux = (Uint16)((inData & 0x0000FF00) >> 8);\n    Uint16 xbar = (Uint16)(inData & 0x000000FF);\n    Uint16 muxPosition = mux%16;\n    \n    muxRegAddr          = (Uint32 *)&ClbXbarRegs + (2*xbar) + (mux/16);\n    muxEnableRegAddr    = (Uint32 *)&ClbXbarRegs + 0x10 + xbar;\n    muxInvertRegAddr    = (Uint32 *)&ClbXbarRegs + 0x1C;\n    EALLOW;\n    *muxRegAddr        |= (Uint32)(muxVal & 0x3) << (2*muxPosition);\n    *muxEnableRegAddr  |= (Uint32)1 << mux;\n    *muxInvertRegAddr  |= (Uint32)(invert & 0x1) << (xbar);\n    EDIS;\n    return 1;\n}\n\nUint32 setSyncSocRegsForCPU2(Uint32 inData)\n{\n    volatile Uint32 *syncSelectRegAddr;\n\t//First byte to store the sync select value\n    Uint16 syncSelectVal = (Uint16)(inData & 0x000000FFU);\n\t//Second byte to store the sync select position\n    Uint16 syncSelectPosition = (Uint16)((inData & 0x0000FF00U) >> 8U);\n    \n    syncSelectRegAddr          = (Uint32 *)&SyncSocRegs;\n    EALLOW;\n\t//Each sync select uses 3 bits to store the value.\n\t//3*syncSelectPosition ensures value is set at proper bit position\n    *syncSelectRegAddr        |= (Uint32)(syncSelectVal & 0x7U) << (3*syncSelectPosition);\n    EDIS;\n    return 1;\n}\n\n__interrupt void CPU02toCPU01IPC0IntHandler (void)\n{\n    // Continue processing messages\n    uint32_t command;\n    command = IpcRegs.IPCRECVCOM;\n    \n    switch (command)\n    {\n    case IPC_SET_BITS_16:\n        IPCLiteRtoLSetBits(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_SET_BITS_32:\n        IPCLiteRtoLSetBits(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_CLEAR_BITS_16:\n        IPCLiteRtoLClearBits(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_CLEAR_BITS_32:\n        IPCLiteRtoLClearBits(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_DATA_WRITE_16:\n        IPCLiteRtoLDataWrite(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_DATA_WRITE_32:\n        IPCLiteRtoLDataWrite(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_SET_BITS_16_PROTECTED:\n        IPCLiteRtoLSetBits_Protected(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_SET_BITS_32_PROTECTED:\n        IPCLiteRtoLSetBits_Protected(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_CLEAR_BITS_16_PROTECTED:\n        IPCLiteRtoLClearBits_Protected(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_CLEAR_BITS_32_PROTECTED:\n        IPCLiteRtoLClearBits_Protected(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_DATA_WRITE_16_PROTECTED:\n        IPCLiteRtoLDataWrite_Protected(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_DATA_WRITE_32_PROTECTED:\n        IPCLiteRtoLDataWrite_Protected(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_DATA_READ_16:\n        IPCLiteRtoLDataRead(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_DATA_READ_32:\n        IPCLiteRtoLDataRead(IPC_FLAG0, IPC_FLAG31);\n        break;\n    case IPC_FUNC_CALL:\n        IPCLiteRtoLFunctionCall(IPC_FLAG0, IPC_FLAG31);\n        break;\n    default:\n        ErrorFlag = 1;\n        break;\n    }\n\n    PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;   // Acknowledge interrupt to PIE\n    // try re-mapping the IPC INT0.\n    if (IpcRegs.IPCRECVDATA == 0x36E) // mwInitEnd\n    {\n        IpcRegs.IPCACK.all |= IPC_FLAG0;\n        IpcRegs.IPCACK.all |= IPC_FLAG31;\n        IpcRegs.IPCCLR.all |= IPC_FLAG0;\n        IpcRegs.IPCCLR.all |= IPC_FLAG31;\n        #ifdef REMAPIPCINT0\n            EALLOW;\n            PieVectTable.IPC0_INT = &IPC0_INT_isr; /* Map ISR to vector table */\n            EDIS;\n        #else\n            /* Support new HWI where ISR are registered */ \n            if (CIPC0_INT_fptr != NULL) // CIPC0_INT_fptr is set only when there is an IPC0 interrupt block and otherwise will be NULL\n            {\n                EALLOW;\n                PieVectTable.IPC0_INT = CIPC0_INT_fptr; /* Map ISR to vector table */\n                EDIS;\n            }\n            else\n            {\n                asm(\" SETC INTM\");\n                PieCtrlRegs.PIEIER1.bit.INTx13 = 0;     // IPC INT0 disable\n                asm(\" RPT #5 || NOP\");\n                IFR &= 0xFFFE;\n                PieCtrlRegs.PIEACK.all = 0x1;\n                asm(\" CLRC INTM\"); /* Enable Interrupt Global Enable Bit - set it to 0 */\n            }\n        #endif\n    }\n}\n\n#else\n    void configureCPU2Peripherals(Uint32 gpioNumber, Uint32 gpGRegValA, Uint32 gpRegValA)\n    {\n        Uint32 *pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n        Uint32 ulRWord32 = 0;\n        Uint32 gpioData = 0x00010000;\n        gpioData = gpioData|gpioNumber;\n        gpioData = gpioData|(gpRegValA << 8);\n        gpioData = gpioData|(gpGRegValA << 10);\n        IPCLiteLtoRFunctionCall(IPC_FLAG0, pulMsgRam[0], gpioData, IPC_FLAG31);\n        while (IPCLiteLtoRGetResult(&ulRWord32,IPC_LENGTH_32_BITS,\n                        IPC_FLAG31) != STATUS_PASS)\n        {\n\n        }\n    }\n    void configureInputXBar(Uint32 gpioNumber, Uint32 inputXbarNumber)\n    {\n        Uint32 *pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n        Uint32 ulRWord32 = 0;\n        Uint32 gpioData = 0x00000000;\n        gpioData = 0x00000000;\n        gpioData = gpioData|gpioNumber;\n        gpioData = gpioData|(inputXbarNumber << 8);\n        IPCLiteLtoRFunctionCall(IPC_FLAG0, pulMsgRam[3], gpioData, IPC_FLAG31);\n        while (IPCLiteLtoRGetResult(&ulRWord32,IPC_LENGTH_32_BITS,\n                IPC_FLAG31) != STATUS_PASS)\n        {\n            \n        }    \n    }\n    void configureOutputXBar(Uint32 xbar , Uint32 mux, Uint32 muxVal, Uint32 invert, Uint32 latch)\n    {\n        Uint32 *pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n        Uint32 gpioData = 0x00000000;\n        Uint32 ulRWord32 = 0;\n        gpioData = 0x00000000;\n        gpioData = gpioData|xbar;\n        gpioData = gpioData|(mux << 8);\n        gpioData = gpioData|(muxVal << 16);\n        gpioData = gpioData|(invert << 24);\n        gpioData = gpioData|(latch << 28);\n        IPCLiteLtoRFunctionCall(IPC_FLAG0, pulMsgRam[4], gpioData, IPC_FLAG31);\n\t\twhile (IPCLiteLtoRGetResult(&ulRWord32,IPC_LENGTH_32_BITS,\n                IPC_FLAG31) != STATUS_PASS)\n        {\n            \n        }\n    }\n    void configureEpwmXBar(Uint32 xbar , Uint32 mux, Uint32 muxVal, Uint32 invert)\n    {\n        Uint32 *pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n        Uint32 gpioData = 0x00000000;\n        Uint32 ulRWord32 = 0;\n        gpioData = 0x00000000;\n        gpioData = gpioData|xbar;\n        gpioData = gpioData|(mux << 8);\n        gpioData = gpioData|(muxVal << 16);\n        gpioData = gpioData|(invert << 24);\n        IPCLiteLtoRFunctionCall(IPC_FLAG0, pulMsgRam[5], gpioData, IPC_FLAG31);\n\t\twhile (IPCLiteLtoRGetResult(&ulRWord32,IPC_LENGTH_32_BITS,\n                IPC_FLAG31) != STATUS_PASS)\n        {\n            \n        }\n    }\n\t\n\tvoid configureCLBXbarInCPU2(Uint32 xbar , Uint32 mux, Uint32 muxVal, Uint32 invert)\n    {\n        Uint32 *pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n        Uint32 gpioData = 0x00000000;\n        Uint32 ulRWord32 = 0;\n        gpioData = 0x00000000;\n        gpioData = gpioData|xbar;\n        gpioData = gpioData|(mux << 8);\n        gpioData = gpioData|(muxVal << 16);\n        gpioData = gpioData|(invert << 24);\n        IPCLiteLtoRFunctionCall(IPC_FLAG0, pulMsgRam[6], gpioData, IPC_FLAG31);\n\t\twhile (IPCLiteLtoRGetResult(&ulRWord32,IPC_LENGTH_32_BITS,\n                IPC_FLAG31) != STATUS_PASS)\n        {\n            \n        }\n    }\n\n    void configureSyncSocRegsInCPU2(Uint32 syncSelectVal , Uint32 syncSelectPosition)\n    {\n        Uint32 *pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n        Uint32 outData = 0x00000000;\n        Uint32 ulRWord32 = 0;\n        outData = outData|syncSelectVal;\n        outData = outData|(syncSelectPosition << 8);\n        IPCLiteLtoRFunctionCall(IPC_FLAG0, pulMsgRam[7], outData, IPC_FLAG31);\n    \twhile (IPCLiteLtoRGetResult(&ulRWord32,IPC_LENGTH_32_BITS,\n                IPC_FLAG31) != STATUS_PASS)\n        {\n            \n        }\n    }\n#endif\n"},{"name":"c2837xDInit.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2024b\\toolbox\\c2b\\tic2000\\src","tag":"","groupDisplay":"Other files","code":"/*\n *   Copyright 2020-2022 The MathWorks, Inc.\n *\n */\n\n#include \"MW_target_hardware_resources.h\"\n#include \"F2837xD_Ipc_drivers.h\"\n#include \"F2837xD_Gpio_defines.h\"\n#include \"F2837xD_Pie_defines.h\"\n#include \"MW_F2837xD_MemoryMap.h\"\n#include \"F2837xD_sysctrl.h\"\n\n#ifdef TIC2000_SOC_BASEPRODUCT\n/* Master CPU functions */\nvoid waitUntilAllSlaveCPUsReadyToBoot(void)\n{\n    uint16_t ipcCountVar;\n    ipcCountVar = 0;\n    \n    //Wait for CPU2 to get ready to accept boot command from CPU1\n    while (((IpcRegs.IPCBOOTSTS & 0x0000000F) != C2_BOOTROM_BOOTSTS_SYSTEM_READY) && (700 > ipcCountVar))\n    {\n        ipcCountVar++;\n    }\n}\n\nvoid sendStartBootCmdToSlaveCPU(uint32_t slaveCpuId)\n{\n    uint16_t ipcCountVar;\n    //CPU01 to CPU02 IPC Boot Mode Register\n    IpcRegs.IPCBOOTMODE = C1C2_BROM_BOOTMODE_BOOT_FROM_FLASH;\n    // CPU01 To CPU02 IPC Command Register\n    IpcRegs.IPCSENDCOM  = BROM_IPC_EXECUTE_BOOTMODE_CMD;\n    // CPU01 to CPU02 IPC flag register\n    IpcRegs.IPCSET.all = 0x80000001;\n    ipcCountVar = 0;\n    // Give ~35 usec delay to start CPU2 init\n    while (500 > ipcCountVar) {\n        ipcCountVar++;\n    }\n}\n\nvoid sendStartModelInitCmdToSlaveCPU(uint32_t slaveCpuId)\n{\n    IpcRegs.IPCSET.bit.IPC30 = 1;\n}\n\nvoid waitForAckForStartModelInitCmdFromSlaveCPU(uint32_t slaveCpuId)\n{\n    while (IpcRegs.IPCFLG.bit.IPC30 == 1);\n}\n\nboolean_T receiveEndModelInitCmdFromSlaveCPU(uint32_t slaveCpuId)\n{\n    boolean_T status;\n\n    if (IpcRegs.IPCSTS.bit.IPC30 == 1)\n    {\n        status = 1;\n        IpcRegs.IPCACK.bit.IPC30 = 1;\n    }\n    else\n        status = 0;\n\n    return status;\n}\n\nboolean_T checkSlaveCPUReadyToRunApplication(uint32_t slaveCpuId)\n{\n    return (IpcRegs.IPCSTS.bit.IPC29 == 1);\n}\n\nvoid sendRunApplicationCmdToAllSlaveCPUs(void)\n{\n    if (IpcRegs.IPCFLG.bit.IPC29 != 1)\n        IpcRegs.IPCSET.bit.IPC29 = 1;\n}\n\n/* Slave functions */\nvoid notifySlaveCPUReadyToBoot(uint32_t masterCpuId, uint32_t slaveCpuId)\n{\n    /* Boot status is handled during power reset and\n       CPU2 is automatically sets Bootstatus to C2_BOOTROM_BOOTSTS_SYSTEM_READY */\n    (void)masterCpuId;\n    (void)slaveCpuId;\n}\n\nvoid waitForBootCommandFromMasterCPU(uint32_t masterCpuId, uint32_t slaveCpuId)\n{\n    /* Boot status is handled during power reset and\n       CPU2 is automatically sets Bootstatus to C2_BOOTROM_BOOTSTS_SYSTEM_READY */\n    (void)masterCpuId;\n    (void)slaveCpuId;\n}\n\nvoid waitForModelInitCmdFromMasterCPU(uint32_t masterCpuId, uint32_t slaveCpuId)\n{\n    while (IpcRegs.IPCSTS.bit.IPC30 == 0);\n}\n\nvoid sendAckForStartModelInitCmdToMasterCPU(uint32_t masterCpuId, uint32_t slaveCpuId)\n{\n    IpcRegs.IPCACK.bit.IPC30 = 1;\n}\n\nvoid sendEndModelInitCmdToMasterCPU(uint32_t masterCpuId, uint32_t slaveCpuId)\n{\n    IpcRegs.IPCSET.bit.IPC30 = 1;\n}\n\nvoid sendReadyToRunApplicationToMasterCPU(uint32_t slaveCpuId)\n{\n    if (IpcRegs.IPCFLG.bit.IPC29 != 1)\n        IpcRegs.IPCSET.bit.IPC29 = 1;\n}\n\nboolean_T checkRunApplicationCmdFromMaster(uint32_t slaveCpuId)\n{\n    return (IpcRegs.IPCSTS.bit.IPC29 == 1);\n}\n\n#else\n/* Master CPU functions */\nvoid waitUntilAllSlaveCPUsReadyToBoot(void)\n{\n    \n}\n\nvoid sendStartBootCmdToSlaveCPU(uint32_t slaveCpuId)\n{\n    (void)slaveCpuId;\n}\n\nvoid sendStartModelInitCmdToSlaveCPU(uint32_t slaveCpuId)\n{\n    (void)slaveCpuId;\n}\n\nvoid waitForAckForStartModelInitCmdFromSlaveCPU(uint32_t slaveCpuId)\n{\n    (void)slaveCpuId;\n}\n\nboolean_T receiveEndModelInitCmdFromSlaveCPU(uint32_t slaveCpuId)\n{\n    (void)slaveCpuId;\n    return 1;\n}\n\nboolean_T checkSlaveCPUReadyToRunApplication(uint32_t slaveCpuId)\n{\n    (void)slaveCpuId;\n    return 1;\n}\n\nvoid sendRunApplicationCmdToAllSlaveCPUs(void)\n{\n    \n}\n\n/* Slave functions */\nvoid notifySlaveCPUReadyToBoot(uint32_t masterCpuId, uint32_t slaveCpuId)\n{\n    /* Boot status is handled during power reset and\n       CPU2 is automatically sets Bootstatus to C2_BOOTROM_BOOTSTS_SYSTEM_READY */\n    (void)masterCpuId;\n    (void)slaveCpuId;\n}\n\nvoid waitForBootCommandFromMasterCPU(uint32_t masterCpuId, uint32_t slaveCpuId)\n{\n    /* Boot status is handled during power reset and\n       CPU2 is automatically sets Bootstatus to C2_BOOTROM_BOOTSTS_SYSTEM_READY */\n    (void)masterCpuId;\n    (void)slaveCpuId;\n}\n\nvoid waitForModelInitCmdFromMasterCPU(uint32_t masterCpuId, uint32_t slaveCpuId)\n{\n    (void)masterCpuId;\n    (void)slaveCpuId;\n}\n\nvoid sendAckForStartModelInitCmdToMasterCPU(uint32_t masterCpuId, uint32_t slaveCpuId)\n{\n    (void)masterCpuId;\n    (void)slaveCpuId;\n}\n\nvoid sendEndModelInitCmdToMasterCPU(uint32_t masterCpuId, uint32_t slaveCpuId)\n{\n    (void)masterCpuId;\n    (void)slaveCpuId;\n}\n\nvoid sendReadyToRunApplicationToMasterCPU(uint32_t slaveCpuId)\n{\n    (void)slaveCpuId;\n}\n\nboolean_T checkRunApplicationCmdFromMaster(uint32_t slaveCpuId)\n{\n    (void)slaveCpuId;\n    return (boolean_T)1;\n}\n#endif\n\n\nvoid allotADCPeripheralModuleToCPU(uint16_t moduleID,uint32_t cpuId)\n{\n    #ifdef CPU1\n    /* Allot to c28xCPU1 */\n    if (1 == cpuId)\n    {\n        EALLOW;\n        DevCfgRegs.CPUSEL11.all &= ~(0x01UL << moduleID);\n        EDIS;\n    }\n    /* Allot to c28xCPU2 */\n    else\n    {\n        EALLOW;\n        DevCfgRegs.CPUSEL11.all |= (0x01UL << moduleID);\n        EDIS;\n    }\n    #endif\n}\n\nvoid allotPWMPeripheralModuleToCPU(uint16_t moduleID,uint32_t cpuId)\n{\n    #ifdef CPU1\n    /* Allot to c28xCPU1 */\n    if (1 == cpuId)\n    {\n        EALLOW;\n        DevCfgRegs.CPUSEL0.all &= ~(0x01UL << moduleID);\n        EDIS;\n    }\n    /* Allot to c28xCPU2 */\n    else\n    {\n        EALLOW;\n        DevCfgRegs.CPUSEL0.all |= (0x01UL << moduleID);\n        EDIS;\n    }\n    #endif\n}\nvoid allotSerialForExtModeToCPU(uint32_t cpuId)\n{\n    #ifdef CPU1\n    /* Allot to c28xCPU1 */\n    if (1 == cpuId)\n    {\n        EALLOW;\n        #if MW_EXTMODE_SCIMODULE == 0\n        DevCfgRegs.CPUSEL5.bit.SCI_A = 0;\n        #elif MW_EXTMODE_SCIMODULE == 1\n        DevCfgRegs.CPUSEL5.bit.SCI_B = 0;\n        #elif MW_EXTMODE_SCIMODULE == 2\n        DevCfgRegs.CPUSEL5.bit.SCI_C = 0;\n        #elif MW_EXTMODE_SCIMODULE == 3\n        DevCfgRegs.CPUSEL5.bit.SCI_D = 0;\n        #endif\n        EDIS;\n    }\n    /* Allot to c28xCPU2 */\n    else if(2 == cpuId)\n    {\n        EALLOW;\n        #if MW_EXTMODE_SCIMODULE == 0\n        DevCfgRegs.CPUSEL5.bit.SCI_A = 1;\n        #elif MW_EXTMODE_SCIMODULE == 1\n        DevCfgRegs.CPUSEL5.bit.SCI_B = 1;\n        #elif MW_EXTMODE_SCIMODULE == 2\n        DevCfgRegs.CPUSEL5.bit.SCI_C = 1;\n        #elif MW_EXTMODE_SCIMODULE == 3\n        DevCfgRegs.CPUSEL5.bit.SCI_D = 1;\n        #endif\n        EDIS;\n    }\n    else /* for ARM*/\n    {\n    }\n    #endif\n}\n/* LocalWords:  IPC usec Bootstatus BOOTROM BOOTSTS\n */\n"},{"name":"c2837xDSchedulerTimer0.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2024b\\toolbox\\c2b\\tic2000_shared\\src","tag":"","groupDisplay":"Other files","code":"/* Copyright 2015-2021 The MathWorks, Inc. */\n\n#include \"MW_f2837xD_includes.h\"\n#include \"MW_c28xx_pie.h\"\n\nextern void rt_OneStep(void);\nextern uint32_t mwInitStart;\nextern uint32_t mwInitEnd;\n\ninterrupt void TINT0_isr(void)\n{\n      #ifdef PIEMASK0\n        volatile unsigned int PIEIER1_stack_save = PieCtrlRegs.PIEIER1.all;\n      #endif\n      #ifdef PIEMASK1\n        volatile unsigned int PIEIER2_stack_save  = PieCtrlRegs.PIEIER2.all;\n      #endif\n      #ifdef PIEMASK2\n        volatile unsigned int PIEIER3_stack_save  = PieCtrlRegs.PIEIER3.all;\n      #endif\n      #ifdef PIEMASK3\n        volatile unsigned int PIEIER4_stack_save  = PieCtrlRegs.PIEIER4.all;\n      #endif\n      #ifdef PIEMASK4\n        volatile unsigned int PIEIER5_stack_save  = PieCtrlRegs.PIEIER5.all;\n      #endif\n      #ifdef PIEMASK5\n        volatile unsigned int PIEIER6_stack_save  = PieCtrlRegs.PIEIER6.all;\n      #endif\n      #ifdef PIEMASK6\n        volatile unsigned int PIEIER7_stack_save  = PieCtrlRegs.PIEIER7.all;\n      #endif\n      #ifdef PIEMASK7\n        volatile unsigned int PIEIER8_stack_save  = PieCtrlRegs.PIEIER8.all;\n      #endif\n      #ifdef PIEMASK8\n        volatile unsigned int PIEIER9_stack_save  = PieCtrlRegs.PIEIER9.all;\n      #endif\n      #ifdef PIEMASK9\n        volatile unsigned int PIEIER10_stack_save = PieCtrlRegs.PIEIER10.all;\n      #endif\n      #ifdef PIEMASK10\n        volatile unsigned int PIEIER11_stack_save = PieCtrlRegs.PIEIER11.all;\n      #endif\n      #ifdef PIEMASK11\n        volatile unsigned int PIEIER12_stack_save = PieCtrlRegs.PIEIER12.all;\n      #endif\n\n      #ifdef PIEMASK0\n        PieCtrlRegs.PIEIER1.all &= ~PIEMASK0;      /* disable group1 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK1\n        PieCtrlRegs.PIEIER2.all &= ~PIEMASK1;      /* disable group2 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK2\n        PieCtrlRegs.PIEIER3.all &= ~PIEMASK2;      /* disable group3 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK3\n        PieCtrlRegs.PIEIER4.all &= ~PIEMASK3;      /* disable group4 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK4\n        PieCtrlRegs.PIEIER5.all &= ~PIEMASK4;      /* disable group5 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK5\n        PieCtrlRegs.PIEIER6.all &= ~PIEMASK5;      /* disable group6 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK6\n        PieCtrlRegs.PIEIER7.all &= ~PIEMASK6;      /* disable group7 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK7\n        PieCtrlRegs.PIEIER8.all &= ~PIEMASK7;      /* disable group8 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK8\n        PieCtrlRegs.PIEIER9.all &= ~PIEMASK8;      /* disable group9 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK9\n        PieCtrlRegs.PIEIER10.all &= ~PIEMASK9;     /* disable group10 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK10\n        PieCtrlRegs.PIEIER11.all &= ~PIEMASK10;    /* disable group11 lower/equal priority interrupts */\n      #endif\n      #ifdef PIEMASK11\n        PieCtrlRegs.PIEIER12.all &= ~PIEMASK11;    /* disable group12 lower/equal priority interrupts */\n      #endif\n\t  #ifdef PIEMASK12\n\t\tIER &= ~(M_INT13);\n      #endif\n\t  #ifdef PIEMASK13\n\t\tIER &= ~(M_INT14);\n      #endif\n\t  \n      asm(\" RPT #5 || NOP\");               /* wait 5 cycles */\n      IFR &= ~IFRMASK;                           /* eventually disable lower/equal priority pending interrupts */\n      PieCtrlRegs.PIEACK.all = IFRMASK;          /* ACK to allow other interrupts from the same group to fire */\n      IER |= 1;\n      EINT;                                /* global interrupt enable */\n      rt_OneStep();\n      DINT;                                /* disable global interrupts during context switch, CPU will enable global interrupts after exiting ISR */\n      #ifdef PIEMASK0\n        PieCtrlRegs.PIEIER1.all = PIEIER1_stack_save;/*restore PIEIER register that was modified */\n      #endif  \n      #ifdef PIEMASK1\n        PieCtrlRegs.PIEIER2.all = PIEIER2_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK2\n        PieCtrlRegs.PIEIER3.all = PIEIER3_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK3\n        PieCtrlRegs.PIEIER4.all = PIEIER4_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK4\n        PieCtrlRegs.PIEIER5.all = PIEIER5_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK5\n        PieCtrlRegs.PIEIER6.all = PIEIER6_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK6\n        PieCtrlRegs.PIEIER7.all = PIEIER7_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK7\n        PieCtrlRegs.PIEIER8.all = PIEIER8_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK8\n        PieCtrlRegs.PIEIER9.all = PIEIER9_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK9\n        PieCtrlRegs.PIEIER10.all= PIEIER10_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK10\n        PieCtrlRegs.PIEIER11.all= PIEIER11_stack_save;/*restore PIEIER register that was modified */\n      #endif\n      #ifdef PIEMASK11\n        PieCtrlRegs.PIEIER12.all= PIEIER12_stack_save;/*restore PIEIER register that was modified */\n      #endif\n\t  #ifdef PIEMASK12\n\t\tIER |= M_INT13;\n      #endif\n\t  #ifdef PIEMASK13\n\t\tIER |= M_INT14;\n      #endif\n}\n\nvoid configureTimer0(float baseRate, float systemClock)\n{\n  #ifndef TIC2000_SOC_BASEPRODUCT\n    #ifdef CPU1\n        EINT;\n        uint32_t ipcCountVar = 0;\n        if (0x425 == mwInitStart)\n        {\n            /* Wait until completion of CPU2 GPIO initialization */\n            while ((0x36E != mwInitEnd))\n            {\n                ipcCountVar++;\n            }\n        }\n        DINT;\n    #else\n\t      uint32_t *pulMsgRam;\n\t      pulMsgRam = (void *)CPU01_TO_CPU02_PASSMSG;\n        IPCLiteLtoRDataWrite(IPC_FLAG0, pulMsgRam[2], 0x36E,\n                         IPC_LENGTH_32_BITS, IPC_FLAG31);\n    #endif\n  #endif\n    \n    /* InitCpuTimers() - CPU Timers are initialized in \n     * MW_c28xx_board.c in the generated code.\n     */\n\n\t/* Configure CPU-Timer 0 to interrupt every base rate. */\n\t/* Parameters:  Timer Pointer, CPU Freq in MHz, Period in usec. */\n\tConfigCpuTimer(&CpuTimer0, systemClock, baseRate * 1000000);\n\tStartCpuTimer0();\n\n    #ifdef TIC2000_SOC_BASEPRODUCT\n\tPieCtrlRegs.PIEIFR1.bit.INTx7 = 1;   /* Set Pending interrupt for TINT0. TINT0 will trigger as soon as the its interrupt is enabled*/\n    #endif\n    \n\tEALLOW;\n\tPieVectTable.TIMER0_INT = &TINT0_isr;     /* Hook interrupt to the ISR*/\n\tEDIS;\n\n\tPieCtrlRegs.PIEIER1.bit.INTx7 = 1;   /* Enable interrupt TINT0 */\n\tIER |= M_INT1;\n}\n\nvoid stopTimer0(void)\n{\n    StopCpuTimer0();\n}\nvoid enableTimer0Interrupt(void)\n{\n\tasm(\" SETC INTM\"); /* Disable Interrupt Global Enable Bit - set it to 1 */\n\tEALLOW;\n\tPieCtrlRegs.PIEIER1.all |= (1 << 6); /* Enable PIER bit for timer 0 */\n\tEDIS;\n\tasm(\" CLRC INTM\"); /* Enable Interrupt Global Enable Bit - set it to 0 */\n}\n\nbool disableTimer0Interrupt(void)\n{\n    bool isrEnabled = false;\n\t\n    asm(\" SETC INTM\"); /* Disable Interrupt Global Enable Bit - set it to 1 */\n    \n    isrEnabled = PieCtrlRegs.PIEIER1.all & (1 << 6) ;\n\tEALLOW;\n\tPieCtrlRegs.PIEIER1.all &= ~(1 << 6); /* Disable PIER bit for timer 0 */\n\tasm(\" RPT #5 || NOP\");\n\tIFR &= 0xFFFE;\n\tPieCtrlRegs.PIEACK.all = 0x1;\n\tEDIS;\n\tasm(\" CLRC INTM\"); /* Enable Interrupt Global Enable Bit - set it to 0 */\n    \n    return isrEnabled;\n}\n\nvoid restoreTimer0Interrupt(bool isrStatus){\n    if(isrStatus)\n        enableTimer0Interrupt();\n    else\n        disableTimer0Interrupt();\n}\n"},{"name":"clb.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\driverlib\\f2837xd\\driverlib","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   clb.c\n//\n// TITLE:  C28x CLB driver.\n//\n//###########################################################################\n// $Copyright:\n// Copyright (C) 2022 Texas Instruments Incorporated - http://www.ti.com\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n#include \"clb.h\"\n\n//*****************************************************************************\n//\n// CLB_configCounterLoadMatch\n//\n//*****************************************************************************\nvoid CLB_configCounterLoadMatch(uint32_t base, CLB_Counters counterID,\n                               uint32_t load, uint32_t match1, uint32_t match2)\n{\n    ASSERT(CLB_isBaseValid(base));\n\n    EALLOW;\n    switch(counterID)\n    {\n        case CLB_CTR0:\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_0_LOAD, load);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_0_MATCH1, match1);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_0_MATCH2, match2);\n            break;\n\n        case CLB_CTR1:\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_1_LOAD, load);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_1_MATCH1, match1);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_1_MATCH2, match2);\n            break;\n\n        case CLB_CTR2:\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_2_LOAD, load);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_2_MATCH1, match1);\n            CLB_writeInterface(base, CLB_ADDR_COUNTER_2_MATCH2, match2);\n            break;\n\n        default:\n            //\n            // Invalid counterID value\n            //\n            break;\n    }\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// CLB_clearFIFOs\n//\n//*****************************************************************************\nvoid CLB_clearFIFOs(uint32_t base)\n{\n    uint16_t i;\n\n    ASSERT(CLB_isBaseValid(base));\n\n    for(i = 0U; i < CLB_FIFO_SIZE; i++)\n    {\n        HWREG(base + CLB_DATAEXCH + CLB_O_PULL(i)) = 0U;\n    }\n\n    HWREG(base + CLB_LOGICCTL + CLB_O_BUF_PTR) = 0U;\n}\n\n//*****************************************************************************\n//\n// CLB_writeFIFOs\n//\n//*****************************************************************************\nvoid CLB_writeFIFOs(uint32_t base , const uint32_t pullData[])\n{\n    ASSERT(CLB_isBaseValid(base));\n\n    //\n    // Clear the FIFO and pointer\n    //\n    CLB_clearFIFOs(base);\n\n    //\n    // Write data into the FIFO.\n    //\n    HWREG(base + CLB_DATAEXCH + CLB_O_PULL(0U)) = pullData[0U];\n    HWREG(base + CLB_DATAEXCH + CLB_O_PULL(1U)) = pullData[1U];\n    HWREG(base + CLB_DATAEXCH + CLB_O_PULL(2U)) = pullData[2U];\n    HWREG(base + CLB_DATAEXCH + CLB_O_PULL(3U)) = pullData[3U];\n}\n\n//*****************************************************************************\n//\n// CLB_readFIFOs\n//\n//*****************************************************************************\nvoid CLB_readFIFOs(uint32_t base , uint32_t pushData[])\n{\n    ASSERT(CLB_isBaseValid(base));\n\n    //\n    // Read data from the FIFO.\n    //\n    pushData[0U] = HWREG(base + CLB_DATAEXCH + CLB_O_PUSH(0U)) ;\n    pushData[1U] = HWREG(base + CLB_DATAEXCH + CLB_O_PUSH(1U)) ;\n    pushData[2U] = HWREG(base + CLB_DATAEXCH + CLB_O_PUSH(2U)) ;\n    pushData[3U] = HWREG(base + CLB_DATAEXCH + CLB_O_PUSH(3U)) ;\n}\n\n\n"},{"name":"dma.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\driverlib\\f2837xd\\driverlib","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   dma.c\n//\n// TITLE:  C28x DMA driver.\n//\n//###########################################################################\n// $Copyright:\n// Copyright (C) 2022 Texas Instruments Incorporated - http://www.ti.com\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n#include \"dma.h\"\n\n//*****************************************************************************\n//\n// DMA_configAddresses\n//\n//*****************************************************************************\nvoid DMA_configAddresses(uint32_t base, const void *destAddr,\n                         const void *srcAddr)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n\n    EALLOW;\n\n    //\n    // Set up SOURCE address.\n    //\n    HWREG(base + DMA_O_SRC_BEG_ADDR_SHADOW) = (uint32_t)srcAddr;\n    HWREG(base + DMA_O_SRC_ADDR_SHADOW)     = (uint32_t)srcAddr;\n\n    //\n    // Set up DESTINATION address.\n    //\n    HWREG(base + DMA_O_DST_BEG_ADDR_SHADOW) = (uint32_t)destAddr;\n    HWREG(base + DMA_O_DST_ADDR_SHADOW)     = (uint32_t)destAddr;\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// DMA_configBurst\n//\n//*****************************************************************************\nvoid DMA_configBurst(uint32_t base, uint16_t size, int16_t srcStep,\n                     int16_t destStep)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n    ASSERT((size >= 1U) && (size <= 32U));\n    ASSERT(((srcStep >= -4096) && (srcStep <= 4095)) &&\n           ((destStep >= -4096) && (destStep <= 4095)));\n\n    EALLOW;\n\n    //\n    // Set up BURST registers.\n    //\n    HWREGH(base + DMA_O_BURST_SIZE)     = size - 1U;\n    HWREGH(base + DMA_O_SRC_BURST_STEP) = srcStep;\n    HWREGH(base + DMA_O_DST_BURST_STEP) = destStep;\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// DMA_configTransfer\n//\n//*****************************************************************************\nvoid DMA_configTransfer(uint32_t base, uint32_t transferSize, int16_t srcStep,\n                        int16_t destStep)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n    ASSERT(transferSize <= 0x10000U);\n    ASSERT(((srcStep >= -4096) && (srcStep <= 4095)) &&\n           ((destStep >= -4096) && (destStep <= 4095)));\n\n    EALLOW;\n\n    //\n    // Set up TRANSFER registers.\n    //\n    HWREGH(base + DMA_O_TRANSFER_SIZE)     = (uint16_t)(transferSize - 1U);\n    HWREGH(base + DMA_O_SRC_TRANSFER_STEP) = srcStep;\n    HWREGH(base + DMA_O_DST_TRANSFER_STEP) = destStep;\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// DMA_configWrap\n//\n//*****************************************************************************\nvoid DMA_configWrap(uint32_t base, uint32_t srcWrapSize, int16_t srcStep,\n                    uint32_t destWrapSize, int16_t destStep)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n    ASSERT((srcWrapSize <= 0x10000U) || (destWrapSize <= 0x10000U));\n    ASSERT(((srcStep >= -4096) && (srcStep <= 4095)) &&\n           ((destStep >= -4096) && (destStep <= 4095)));\n\n    EALLOW;\n\n    //\n    // Set up WRAP registers.\n    //\n    HWREGH(base + DMA_O_SRC_WRAP_SIZE) = (uint16_t)(srcWrapSize - 1U);\n    HWREGH(base + DMA_O_SRC_WRAP_STEP) = srcStep;\n\n    HWREGH(base + DMA_O_DST_WRAP_SIZE) = (uint16_t)(destWrapSize - 1U);\n    HWREGH(base + DMA_O_DST_WRAP_STEP) = destStep;\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// DMA_configMode\n//\n//*****************************************************************************\nvoid DMA_configMode(uint32_t base, DMA_Trigger trigger, uint32_t config)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n\n    EALLOW;\n\n    //\n    // Set up trigger selection in the CMA/CLA trigger source selection\n    // registers. These are considered part of system control.\n    //\n    switch(base)\n    {\n        case DMA_CH1_BASE:\n            //\n            // Channel 1\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL1_CH1_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL1_CH1_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH1_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH1_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 1U;\n            break;\n\n        case DMA_CH2_BASE:\n            //\n            // Channel 2\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL1_CH2_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL1_CH2_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH2_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH2_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 2U;\n            break;\n\n        case DMA_CH3_BASE:\n            //\n            // Channel 3\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL1_CH3_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL1_CH3_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH3_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH3_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 3U;\n            break;\n\n        case DMA_CH4_BASE:\n            //\n            // Channel 4\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL1) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL1_CH4_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL1_CH4_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH4_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH4_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 4U;\n            break;\n\n        case DMA_CH5_BASE:\n            //\n            // Channel 5\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL2) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL2) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL2_CH5_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL2_CH5_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH5_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH5_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 5U;\n            break;\n\n        case DMA_CH6_BASE:\n            //\n            // Channel 6\n            //\n            HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL2) =\n                (HWREG(DMACLASRCSEL_BASE + SYSCTL_O_DMACHSRCSEL2) &\n                 ~((uint32_t)SYSCTL_DMACHSRCSEL2_CH6_M)) |\n                ((uint32_t)trigger << SYSCTL_DMACHSRCSEL2_CH6_S);\n\n            //\n            // Set peripheral interrupt select bits to the channel number.\n            //\n            HWREGH(DMA_CH6_BASE + DMA_O_MODE) =\n               (HWREGH(DMA_CH6_BASE + DMA_O_MODE) & ~DMA_MODE_PERINTSEL_M) | 6U;\n            break;\n\n        default:\n            //\n            // Invalid base.\n            //\n            break;\n    }\n\n    //\n    // Write the configuration to the mode register.\n    //\n    HWREGH(base + DMA_O_MODE) &= ~(DMA_MODE_DATASIZE | DMA_MODE_CONTINUOUS |\n                                   DMA_MODE_ONESHOT);\n    HWREGH(base + DMA_O_MODE) |= config;\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// DMA_configChannel\n//\n//*****************************************************************************\nvoid DMA_configChannel(uint32_t base, const DMA_ConfigParams *transfParams)\n{\n    //\n    // Check the arguments.\n    //\n    ASSERT(DMA_isBaseValid(base));\n    ASSERT(((transfParams->configSize == DMA_CFG_SIZE_16BIT) ||\n            (transfParams->configSize == DMA_CFG_SIZE_32BIT)) &&\n           ((transfParams->transferMode == DMA_CFG_ONESHOT_DISABLE) ||\n            (transfParams->transferMode == DMA_CFG_ONESHOT_ENABLE)) &&\n           ((transfParams->reinitMode == DMA_CFG_CONTINUOUS_DISABLE) ||\n            (transfParams->reinitMode == DMA_CFG_CONTINUOUS_ENABLE)));\n\n    //\n    // Configure DMA Channel\n    //\n    DMA_configAddresses(base, (const void *)transfParams->destAddr,\n                        (const void *)transfParams->srcAddr);\n\n    //\n    // Configure the size of each burst and the address step size\n    //\n    DMA_configBurst(base, transfParams->burstSize, transfParams->srcBurstStep,\n                    transfParams->destBurstStep);\n\n    //\n    // Configure the transfer size and the address step that is\n    // made after each burst.\n    //\n    DMA_configTransfer(base, transfParams->transferSize,\n                       transfParams->srcTransferStep,\n                       transfParams->destTransferStep);\n\n    //\n    // Configure the DMA channel's wrap settings\n    //\n    DMA_configWrap(base, transfParams->srcWrapSize, transfParams->srcWrapStep,\n                   transfParams->destWrapSize, transfParams->destWrapStep);\n\n    //\n    // Configure the DMA channel's trigger and mode\n    //\n    DMA_configMode(base, transfParams->transferTrigger,\n                   transfParams->transferMode | transfParams->reinitMode |\n                   transfParams->configSize);\n\n    //\n    // Enable the selected peripheral trigger to start a DMA transfer\n    //\n    DMA_enableTrigger(base);\n\n    if(transfParams->enableInterrupt)\n    {\n        //\n        // Set the channel interrupt mode\n        //\n        DMA_setInterruptMode(base, transfParams->interruptMode);\n\n        //\n        // Enable the indicated DMA channel interrupt source\n        //\n        DMA_enableInterrupt(base);\n    }\n    else\n    {\n        //\n        // Disable the indicated DMA channel interrupt source\n        //\n        DMA_disableInterrupt(base);\n    }\n}\n\n"},{"name":"memcpy_fast.asm","type":"other","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\libraries\\dsp\\FPU\\c28\\source\\fpu32\\utility","tag":"","groupDisplay":"Other files","code":";;#############################################################################\n;;! \\file source/vector/memcpy_fast.asm\n;;!\n;;! \\brief Optimized memory copy, src->dest.\n;;! \\author David M. Alter\n;;! \\date   07/06/11\n;;\n;;\n;; HISTORY:\n;;   07/06/11 - original (D. Alter)\n;;   10/23/14 - Added note about non-interruptibility and no support for\n;;              above 22 bit address. (D. Alter)\n;;\n;; DESCRIPTION: Optimized memory copy, src->dest.\n;;\n;; FUNCTION: \n;;   extern void memcpy_fast(void* dst, const void* src, Uint16 N);\n;;\n;; USAGE:       memcpy_fast(dst, src, N);\n;;\n;; PARAMETERS:  void* dst = pointer to destination\n;;              const void* src = pointer to source\n;;              N = number of 16-bit words to copy\n;;\n;; RETURNS:     none\n;;\n;; BENCHMARK:   1 cycle per copy + ~20 cycles of overhead (including\n;;   the call and return).  This assumes src and dst are located in\n;;   different internal RAM blocks.\n;;\n;; NOTES:\n;;   1) The function checks for the case of N=0 and just returns if true.\n;;   2) This function is not interruptible.  Use memcpy_fast_far instead for \n;;      interruptibility.\n;;   3) This function does not support memory above 22 bits address.\n;;      For input data above 22 bits address, use memcpy_fast_far instead.\n;;\n;;#############################################################################\n;;!\n;;! Copyright: Copyright (C) 2023 Texas Instruments Incorporated -\n;;!\tAll rights reserved not granted herein.\n;;!\tLimited License.\n;;!\n;;! Texas Instruments Incorporated grants a world-wide, royalty-free,\n;;! non-exclusive license under copyrights and patents it now or hereafter\n;;! owns or controls to make, have made, use, import, offer to sell and sell\n;;! (\"Utilize\") this software subject to the terms herein. With respect to the\n;;! foregoing patent license, such license is granted solely to the extent that\n;;! any such patent is necessary to Utilize the software alone. The patent\n;;! license shall not apply to any combinations which include this software,\n;;! other than combinations with devices manufactured by or for TI \n;;! (\"TI Devices\").\n;;! No hardware patent is licensed hereunder.\n;;!\n;;! Redistributions must preserve existing copyright notices and reproduce this\n;;! license (including the above copyright notice and the disclaimer and\n;;! (if applicable) source code license limitations below) in the documentation\n;;!  and/or other materials provided with the distribution.\n;;!\n;;! Redistribution and use in binary form, without modification, are permitted\n;;! provided that the following conditions are met:\n;;!\n;;! * No reverse engineering, decompilation, or disassembly of this software is \n;;! permitted with respect to any software provided in binary form.\n;;! * Any redistribution and use are licensed by TI for use only \n;;!   with TI Devices.\n;;! * Nothing shall obligate TI to provide you with source code for the \n;;!   software licensed and provided to you in object code.\n;;!\n;;! If software source code is provided to you, modification and redistribution\n;;! of the source code are permitted provided that the following conditions \n;;! are met:\n;;!\n;;! * any redistribution and use of the source code, including any resulting\n;;!   derivative works, are licensed by TI for use only with TI Devices.\n;;! * any redistribution and use of any object code compiled from the source\n;;!   code and any resulting derivative works, are licensed by TI for use \n;;!   only with TI Devices.\n;;!\n;;! Neither the name of Texas Instruments Incorporated nor the names of its\n;;! suppliers may be used to endorse or promote products derived from this \n;;! software without specific prior written permission.\n;;#############################################################################\n        .if __TI_EABI__\n        .asg memcpy_fast, _memcpy_fast\n        .endif\n    \n        .global _memcpy_fast\n        .text\n\n_memcpy_fast:\n        ADDB    AL, #-1                ;Repeat \"N-1\" times\n        BF      done, NC               ;Branch if N was zero\n        MOVL    XAR7, XAR5             ;XAR7 = XAR5 = dst\n        RPT     @AL\n    ||  PREAD   *XAR4++, *XAR7         ;Do the copy\n\n;Finish up\ndone:\n        LRETR                          ;return\n\n;end of function memcpy_fast()\n;*********************************************************************\n\n       .end\n;;#############################################################################\n;;  End of File\n;;#############################################################################\n"},{"name":"mw_soc_c2000_ipc.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2024b\\toolbox\\c2b\\tic2000_soc\\src","tag":"","groupDisplay":"Other files","code":"/* mw_soc_c2000_ipc.c\n*\n* Copyright 2020-2024 The MathWorks, Inc.\n*\n*/\n#ifdef IPC_BLOCK_INCLUDED\n#include \"mw_soc_c2000_ipc.h\"\n\n#define DEBUG 0  /* Debugging info 1:on 0:off */\n#if DEBUG\n#include <stdlib.h> /* For printf. */\n#endif\n#ifndef __TMS320C28XX_CLA__\n#include <string.h> /* For memcpy. */\n#endif /* __TMS320C28XX_CLA__ */\n\n#define ADDRESS_GRANULARITY (2)\n\n#ifndef __TMS320C28XX_CLA__\n#if defined(MW_F2838X) || defined(MW_F28P65X)\n    #if defined(CPU1)\n    volatile uint32_T *setReg = &(Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCSET.all);\n    volatile uint32_T *stsReg = &(Cpu1toCpu2IpcRegs.CPU2TOCPU1IPCSTS.all);\n    volatile uint32_T *ackReg = &(Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCACK.all);\n    volatile uint32_T *clrReg = &(Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCCLR.all);\n    volatile uint32_T *flgReg = &(Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCFLG.all);\n    #elif defined (CPU2)\n    volatile uint32_T *setReg = &(Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCSET.all);\n    volatile uint32_T *stsReg = &(Cpu2toCpu1IpcRegs.CPU1TOCPU2IPCSTS.all);\n    volatile uint32_T *ackReg = &(Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCACK.all);\n    volatile uint32_T *clrReg = &(Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCCLR.all);\n    volatile uint32_T *flgReg = &(Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCFLG.all);\n    #elif defined (CM)\n    volatile IPC_Flag_Ctr_Reg_t  *IPC_CMTOCPU1_FlagReg = (volatile IPC_Flag_Ctr_Reg_t *) IPC_CMTOCPU1_BASE;\n    volatile IPC_Flag_Ctr_Reg_t  *IPC_CMTOCPU2_FlagReg = (volatile IPC_Flag_Ctr_Reg_t *) IPC_CMTOCPU2_BASE;\n    #endif\n#else\n    volatile uint32_T *setReg = &(IpcRegs.IPCSET.all);\n    volatile uint32_T *stsReg = &(IpcRegs.IPCSTS.all);\n    volatile uint32_T *ackReg = &(IpcRegs.IPCACK.all);\n    volatile uint32_T *clrReg = &(IpcRegs.IPCCLR.all);\n    volatile uint32_T *flgReg = &(IpcRegs.IPCFLG.all);\n#endif\n\n/* The IPC data is stored in the respective RAMs (see mw_soc_c2000_ipc.h for more information).\n* The structure of the IPC data is broken down into:\n*      IPC channel information that contains the pointer information of IPCChannelStruct_T and is stored for all 32 channels.\n*      IPC buffer data is configured as per the required channel buffer sizes.\n* For example,\n*      Channel 0 - head\n*      Channel 0 - tail\n*      ...\n*      Channel 0 - bufferStartAdd\n*      Channel 1 - head\n*      ...\n*      Channel 32 - bufferStartAdd\n*      Channel 0 - buffer data\n*      Channel 1 - buffer data\n* The only exception is for C28x-CM IPC where an additional pointer is required per channel, as part of the channel information, due to the different views.\n*/\n#define MW_NUM_IPC_CHANNELS_TOTAL 32 /* This macro is used to determine the offset where the IPC data is stored and is not used while allocating handles. */\n\n/* The IPC channel information is stored at the start of the RAM, for all 32 channels.\n* The information stored per channel is:\n*      CPU1_CPU2_IPC, CPU1_CLA_IPC and CPU2_CLA_IPC: A total of 8 uint16_T and 1 CLA_PTR is stored.\n*             These are the head, tail, full, mutex, overwrite, lastReadStatus, bufferLength, dataTypeInBytes (8 uint16_T) and the bufferStartAdd (1 CLA_PTR).\n*      CPU1_CM_IPC and CPU2_CM_IPC: A total of 8 uint16_T and 2 CLA_PTR is stored.\n*             These are the head, tail, full, mutex, overwrite, lastReadStatus, bufferLength, dataTypeInBytes (8 uint16_T) bufferStartAdd and the bufferStartAdd + 1 (2 CLA_PTR).\n*             The bufferStartAdd and bufferStartAdd + 1 double pointers are required to store the two memory views - C28x view and CM view.\n*/\n#define MW_SIZE_IPC_CHANNELS_INFO (8*sizeof(uint16_T) + sizeof(CLA_PTR))\n#define MW_SIZE_IPC_CHANNELS_INFO_C28xCM (8*sizeof(uint16_T) + 2*sizeof(CLA_PTR))\n\n#if defined(CPU1_CPU2_IPC)\n    #if defined(CPU1)\n    uint16_T isInitialized = 0U; /* Boolean to initialize GS RAM R/W access. */\n    #endif\n\nvolatile uint32_T buffCPUOffsetInWords = 0; /* Cumulative sum of required buffer sizes. */\n\n/* TO DO: The lists may be used for further optimizations. */\n// const uint16_T ipcChannelCPUList[] = MW_IPC_CHANNELS_CPU_LIST;\n// volatile IPC_CPUHandle_T ipcHandleForCPU[MW_NUM_IPC_CHANNELS_CPU];\n#endif\n\n#if defined(CPU1_CM_IPC)\n    #if defined(CPU1)\n    volatile uint32_T buffCPU1CMOffsetInWords = MW_NUM_IPC_CHANNELS_TOTAL * MW_SIZE_IPC_CHANNELS_INFO_C28xCM; /* Cumulative sum of required buffer sizes. */\n    #elif defined(CM)\n    volatile uint32_T buffCPU1CMOffsetInBytes = MW_NUM_IPC_CHANNELS_TOTAL * MW_SIZE_IPC_CHANNELS_INFO_C28xCM; /* Cumulative sum of required buffer sizes. */\n    #endif\n\n/* TO DO: The lists may be used for further optimizations. */\n// const uint16_T ipcChannelCPU1CMList[] = MW_IPC_CHANNELS_CPU1CM_LIST;\n// volatile IPC_CPUHandle_T ipcHandleForCPU1CM[MW_NUM_IPC_CHANNELS_CPU1CM];\n#endif\n\n#if defined(CPU2_CM_IPC)\n    #if defined(CPU2)\n    volatile uint32_T buffCPU2CMOffsetInWords = MW_NUM_IPC_CHANNELS_TOTAL * MW_SIZE_IPC_CHANNELS_INFO_C28xCM; /* Cumulative sum of required buffer sizes. */\n    #elif defined(CM)\n    volatile uint32_T buffCPU2CMOffsetInBytes = MW_NUM_IPC_CHANNELS_TOTAL * MW_SIZE_IPC_CHANNELS_INFO_C28xCM; /* Cumulative sum of required buffer sizes. */\n    #endif\n\n/* TO DO: The lists may be used for further optimizations. */\n// const uint16_T ipcChannelCPU2CMList[] = MW_IPC_CHANNELS_CPU2CM_LIST;\n// volatile IPC_CPUHandle_T ipcHandleForCPU2CM[MW_NUM_IPC_CHANNELS_CPU2CM];\n#endif\n\n#if defined(CPU1_CLA_IPC) || defined(CPU2_CLA_IPC)\nvolatile uint32_T buffCPUCLAOffsetInWords = MW_NUM_IPC_CHANNELS_TOTAL * MW_SIZE_IPC_CHANNELS_INFO;\nconst uint16_T ipcChannelCPUCLAList[] = MW_IPC_CHANNELS_CPUCLA_LIST;\n#pragma DATA_SECTION(ipcHandleForCPUCLA, \"Cla1DataRam0\");\nvolatile IPC_CPUHandle_T ipcHandleForCPUCLA[MW_NUM_IPC_CHANNELS_CPUCLA];\n#endif\n\nuint16_T MW_bSearch_IPC_Channels(const uint16_T sorted_array[], uint16_T size, uint16_T target) {\n    uint16_T left = 0;\n    uint16_T right = size - 1;\n\n    while (left <= right) {\n        uint16_T mid = left + ((right - left) >> 1); /* Right shift operator for division by 2. */\n\n        if (sorted_array[mid] == target)\n        {\n            return mid; /* Found the target index. */\n        }\n        else if (sorted_array[mid] < target)\n        {\n            left = mid + 1; /* Continue searching in the right half. */\n        }\n        else\n        {\n            right = mid - 1; /* Continue searching in the left half. */\n        }\n    }\n\n    return 0U; /* Target index not found. */\n}\n\nMW_IPC_Handle MW_IPC_Init(MW_IPC_Params_T *IpcParams)\n{\n    uint32_T ipcflag = 0x00000001, ipcflag1;\n    /* Reset the IPC status flags. */\n    ipcflag1 = ipcflag << IpcParams->ChNum;\n    #if defined(CPU1) || defined(CPU2)\n    (*clrReg) |= ipcflag1;\n    #elif defined(CM)\n    IPC_CMTOCPU1_FlagReg->IPC_ACK |= ipcflag1;\n    IPC_CMTOCPU2_FlagReg->IPC_ACK |= ipcflag1;\n    #endif\n\n    IPC_CPUHandle_T ipcHandle; /* Local IPC handle which is returned by value to the global variable in the generated code. */\n\n    uint32_T sharedAddressPU1toPU2; /* Shared memory address for H_PU1 to H_PU2. */\n    uint32_T sharedAddressPU2toPU1; /* Buffer memory address for H_PU2 to H_PU1. */\n\n    #if (defined(CPU1_CPU2_IPC) && defined(CPU1)) || \\\n        (defined(CPU1_CM_IPC) && defined(CPU1)) || \\\n        (defined(CPU2_CM_IPC) && defined(CPU2)) || \\\n        (defined(CPU1_CLA_IPC) && defined(CPU1)) || \\\n        (defined(CPU2_CLA_IPC) && defined(CPU2))\n    uint32_T bufferAddressPU1toPU2; /* Buffer memory address for H_PU1 to H_PU2. */\n    #endif\n\n    #if (defined(CPU1_CPU2_IPC) && defined(CPU2)) || \\\n        (defined(CPU1_CM_IPC) && defined(CM)) || \\\n        (defined(CPU2_CM_IPC) && defined(CM)) || \\\n        (defined(CPU1_CLA_IPC) && defined(CPU1)) || \\\n        (defined(CPU2_CLA_IPC) && defined(CPU2))\n    uint32_T bufferAddressPU2toPU1; /* Buffer memory address for H_PU2 to H_PU1. */\n    #endif\n\n    #if (defined(CPU1_CM_IPC) && defined(CPU1)) || \\\n        (defined(CPU2_CM_IPC) && defined(CPU2))\n    uint32_T bufferAddressPU1toPU2_CM; /* Buffer memory address for H_PU1 to H_PU2 in the CM view. */\n    #endif\n\n    #if (defined(CPU1_CM_IPC) && defined(CM)) || \\\n        (defined(CPU2_CM_IPC) && defined(CM))\n    uint32_T bufferAddressPU2toPU1_CM; /* Buffer memory address for H_PU2 to H_PU1 in the CM view. */\n    #endif\n\n    uint16_T isH_PU1 = 0U; /* Boolean to check if current PU is H_PU1 or H_PU2. */\n\n    /* Find the addresses and processing unit information for the current IPC handle. */\n    switch (IpcParams->IPCBetween)\n    {\n        case IPC_CPU1CPU2:\n            #if defined(CPU1_CPU2_IPC)\n                #if defined(CPU1) || defined(CPU2)\n                sharedAddressPU1toPU2 = CPU1TOCPU2_RAMMSG_IPC_START + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO);\n                sharedAddressPU2toPU1 = CPU2TOCPU1_RAMMSG_IPC_START + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO);\n                #endif\n                #if defined(CPU1)\n                bufferAddressPU1toPU2 = CPU1TOCPU2_RAMGS_IPC_START + buffCPUOffsetInWords;\n                isH_PU1 = 1U;\n                #elif defined(CPU2)\n                bufferAddressPU2toPU1 = CPU2TOCPU1_RAMGS_IPC_START + buffCPUOffsetInWords;\n                isH_PU1 = 0U;\n                #endif\n            #endif\n            break;\n        case IPC_CPU1CM:\n            #if defined(CPU1_CM_IPC)\n                #if defined(CPU1)\n                sharedAddressPU1toPU2 = CPUTOCM_RAMMSG_IPC_START_C28XVIEW + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO_C28xCM);\n                sharedAddressPU2toPU1 = CMTOCPU_RAMMSG_IPC_START_C28XVIEW + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO_C28xCM);\n                bufferAddressPU1toPU2 = CPUTOCM_RAMMSG_IPC_START_C28XVIEW + buffCPU1CMOffsetInWords;\n                bufferAddressPU1toPU2_CM = CPU1TOCM_RAMMSG_IPC_START_CMVIEW + (buffCPU1CMOffsetInWords * 2);\n                isH_PU1 = 1U;\n                #elif defined(CM)\n                sharedAddressPU1toPU2 = CPU1TOCM_RAMMSG_IPC_START_CMVIEW + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO_C28xCM);\n                sharedAddressPU2toPU1 = CMTOCPU1_RAMMSG_IPC_START_CMVIEW + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO_C28xCM);\n                bufferAddressPU2toPU1 = CMTOCPU_RAMMSG_IPC_START_C28XVIEW + (buffCPU1CMOffsetInBytes / 2);\n                bufferAddressPU2toPU1_CM = CMTOCPU1_RAMMSG_IPC_START_CMVIEW + buffCPU1CMOffsetInBytes;\n                isH_PU1 = 0U;\n                #endif\n            #endif\n            break;\n        case IPC_CPU2CM:\n            #if defined(CPU2_CM_IPC)\n                #if defined(CPU2)\n                sharedAddressPU1toPU2 = CPUTOCM_RAMMSG_IPC_START_C28XVIEW + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO_C28xCM);\n                sharedAddressPU2toPU1 = CMTOCPU_RAMMSG_IPC_START_C28XVIEW + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO_C28xCM);\n                bufferAddressPU1toPU2 = CPUTOCM_RAMMSG_IPC_START_C28XVIEW + buffCPU2CMOffsetInWords;\n                bufferAddressPU1toPU2_CM = CPU2TOCM_RAMMSG_IPC_START_CMVIEW + (buffCPU2CMOffsetInWords * 2);\n                isH_PU1 = 1U;\n                #elif defined(CM)\n                sharedAddressPU1toPU2 = CPU2TOCM_RAMMSG_IPC_START_CMVIEW + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO_C28xCM);\n                sharedAddressPU2toPU1 = CMTOCPU2_RAMMSG_IPC_START_CMVIEW + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO_C28xCM);\n                bufferAddressPU2toPU1 = CMTOCPU_RAMMSG_IPC_START_C28XVIEW + (buffCPU2CMOffsetInBytes / 2);\n                bufferAddressPU2toPU1_CM = CMTOCPU2_RAMMSG_IPC_START_CMVIEW + buffCPU2CMOffsetInBytes;\n                isH_PU1 = 0U;\n                #endif\n            #endif\n            break;\n        case IPC_CPU1CLA:\n        case IPC_CPU2CLA:\n            #if defined(CPU1_CLA_IPC) || defined(CPU2_CLA_IPC)\n                #if defined(CPU1) || defined(CPU2)\n                sharedAddressPU1toPU2 = CPUTOCLA_SHRD_MSG_RAM + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO);\n                sharedAddressPU2toPU1 = CLATOCPU_SHRD_MSG_RAM + (IpcParams->ChNum * MW_SIZE_IPC_CHANNELS_INFO);\n                bufferAddressPU1toPU2 = CPUTOCLA_SHRD_MSG_RAM + buffCPUCLAOffsetInWords;\n                bufferAddressPU2toPU1 = CLATOCPU_SHRD_MSG_RAM + buffCPUCLAOffsetInWords;\n                isH_PU1 = 1U;\n                #endif\n            #endif\n            break;\n    }\n\n    /* Initialize required GS RAM for each C28x core. */\n    #ifdef CPU1_CPU2_IPC\n    if (IpcParams->IPCBetween == IPC_CPU1CPU2)\n    {\n        #if defined(CPU1)\n        if (!isInitialized)\n        {\n            uint32_T i = 0;\n            uint32_T MemCfgRegVar = 0;\n\n            EALLOW;\n            #if defined(MW_F28P65X) /* Set access for GS RAMs that are 8K words each. */\n                /* Set access of GS RAM for CPU1. */\n                for (i = ((uint32_T)CPU1TOCPU2_RAMGS_IPC_START) >> 12; i < (((uint32_T)CPU1TOCPU2_RAMGS_IPC_LENGTH + (uint32_T)CPU1TOCPU2_RAMGS_IPC_START) >> 12); i = i + 2)\n                {\n                    MemCfgRegVar = MemCfgRegVar & (~(1UL << ((i - RAMGS_START) / 2)));\n                }\n                \n                /* Set access of GS RAM for CPU2. */\n                for (i = ((uint32_T)CPU2TOCPU1_RAMGS_IPC_START) >> 12; i < (((uint32_T)CPU2TOCPU1_RAMGS_IPC_LENGTH + (uint32_T)CPU2TOCPU1_RAMGS_IPC_START) >> 12); i = i + 2)\n                {\n                    MemCfgRegVar = MemCfgRegVar | (1UL << ((i - RAMGS_START) / 2));\n                }\n            #else /* Set access for GS RAMs that are 4K words each. */\n                /* Set access of GS RAM for CPU1. */\n                for (i = ((uint32_T)CPU1TOCPU2_RAMGS_IPC_START) >> 12; i < (((uint32_T)CPU1TOCPU2_RAMGS_IPC_LENGTH + (uint32_T)CPU1TOCPU2_RAMGS_IPC_START) >> 12); i++)\n                {\n                    MemCfgRegVar = MemCfgRegVar & (~(1UL << (i - RAMGS_START)));\n                }\n                \n                /* Set access of GS RAM for CPU2. */\n                for (i = ((uint32_T)CPU2TOCPU1_RAMGS_IPC_START) >> 12; i < (((uint32_T)CPU2TOCPU1_RAMGS_IPC_LENGTH + (uint32_T)CPU2TOCPU1_RAMGS_IPC_START) >> 12); i++)\n                {\n                    MemCfgRegVar = MemCfgRegVar | (1UL << (i - RAMGS_START));\n                }\n            #endif\n            MemCfgRegs.GSxMSEL.all = MemCfgRegs.GSxMSEL.all | MemCfgRegVar;\n            EDIS;\n            isInitialized = 1U;\n        }\n        #endif\n    }\n    #endif /* CPU1_CPU2_IPC */\n\n    /* Initialize the IPC handles. */\n    #if defined(CPU1_CPU2_IPC) || defined(CPU1_CM_IPC) || defined(CPU2_CM_IPC)\n    if (IpcParams->IPCBetween == IPC_CPU1CPU2 || IpcParams->IPCBetween == IPC_CPU1CM || IpcParams->IPCBetween == IPC_CPU2CM)\n    {\n        ipcHandle.H_PU1.numOfBuffers = IpcParams->NumOfBuffers;\n        ipcHandle.H_PU1.intEnable = IpcParams->IsIntEnabled;\n        ipcHandle.H_PU1.chNum = IpcParams->ChNum;\n\n        ipcHandle.H_PU1.head.ptr = (uint16_T *)sharedAddressPU1toPU2;\n        ipcHandle.H_PU1.tail.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 1*sizeof(uint16_T));\n        ipcHandle.H_PU1.full.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 2*sizeof(uint16_T));\n        ipcHandle.H_PU1.mutex.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 3*sizeof(uint16_T));\n        ipcHandle.H_PU1.overwrite.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 4*sizeof(uint16_T));\n        ipcHandle.H_PU1.lastReadStatus.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 5*sizeof(uint16_T));\n        ipcHandle.H_PU1.bufferLength.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 6*sizeof(uint16_T));\n        ipcHandle.H_PU1.dataTypeInBytes.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 7*sizeof(uint16_T));\n        ipcHandle.H_PU1.bufferStartAdd.ptr = (CLA_PTR *)(sharedAddressPU1toPU2 + 8*sizeof(uint16_T));\n\n        ipcHandle.H_PU2.numOfBuffers = IpcParams->NumOfBuffers;\n        ipcHandle.H_PU2.intEnable = IpcParams->IsIntEnabled;\n        ipcHandle.H_PU2.chNum = IpcParams->ChNum;\n\n        ipcHandle.H_PU2.head.ptr = (uint16_T *)sharedAddressPU2toPU1;\n        ipcHandle.H_PU2.tail.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 1*sizeof(uint16_T));\n        ipcHandle.H_PU2.full.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 2*sizeof(uint16_T));\n        ipcHandle.H_PU2.mutex.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 3*sizeof(uint16_T));\n        ipcHandle.H_PU2.overwrite.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 4*sizeof(uint16_T));\n        ipcHandle.H_PU2.lastReadStatus.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 5*sizeof(uint16_T));\n        ipcHandle.H_PU2.bufferLength.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 6*sizeof(uint16_T));\n        ipcHandle.H_PU2.dataTypeInBytes.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 7*sizeof(uint16_T));\n        ipcHandle.H_PU2.bufferStartAdd.ptr = (CLA_PTR *)(sharedAddressPU2toPU1 + 8*sizeof(uint16_T));\n\n        volatile IPCChannelStruct_T *ipcHandlePU; /* Temporary handle to select only the current processing unit. */\n\n        if (isH_PU1)\n        {\n            ipcHandlePU = &ipcHandle.H_PU1;\n        }\n        else\n        {\n            ipcHandlePU = &ipcHandle.H_PU2;\n        }\n\n        /* Initialize channel only for the current processing unit. */\n        *(ipcHandlePU->head.ptr) = 0;\n        *(ipcHandlePU->tail.ptr) = 0;\n        *(ipcHandlePU->full.ptr) = 0;\n        *(ipcHandlePU->mutex.ptr) = 0;\n        *(ipcHandlePU->overwrite.ptr) = 0;\n        *(ipcHandlePU->lastReadStatus.ptr) = 0;\n        *(ipcHandlePU->bufferLength.ptr) = IpcParams->BufferSize;\n        *(ipcHandlePU->dataTypeInBytes.ptr) = (ADDRESS_GRANULARITY > IpcParams->DataTypeInBytes) ? ADDRESS_GRANULARITY : IpcParams->DataTypeInBytes;\n\n        /* Initialize the buffer double pointer(s). */\n        switch (IpcParams->IPCBetween)\n        {\n            case IPC_CPU1CPU2:\n                #if defined(CPU1_CPU2_IPC)\n                    #if defined(CPU1)\n                    (*(ipcHandlePU->bufferStartAdd.ptr)).ptr = (uint16_T *)bufferAddressPU1toPU2;\n                    #elif defined(CPU2)\n                    (*(ipcHandlePU->bufferStartAdd.ptr)).ptr = (uint16_T *)bufferAddressPU2toPU1;\n                    #endif\n                #endif\n                break;\n            case IPC_CPU1CM:\n            case IPC_CPU2CM:\n                #if defined(CPU1_CM_IPC) || defined(CPU2_CM_IPC)\n                    #if defined(CPU1) || defined(CPU2)\n                    (*(ipcHandlePU->bufferStartAdd.ptr)).ptr = (uint16_T *)bufferAddressPU1toPU2;\n                    (*(ipcHandlePU->bufferStartAdd.ptr + 1)).ptr = (uint16_T *)bufferAddressPU1toPU2_CM;\n                    #elif defined(CM)\n                    (*(ipcHandlePU->bufferStartAdd.ptr)).ptr = (uint16_T *)bufferAddressPU2toPU1_CM;\n                    (*(ipcHandlePU->bufferStartAdd.ptr + 1)).ptr = (uint16_T *)bufferAddressPU2toPU1;\n                    #endif\n                #endif\n                break;\n        }\n\n        /* Update the offset for the buffer memory section.\n        * The offset required for each IPC channel buffer is the product of the buffer size, number of buffers and the data type.\n        * The smallest memory unit that can be used is set by ADDRESS_GRANULARITY, and hence this is compared with the data type.\n        * Separate offset variables required for CPU1_CM_IPC and CPU2_CM_IPC as CM has to keep track of both.\n        * For the C28x view, data is stored in words (2 bytes) and hence the data type in bytes is converted to words.\n        * For the CM view, data is stored in bytes and hence no conversion is necessary for the data type in bytes.\n        * \n        * For example consider an IPC channel that sends uint16_T var[10] with 2 buffers,\n        *      For C28x/CLA views: BufferSize = 10; NumOfBuffers = 2; DataTypeInBytes = 2; OffsetInWords = 10 * 2 * 2 / 2 = 20 words.\n        *      For CM view: BufferSize = 10; NumOfBuffers = 2; DataTypeInBytes = 2; OffsetInBytes = 10 * 2 * 2 = 40 bytes.\n        */\n        switch (IpcParams->IPCBetween)\n        {\n            case IPC_CPU1CPU2:\n                #if defined(CPU1_CPU2_IPC)\n                    #if defined(CPU1) || defined(CPU2)\n                    buffCPUOffsetInWords = buffCPUOffsetInWords + (IpcParams->BufferSize * IpcParams->NumOfBuffers * ((ADDRESS_GRANULARITY > IpcParams->DataTypeInBytes) ? ADDRESS_GRANULARITY : IpcParams->DataTypeInBytes) / 2);\n                    #endif\n                #endif\n                break;\n            case IPC_CPU1CM:\n                #if defined(CPU1_CM_IPC)\n                    #if defined(CPU1)\n                    buffCPU1CMOffsetInWords = buffCPU1CMOffsetInWords + (IpcParams->BufferSize * IpcParams->NumOfBuffers * ((ADDRESS_GRANULARITY > IpcParams->DataTypeInBytes) ? ADDRESS_GRANULARITY : IpcParams->DataTypeInBytes) / 2);\n                    #elif defined(CM)\n                    buffCPU1CMOffsetInBytes = buffCPU1CMOffsetInBytes + (IpcParams->BufferSize * IpcParams->NumOfBuffers * ((ADDRESS_GRANULARITY > IpcParams->DataTypeInBytes) ? ADDRESS_GRANULARITY : IpcParams->DataTypeInBytes));\n                    #endif\n                #endif\n                break;\n            case IPC_CPU2CM:\n                #if defined(CPU2_CM_IPC)\n                    #if defined(CPU2)\n                    buffCPU2CMOffsetInWords = buffCPU2CMOffsetInWords + (IpcParams->BufferSize * IpcParams->NumOfBuffers * ((ADDRESS_GRANULARITY > IpcParams->DataTypeInBytes) ? ADDRESS_GRANULARITY : IpcParams->DataTypeInBytes) / 2);\n                    #elif defined(CM)\n                    buffCPU2CMOffsetInBytes = buffCPU2CMOffsetInBytes + (IpcParams->BufferSize * IpcParams->NumOfBuffers * ((ADDRESS_GRANULARITY > IpcParams->DataTypeInBytes) ? ADDRESS_GRANULARITY : IpcParams->DataTypeInBytes));\n                    #endif\n                #endif\n                break;\n        }\n\n        /* Enable interrupts for the required IPC channel. */\n        if (ipcHandlePU->intEnable)\n        {\n            if (IpcParams->IPCBetween == IPC_CPU1CPU2)\n            {\n                #if defined(CPU1_CPU2_IPC)\n                    #if defined(CPU1)\n                    switch (ipcHandlePU->chNum)\n                    {\n                        case 0:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCACK.bit.IPC0 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC0 = 1U;\n                            #endif\n                            break;\n                        case 1:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCACK.bit.IPC1 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC1 = 1U;\n                            #endif\n                            break;\n                        case 2:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCACK.bit.IPC2 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC2 = 1U;\n                            #endif\n                            break;\n                        case 3:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCACK.bit.IPC3 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC3 = 1U;\n                            #endif\n                            break;\n                    }\n                    #elif defined(CPU2)\n                    switch (ipcHandlePU->chNum)\n                    {\n                        case 0:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCACK.bit.IPC0 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC0 = 1U;\n                            #endif\n                            break;\n                        case 1:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCACK.bit.IPC1 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC1 = 1U;\n                            #endif\n                            break;\n                        case 2:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCACK.bit.IPC2 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC2 = 1U;\n                            #endif\n                            break;\n                        case 3:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCACK.bit.IPC3 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC3 = 1U;\n                            #endif\n                            break;\n                    }\n                    #endif\n                #endif /* CPU1_CPU2_IPC */\n            }\n            else if (IpcParams->IPCBetween == IPC_CPU1CM)\n            {\n                #if defined(CPU1_CM_IPC)\n                    #if defined(CPU1)\n                    switch (ipcHandlePU->chNum)\n                    {\n                        case 0:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC0 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC0 = 1U;\n                            #endif\n                            break;\n                        case 1:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC1 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC1 = 1U;\n                            #endif\n                            break;\n                        case 2:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC2 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC2 = 1U;\n                            #endif\n                            break;\n                        case 3:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC3 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC3 = 1U;\n                            #endif\n                            break;\n                        case 4:\n                            #if defined(MW_F2838X)\n                            Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC4 = 1U;\n                            #endif\n                            break;\n                        case 5:\n                            #if defined(MW_F2838X)\n                            Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC5 = 1U;\n                            #endif\n                            break;\n                        case 6:\n                            #if defined(MW_F2838X)\n                            Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC6 = 1U;\n                            #endif\n                            break;\n                        case 7:\n                            #if defined(MW_F2838X)\n                            Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC7 = 1U;\n                            #endif\n                            break;\n                    }\n                    #elif defined(CM)\n                    IPC_CMTOCPU1_FlagReg->IPC_ACK |= ipcflag1;\n                    #endif\n                #endif /* CPU1_CM_IPC */\n            }\n            else if (IpcParams->IPCBetween == IPC_CPU2CM)\n            {\n                #if defined(CPU2_CM_IPC)\n                    #if defined(CPU2)\n                    switch (ipcHandle.H_PU1.chNum)\n                    {\n                        case 0:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC0 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC0 = 1U;\n                            #endif\n                            break;\n                        case 1:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC1 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC1 = 1U;\n                            #endif\n                            break;\n                        case 2:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC2 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC2 = 1U;\n                            #endif\n                            break;\n                        case 3:\n                            #if defined(MW_F2838X) || defined(MW_F28P65X)\n                            Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC3 = 1U;\n                            #else\n                            IpcRegs.IPCACK.bit.IPC3 = 1U;\n                            #endif\n                            break;\n                        case 4:\n                            #if defined(MW_F2838X)\n                            Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC4 = 1U;\n                            #endif\n                            break;\n                        case 5:\n                            #if defined(MW_F2838X)\n                            Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC5 = 1U;\n                            #endif\n                            break;\n                        case 6:\n                            #if defined(MW_F2838X)\n                            Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC6 = 1U;\n                            #endif\n                            break;\n                        case 7:\n                            #if defined(MW_F2838X)\n                            Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC7 = 1U;\n                            #endif\n                            break;\n                    }\n                    #elif defined(CM)\n                    IPC_CMTOCPU2_FlagReg->IPC_ACK |= ipcflag1;\n                    #endif\n                #endif /* CPU2_CM_IPC */\n            }\n        }\n\n        ipcHandle.H_IPCBetween = IpcParams->IPCBetween;\n\n        return (MW_IPC_Handle) ipcHandle;\n    }\n    #endif /* CPU1_CPU2_IPC || CPU1_CM_IPC || CPU2_CM_IPC */\n\n    /* TO DO: This section will be merged with the previous logic. Keeping this section for now as CLA IPC initialization is done twice by CPU, and hence a global handle is required to keep track of which channels are done. */\n    #if defined(CPU1_CLA_IPC) || defined(CPU2_CLA_IPC)\n    if (IpcParams->IPCBetween == IPC_CPU1CLA || IpcParams->IPCBetween == IPC_CPU2CLA)\n    {\n        volatile uint32_T blkC1CLA1ChIndex = MW_bSearch_IPC_Channels(ipcChannelCPUCLAList, MW_NUM_IPC_CHANNELS_CPUCLA, IpcParams->ChNum);\n\n        if (ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.head.ptr == (uint16_T *)sharedAddressPU1toPU2)\n        {\n            return (MW_IPC_Handle) ipcHandleForCPUCLA[blkC1CLA1ChIndex];\n        }\n\n        /* CPU to CLA channel init. */\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.numOfBuffers = IpcParams->NumOfBuffers;\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.intEnable = IpcParams->IsIntEnabled;\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.chNum = IpcParams->ChNum;\n\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.head.ptr = (uint16_T *)sharedAddressPU1toPU2;\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.tail.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 1*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.full.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 2*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.mutex.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 3*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.overwrite.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 4*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.lastReadStatus.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 5*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.bufferLength.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 6*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.dataTypeInBytes.ptr = (uint16_T *)(sharedAddressPU1toPU2 + 7*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.bufferStartAdd.ptr = (CLA_PTR *)(sharedAddressPU1toPU2 + 8*sizeof(uint16_T));\n\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.head.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.tail.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.full.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.mutex.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.overwrite.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.lastReadStatus.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.bufferLength.ptr) = IpcParams->BufferSize;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.dataTypeInBytes.ptr) = (ADDRESS_GRANULARITY > IpcParams->DataTypeInBytes) ? ADDRESS_GRANULARITY : IpcParams->DataTypeInBytes;\n        (*(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU1.bufferStartAdd.ptr)).ptr = (uint16_T *)bufferAddressPU1toPU2;\n\n        /* CLA to CPU channel init. */\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.numOfBuffers = IpcParams->NumOfBuffers;\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.intEnable = IpcParams->IsIntEnabled;\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.chNum = IpcParams->ChNum;\n\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.head.ptr = (uint16_T *)sharedAddressPU2toPU1;\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.tail.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 1*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.full.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 2*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.mutex.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 3*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.overwrite.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 4*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.lastReadStatus.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 5*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.bufferLength.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 6*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.dataTypeInBytes.ptr = (uint16_T *)(sharedAddressPU2toPU1 + 7*sizeof(uint16_T));\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.bufferStartAdd.ptr = (CLA_PTR *)(sharedAddressPU2toPU1 + 8*sizeof(uint16_T));\n\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.head.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.tail.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.full.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.mutex.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.overwrite.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.lastReadStatus.ptr) = 0U;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.bufferLength.ptr) = IpcParams->BufferSize;\n        *(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.dataTypeInBytes.ptr) = (ADDRESS_GRANULARITY > IpcParams->DataTypeInBytes) ? ADDRESS_GRANULARITY : IpcParams->DataTypeInBytes;\n        (*(ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_PU2.bufferStartAdd.ptr)).ptr = (uint16_T *)bufferAddressPU2toPU1;\n\n        buffCPUCLAOffsetInWords = buffCPUCLAOffsetInWords + (IpcParams->BufferSize * IpcParams->NumOfBuffers * ((ADDRESS_GRANULARITY > IpcParams->DataTypeInBytes) ? ADDRESS_GRANULARITY : IpcParams->DataTypeInBytes) / 2);\n\n        ipcHandleForCPUCLA[blkC1CLA1ChIndex].H_IPCBetween = IpcParams->IPCBetween;\n\n        return (MW_IPC_Handle) ipcHandleForCPUCLA[blkC1CLA1ChIndex];\n    }\n    #endif /* CPU1_CLA_IPC || CPU2_CLA_IPC */\n\n    return (MW_IPC_Handle) ipcHandle; /* Should be unreachable. Adding to suppress warning. */\n}\n\nvoid MW_IPC_Write(MW_IPC_Handle* ipcHandle, uint16_T CurrentPU, MW_Const_Void_Ptr_T dataToSend, MW_IPC_Diag_T *diagDataOut)\n{\n    #if defined(CPU1_CPU2_IPC) || defined(CPU1_CM_IPC) || defined(CPU2_CM_IPC) || defined(CPU1_CLA_IPC) || defined(CPU2_CLA_IPC)\n    volatile IPCChannelStruct_T *procUnit1; /* Writing core's info. */\n    volatile IPCChannelStruct_T *procUnit2; /* Reading core's info. */\n\n    if ((ipcHandle->H_IPCBetween == IPC_CPU1CPU2 && CurrentPU == IPC_c28xCPU1) ||\n        (ipcHandle->H_IPCBetween == IPC_CPU1CM && CurrentPU == IPC_c28xCPU1) ||\n        (ipcHandle->H_IPCBetween == IPC_CPU2CM && CurrentPU == IPC_c28xCPU2) ||\n        (ipcHandle->H_IPCBetween == IPC_CPU1CLA) ||\n        (ipcHandle->H_IPCBetween == IPC_CPU2CLA))\n    {\n        procUnit1 = &ipcHandle->H_PU1;\n        procUnit2 = &ipcHandle->H_PU2;\n    }\n    else\n    {\n        procUnit1 = &ipcHandle->H_PU2;\n        procUnit2 = &ipcHandle->H_PU1;\n    }\n\n    uint16_T head = *procUnit1->head.ptr;\n    uint16_T tail;\n    uint16_T dataInBytes;\n    uint16_T dataInWords; /* 16-bits int size is 1 word. */\n\n    dataInBytes = *procUnit1->bufferLength.ptr * (*procUnit1->dataTypeInBytes.ptr);\n    dataInWords = dataInBytes / 2;\n\n    while (*procUnit2->mutex.ptr)\n    {\n        continue;\n    }; /* Wait while reading CPU is updating its flags. */\n    *procUnit1->mutex.ptr = 1U; /* Lock the mutex. */\n\n    if ((head | 0xF0U) != (*procUnit2->tail.ptr & 0xFFU)) /* Tail of reading CPU is compared with head of writing CPU. */\n    {\n        *procUnit1->head.ptr = head | 0xF0U; /* Set writing in progress. */\n        /* If buffer is full and the reading CPU has not yet read the data - overwrite the contents at this buffer location.\n        * The full flag is updated at the end of this funciton. So at this point, we are looking at the full flag from the previous run.\n        * In case the reader has read data, the full flag is no longer indicating the correct status. To take care of such a condition, the lastReadStatus is used.\n        * The reader lastReadStatus is updated when ever the reader reads data and the writer full flag is set.\n        */\n        if (*procUnit1->full.ptr && *procUnit1->lastReadStatus.ptr == *procUnit2->lastReadStatus.ptr)\n        {\n            /* Update tail value in writer CPU. This is the correct position to read from next. The reading CPU will update its tail to match with this. */\n            tail = ((head + 1) >= procUnit1->numOfBuffers) ? 0 : (head + 1);\n            *procUnit1->tail.ptr = tail;\n            /* Increment overwrite.\n            * Writer overwrite flag is updated by counting up. The counter value is used by the reader CPU to decide whether the flag is outdated or not.\n            */\n            *procUnit1->overwrite.ptr = *procUnit2->overwrite.ptr + 1;\n            /* For diagnostics - update number of overwrites. */\n            diagDataOut->OverwriteDiag = diagDataOut->OverwriteDiag + 1;\n        }\n        else\n        {\n            *procUnit1->lastReadStatus.ptr = *procUnit2->lastReadStatus.ptr;\n            *procUnit1->tail.ptr = *procUnit2->tail.ptr;\n            *procUnit1->overwrite.ptr = 0;\n            tail = *procUnit2->tail.ptr;\n        }\n        *procUnit1->mutex.ptr = 0U; /* Unlock the mutex. */\n\n        #if defined(CM)\n        /* For the CM view, data is stored in bytes and hence the size to be copied is dataInBytes.\n        * CM writes to its own buffer, and hence the address at bufferStartAdd of the writer is used.\n        */\n        memcpy((*(procUnit1->bufferStartAdd.ptr)).ptr + (head * dataInWords), dataToSend, dataInBytes);\n        #else\n        /* For the C28x view, data is stored in words and hence the size to be copied is dataInWords.\n        * C28x writes to its own buffer, and hence the address at bufferStartAdd of the writer is used.\n        */\n        memcpy_fast((*(procUnit1->bufferStartAdd.ptr)).ptr + (head * dataInWords), dataToSend, dataInWords);\n        #endif\n\n        *procUnit1->head.ptr = ((head + 1) >= procUnit1->numOfBuffers) ? 0 : (head + 1);\n        *procUnit1->full.ptr = (*procUnit1->head.ptr == tail);\n    }\n    else /* If reading is in progress advance head. Head jumps the tail always. */\n    {\n        *procUnit1->head.ptr = (((head + 1) >= procUnit1->numOfBuffers) ? 0 : (head + 1)) | 0xF0U;\n        *procUnit1->mutex.ptr = 0U;\n\n        #if defined(CM)\n        /* For the CM view, data is stored in bytes and hence the size to be copied is dataInBytes.\n        * CM writes to its own buffer, and hence the address at bufferStartAdd of the writer is used.\n        */\n        memcpy((*(procUnit1->bufferStartAdd.ptr)).ptr + (((head + 1) >= procUnit1->numOfBuffers) ? 0 : (head + 1)) * dataInWords, dataToSend, dataInBytes);\n        #else\n        /* For the C28x view, data is stored in words and hence the size to be copied is dataInWords.\n        * C28x writes to its own buffer, and hence the address at bufferStartAdd of the writer is used.\n        */\n        memcpy_fast((*(procUnit1->bufferStartAdd.ptr)).ptr + (((head + 1) >= procUnit1->numOfBuffers) ? 0 : (head + 1)) * dataInWords, dataToSend, dataInWords);\n        #endif\n\n        *procUnit1->head.ptr = ((head + 2) >= procUnit1->numOfBuffers) ? 0 : (head + 2);\n        *procUnit1->full.ptr = (*procUnit1->head.ptr == tail);\n    }\n\n    /* Interrupts */\n    /* No need to handle interrupts if communicating with CLA. */\n    if (procUnit1->intEnable &&\n        !((ipcHandle->H_IPCBetween == IPC_CPU1CLA) || (ipcHandle->H_IPCBetween == IPC_CPU2CLA)))\n    {\n        #if defined(CPU1)\n        switch (procUnit1->chNum)\n        {\n            case 0:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCSET.bit.IPC0 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                    {\n                        Cpu1toCmIpcRegs.CPU1TOCMIPCSET.bit.IPC0 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCSET.bit.IPC0 = 1U;\n                #endif\n                break;\n            case 1:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCSET.bit.IPC1 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                    {\n                        Cpu1toCmIpcRegs.CPU1TOCMIPCSET.bit.IPC1 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCSET.bit.IPC1 = 1U;\n                #endif\n                break;\n            case 2:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCSET.bit.IPC2 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                    {\n                        Cpu1toCmIpcRegs.CPU1TOCMIPCSET.bit.IPC2 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCSET.bit.IPC2 = 1U;\n                #endif\n                break;\n            case 3:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCSET.bit.IPC3 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                    {\n                        Cpu1toCmIpcRegs.CPU1TOCMIPCSET.bit.IPC3 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCSET.bit.IPC3 = 1U;\n                #endif\n                break;\n            case 4:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                {\n                    Cpu1toCmIpcRegs.CPU1TOCMIPCSET.bit.IPC4 = 1U;\n                }\n                #endif\n                break;\n            case 5:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                {\n                    Cpu1toCmIpcRegs.CPU1TOCMIPCSET.bit.IPC5 = 1U;\n                }\n                #endif\n                break;\n            case 6:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                {\n                    Cpu1toCmIpcRegs.CPU1TOCMIPCSET.bit.IPC6 = 1U;\n                }\n                #endif\n                break;\n            case 7:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                {\n                    Cpu1toCmIpcRegs.CPU1TOCMIPCSET.bit.IPC7 = 1U;\n                }\n                #endif\n                break;\n        }\n        #elif defined(CPU2)\n        switch (procUnit1->chNum)\n        {\n            case 0:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCSET.bit.IPC0 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                    {\n                        Cpu2toCmIpcRegs.CPU2TOCMIPCSET.bit.IPC0 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCSET.bit.IPC0 = 1U;\n                #endif\n                break;\n            case 1:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCSET.bit.IPC1 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                    {\n                        Cpu2toCmIpcRegs.CPU2TOCMIPCSET.bit.IPC1 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCSET.bit.IPC1 = 1U;\n                #endif\n                break;\n            case 2:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCSET.bit.IPC2 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                    {\n                        Cpu2toCmIpcRegs.CPU2TOCMIPCSET.bit.IPC2 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCSET.bit.IPC2 = 1U;\n                #endif\n                break;\n            case 3:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCSET.bit.IPC3 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                    {\n                        Cpu2toCmIpcRegs.CPU2TOCMIPCSET.bit.IPC3 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCSET.bit.IPC3 = 1U;\n                #endif\n                break;\n            case 4:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                {\n                    Cpu2toCmIpcRegs.CPU2TOCMIPCSET.bit.IPC4 = 1U;\n                }\n                #endif\n                break;\n            case 5:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                {\n                    Cpu2toCmIpcRegs.CPU2TOCMIPCSET.bit.IPC5 = 1U;\n                }\n                #endif\n                break;\n            case 6:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                {\n                    Cpu2toCmIpcRegs.CPU2TOCMIPCSET.bit.IPC6 = 1U;\n                }\n                #endif\n                break;\n            case 7:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                {\n                    Cpu2toCmIpcRegs.CPU2TOCMIPCSET.bit.IPC7 = 1U;\n                }\n                #endif\n                break;\n        }\n        #elif defined(CM)\n        uint32_T ipcflag = 0x00000001, ipcflag1;\n        ipcflag1 = ipcflag << procUnit1->chNum;\n        if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n        {\n            IPC_CMTOCPU1_FlagReg->IPC_SET |= ipcflag1;\n        }\n        else if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n        {\n            IPC_CMTOCPU2_FlagReg->IPC_SET |= ipcflag1;\n        }\n        #endif\n    }\n\n    /* For diagnostics - calculate number of buffers used. */\n    if (*procUnit1->full.ptr == 1U)\n    {\n        diagDataOut->NumBuffUsedDiag = procUnit1->numOfBuffers;\n    }\n    else\n    {\n        if (head >= tail)\n        {\n            diagDataOut->NumBuffUsedDiag = (head - tail) + 1;\n        }\n        else\n        {\n            diagDataOut->NumBuffUsedDiag = ((head + procUnit1->numOfBuffers) - tail);\n        }\n    }\n    #endif\n}\n\nvoid MW_IPC_Read(MW_IPC_Handle* ipcHandle, uint16_T CurrentPU, MW_Void_Ptr_T dataTobeRead, int8_T* status)\n{\n    /*  Do all status should be update in both CPU1 & CPU2 & CLA.\n    * 0 - No errors.\n    * 1 - Data not available.\n    * 2 - Data type mismatch => uint16_T dataInBytes = *procUnit1->bufferLength.ptr * (*procUnit1->dataTypeInBytes.ptr).\n    * 4 - Data length mismatch => *procUnit2->bufferLength.ptr should be checked against *procUnit1->bufferLength.ptr.\n    * 6 - Data type and data length mismatch.\n    */\n\n    #if defined(CPU1_CPU2_IPC) || defined(CPU1_CM_IPC) || defined(CPU2_CM_IPC) || defined(CPU1_CLA_IPC) || defined(CPU2_CLA_IPC)\n    *status = 0;\n\n    volatile IPCChannelStruct_T *procUnit1; /* Reading core's info. */\n    volatile IPCChannelStruct_T *procUnit2; /* Writing core's info. */\n\n    if ((ipcHandle->H_IPCBetween == IPC_CPU1CPU2 && CurrentPU == IPC_c28xCPU1) ||\n        (ipcHandle->H_IPCBetween == IPC_CPU1CM && CurrentPU == IPC_c28xCPU1) ||\n        (ipcHandle->H_IPCBetween == IPC_CPU2CM && CurrentPU == IPC_c28xCPU2) ||\n        (ipcHandle->H_IPCBetween == IPC_CPU1CLA) ||\n        (ipcHandle->H_IPCBetween == IPC_CPU2CLA))\n    {\n        procUnit1 = &ipcHandle->H_PU1;\n        procUnit2 = &ipcHandle->H_PU2;\n    }\n    else\n    {\n        procUnit1 = &ipcHandle->H_PU2;\n        procUnit2 = &ipcHandle->H_PU1;\n    }\n\n    uint16_T tail;\n    uint16_T dataInBytes;\n    uint16_T dataInWords; /* 16-bits int size is 1 word. */\n\n    dataInBytes = *procUnit1->bufferLength.ptr * (*procUnit1->dataTypeInBytes.ptr);\n    dataInWords = dataInBytes / 2;\n\n    if ( ((*procUnit1->dataTypeInBytes.ptr) != (*procUnit2->dataTypeInBytes.ptr)) && (*procUnit2->bufferLength.ptr != *procUnit1->bufferLength.ptr))\n    {\n        *status = 6;\n    }\n    else if ((*procUnit1->dataTypeInBytes.ptr) != (*procUnit2->dataTypeInBytes.ptr))\n    {\n        *status = 2;\n    }\n    else if (*procUnit1->bufferLength.ptr != *procUnit2->bufferLength.ptr)\n    {\n        *status = 4;\n    }\n\n    while (*procUnit2->mutex.ptr)\n    {\n        continue;\n    }; /* Wait while writing CPU is updating its flags. */\n    *procUnit1->mutex.ptr = 1U; /* Lock the mutex. */\n\n    if ((*procUnit1->tail.ptr | 0xF0) != (*procUnit2->head.ptr & 0xFF))\n    {\n        if (*procUnit2->full.ptr)\n        {\n            *procUnit1->lastReadStatus.ptr = *procUnit1->lastReadStatus.ptr + 1;\n        }\n        /* Buffer is condidered to be empty if (writer head == reader tail) and (writer indicates that buffer is not full) => buffer is empty.\n        * This is negation of that condition i.e. there is data in the buffer.\n        */\n        if (!((*procUnit1->tail.ptr == *procUnit2->head.ptr) && (*procUnit2->full.ptr == 0)))\n        {\n            /* If writer CPU indicates an overwrite, update tail to read the earliest data in the buffer. */\n            if (*procUnit2->overwrite.ptr)\n            {\n                /* Writer overwrite flag may not have been updated. So reader also maintains an overwrite flag (*procUnit1->overwrite.ptr) that checks against this condition.\n                * Tail is not updated in case the writer overwrite flag is outdated.\n                * More on the logic:\n                *      *procUnit1->overwrite.ptr is 0 when the reader CPU is reading for the first time after overwrite flag is set in the writer CPU.\n                *      The second time this condition is encountered -\n                *          1) BEFORE the writer CPU runs again, *procUnit1->overwrite.ptr == *procUnit2->overwrite.ptr. Flag is outdated.\n                *          2) AFTER the writer CPU runs and sets its overwrite flag again, *procUnit1->overwrite.ptr != *procUnit2->overwrite.ptr. Flag NOT outdated.\n                */\n                if ((*procUnit1->overwrite.ptr == 0U) || ((*procUnit1->overwrite.ptr != 0U) && (*procUnit1->overwrite.ptr != *procUnit2->overwrite.ptr)))\n                {\n                    *procUnit1->tail.ptr = *procUnit2->tail.ptr;\n                }\n                *procUnit1->overwrite.ptr = *procUnit2->overwrite.ptr;\n            }\n            else\n            {\n                *procUnit1->overwrite.ptr = 0U;\n            }\n            tail = *procUnit1->tail.ptr;\n            *procUnit1->tail.ptr = *procUnit1->tail.ptr | 0xF0;\n            *procUnit1->mutex.ptr = 0U;\n\n            #if defined(CM)\n            /* For the CM view, data is stored in bytes and hence the size to be copied is dataInBytes.\n            * CM reads from the writer's buffer, and hence the address at bufferStartAdd + 1 of the writer is used.\n            */\n            memcpy(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr + 1)).ptr + (tail * dataInWords), dataInBytes);\n            #else\n            /* For the C28x view, data is stored in words and hence the size to be copied is dataInWords. */\n            if (ipcHandle->H_IPCBetween == IPC_CPU1CM || ipcHandle->H_IPCBetween == IPC_CPU2CM)\n            {\n                /* C28x reads from the writer's buffer, and hence the address at bufferStartAdd + 1 of the writer is used, for CPU1_CM_IPC and CPU2_CM_IPC. */\n                memcpy_fast(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr + 1)).ptr + (tail * dataInWords), dataInWords);\n            }\n            else\n            {\n                /* C28x reads from the writer's buffer, and hence the address at bufferStartAdd of the writer is used. */\n                memcpy_fast(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr)).ptr + (tail * dataInWords), dataInWords);\n            }\n            #endif\n\n            *procUnit1->tail.ptr = ((tail + 1) >= procUnit1->numOfBuffers) ? 0 : (tail + 1);\n        }\n        else /* No data or buff empty. Then output the last read index (read old data again). */\n        {\n            *status = 1;\n            /* Remove data from last read index (old data). */\n            if (*procUnit1->tail.ptr) /* if tail is positive value*/\n            {\n                *procUnit1->tail.ptr = *procUnit1->tail.ptr - 1;\n            }\n            else /* If tail is zero, return to end of buffer index to read. */\n            {\n                *procUnit1->tail.ptr = procUnit2->numOfBuffers - 1;\n            }\n            tail = *procUnit1->tail.ptr;\n            *procUnit1->tail.ptr = *procUnit1->tail.ptr | 0xF0;\n            *procUnit1->mutex.ptr = 0;\n\n            #if defined(CM)\n            /* For the CM view, data is stored in bytes and hence the size to be copied is dataInBytes.\n            * CM reads from the writer's buffer, and hence the address at bufferStartAdd + 1 of the writer is used.\n            */\n            memcpy(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr + 1)).ptr + (tail * dataInWords), dataInBytes);\n            #else\n            /* For the C28x view, data is stored in words and hence the size to be copied is dataInWords. */\n            if (ipcHandle->H_IPCBetween == IPC_CPU1CM || ipcHandle->H_IPCBetween == IPC_CPU2CM)\n            {\n                /* C28x reads from the writer's buffer, and hence the address at bufferStartAdd + 1 of the writer is used, for CPU1_CM_IPC and CPU2_CM_IPC. */\n                memcpy_fast(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr + 1)).ptr + (tail * dataInWords), dataInWords);\n            }\n            else\n            {\n                /* C28x reads from the writer's buffer, and hence the address at bufferStartAdd of the writer is used. */\n                memcpy_fast(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr)).ptr + (tail * dataInWords), dataInWords);\n            }\n            #endif\n\n            *procUnit1->tail.ptr = ((tail + 1) >= procUnit1->numOfBuffers) ? 0 : (tail + 1);\n        }\n    }\n    else /* If writing in progress, jump to next location and check if buffer is empty. */\n    {\n        /* If buffer is full, then read old data. */\n        if (*procUnit2->full.ptr && (*procUnit2->head.ptr == *procUnit1->tail.ptr))\n        {\n            tail = *procUnit1->tail.ptr;\n            *procUnit1->tail.ptr = (((tail + 1) >= procUnit1->numOfBuffers) ? 0 : (tail + 1)) | 0xF0;\n            *procUnit1->mutex.ptr = 0;\n\n            #if defined(CM)\n            /* For the CM view, data is stored in bytes and hence the size to be copied is dataInBytes.\n            * CM reads from the writer's buffer, and hence the address at bufferStartAdd + 1 is used.\n            */\n            memcpy(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr + 1)).ptr + ((((tail + 1) >= procUnit2->numOfBuffers) ? 0 : (tail + 1)) * dataInWords), dataInBytes);\n            #else\n            /* For the C28x view, data is stored in words and hence the size to be copied is dataInWords. */\n            if (ipcHandle->H_IPCBetween == IPC_CPU1CM || ipcHandle->H_IPCBetween == IPC_CPU2CM)\n            {\n                /* C28x reads from the writer's buffer, and hence the address at bufferStartAdd + 1 of the writer is used, for CPU1_CM_IPC and CPU2_CM_IPC. */\n                memcpy_fast(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr + 1)).ptr + ((((tail + 1) >= procUnit2->numOfBuffers) ? 0 : (tail + 1)) * dataInWords), dataInWords);\n            }\n            else\n            {\n                /* C28x reads from the writer's buffer, and hence the address at bufferStartAdd of the writer is used. */\n                memcpy_fast(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr)).ptr + ((((tail + 1) >= procUnit2->numOfBuffers) ? 0 : (tail + 1)) * dataInWords), dataInWords);\n            }\n            #endif\n\n            *procUnit1->tail.ptr = ((tail + 2) >= procUnit1->numOfBuffers) ? 0 : (tail + 2);\n        }\n        else /* No data or buff empty. Then output the last read index. */\n        {\n            *status = 1;\n            /* Remove data from last read index (old data). */\n            if (*procUnit1->tail.ptr)\n            {\n                *procUnit1->tail.ptr = *procUnit1->tail.ptr - 1;\n            }\n            else\n            {\n                *procUnit1->tail.ptr = procUnit2->numOfBuffers - 1;\n            }\n            tail = *procUnit1->tail.ptr;\n            *procUnit1->tail.ptr = *procUnit1->tail.ptr | 0xF0;\n            *procUnit1->mutex.ptr = 0;\n\n            #if defined(CM)\n            /* For the CM view, data is stored in bytes and hence the size to be copied is dataInBytes.\n            * CM reads from the writer's buffer, and hence the address at bufferStartAdd + 1 is used.\n            */\n            memcpy(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr + 1)).ptr + (tail * dataInWords), dataInBytes);\n            #else\n            /* For the C28x view, data is stored in words and hence the size to be copied is dataInWords. */\n            if (ipcHandle->H_IPCBetween == IPC_CPU1CM || ipcHandle->H_IPCBetween == IPC_CPU2CM)\n            {\n                /* C28x reads from the writer's buffer, and hence the address at bufferStartAdd + 1 of the writer is used, for CPU1_CM_IPC and CPU2_CM_IPC. */\n                memcpy_fast(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr + 1)).ptr + (tail * dataInWords), dataInWords);\n            }\n            else\n            {\n                /* C28x reads from the writer's buffer, and hence the address at bufferStartAdd of the writer is used. */\n                memcpy_fast(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr)).ptr + (tail * dataInWords), dataInWords);\n            }\n            #endif\n\n            *procUnit1->tail.ptr = ((tail + 1) >= procUnit1->numOfBuffers) ? 0 : (tail + 1);\n        }\n    }\n\n    /* Interrupts */\n    /* No need to handle interrupts if communicating with CLA. */\n    if (procUnit1->intEnable &&\n        !((ipcHandle->H_IPCBetween == IPC_CPU1CLA) || (ipcHandle->H_IPCBetween == IPC_CPU2CLA)))\n    {\n        #if defined(CPU1)\n        switch (procUnit1->chNum)\n        {\n            case 0:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCACK.bit.IPC0 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                    {\n                        Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC0 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCACK.bit.IPC0 = 1U;\n                #endif\n                break;\n            case 1:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCACK.bit.IPC1 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                    {\n                        Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC1 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCACK.bit.IPC1 = 1U;\n                #endif\n                break;\n            case 2:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCACK.bit.IPC2 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                    {\n                        Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC2 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCACK.bit.IPC2 = 1U;\n                #endif\n                break;\n            case 3:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu1toCpu2IpcRegs.CPU1TOCPU2IPCACK.bit.IPC3 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                    {\n                        Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC3 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCACK.bit.IPC3 = 1U;\n                #endif\n                break;\n            case 4:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                {\n                    Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC4 = 1U;\n                }\n                #endif\n                break;\n            case 5:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                {\n                    Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC5 = 1U;\n                }\n                #endif\n                break;\n            case 6:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                {\n                    Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC6 = 1U;\n                }\n                #endif\n                break;\n            case 7:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n                {\n                    Cpu1toCmIpcRegs.CPU1TOCMIPCACK.bit.IPC7 = 1U;\n                }\n                #endif\n                break;\n        }\n        #elif defined(CPU2)\n        switch (procUnit1->chNum)\n        {\n            case 0:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCACK.bit.IPC0 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                    {\n                        Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC0 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCACK.bit.IPC0 = 1U;\n                #endif\n                break;\n            case 1:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCACK.bit.IPC1 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                    {\n                        Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC1 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCACK.bit.IPC1 = 1U;\n                #endif\n                break;\n            case 2:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCACK.bit.IPC2 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                    {\n                        Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC2 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCACK.bit.IPC2 = 1U;\n                #endif\n                break;\n            case 3:\n                #if defined(MW_F2838X) || defined(MW_F28P65X)\n                    if (ipcHandle->H_IPCBetween == IPC_CPU1CPU2)\n                    {\n                        Cpu2toCpu1IpcRegs.CPU2TOCPU1IPCACK.bit.IPC3 = 1U;\n                    }\n                    #if defined(MW_F2838X)\n                    else if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                    {\n                        Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC3 = 1U;\n                    }\n                    #endif\n                #else\n                    IpcRegs.IPCACK.bit.IPC3 = 1U;\n                #endif\n                break;\n            case 4:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                {\n                    Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC4 = 1U;\n                }\n                #endif\n                break;\n            case 5:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                {\n                    Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC5 = 1U;\n                }\n                #endif\n                break;\n            case 6:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                {\n                    Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC6 = 1U;\n                }\n                #endif\n                break;\n            case 7:\n                #if defined(MW_F2838X)\n                if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n                {\n                    Cpu2toCmIpcRegs.CPU2TOCMIPCACK.bit.IPC7 = 1U;\n                }\n                #endif\n                break;\n        }\n        #elif defined(CM)\n        uint32_T ipcflag = 0x00000001, ipcflag1;\n        ipcflag1 = ipcflag << procUnit1->chNum;\n        if (ipcHandle->H_IPCBetween == IPC_CPU1CM)\n        {\n            IPC_CMTOCPU1_FlagReg->IPC_ACK |= ipcflag1;\n        }\n        else if (ipcHandle->H_IPCBetween == IPC_CPU2CM)\n        {\n            IPC_CMTOCPU2_FlagReg->IPC_ACK |= ipcflag1;\n        }\n        #endif\n    }\n    #endif\n}\n\nvoid MW_IPC_Terminate(MW_IPC_Handle ipcHandle)\n{\n    /* Add later. */\n}\n#endif /* __TMS320C28XX_CLA__ */\n\n#ifdef __TMS320C28XX_CLA__\nvoid MW_IPC_Write_CLA(MW_IPC_Handle* ipcHandle, uint16_T CurrentPU, MW_Const_Void_Ptr_T dataToSend)\n{\n    volatile IPCChannelStruct_T *procUnit1 = &ipcHandle->H_PU2; /* Writing core's info - CLA. */\n    volatile IPCChannelStruct_T *procUnit2 = &ipcHandle->H_PU1; /* Reading core's info - C28x. */\n\n    uint16_T head = *procUnit1->head.ptr;\n    uint16_T tail;\n    uint16_T dataInBytes;\n    uint16_T dataInWords; /* 16-bits int size is 1 word. */\n\n    dataInBytes = *procUnit1->bufferLength.ptr * (*procUnit1->dataTypeInBytes.ptr);\n    dataInWords = dataInBytes / 2;\n\n    while (*procUnit2->mutex.ptr); /* Wait while reading CPU is updating its flags. */\n    *procUnit1->mutex.ptr = 1U; /* Lock the mutex. */\n\n    if ((head | 0xF0U) != (*procUnit2->tail.ptr & 0xFFU)) /* Tail of reading CPU is compared with head of writing CLA. */\n    {\n        *procUnit1->head.ptr = head | 0xF0U; /* Set writing in progress */\n        /* If buffer is full and the reading CPU has not yet read the data - overwrite the contents at this buffer location.\n        * The full flag is updated at the end of this funciton. So at this point, we are looking at the full flag from the previous run.\n        * In case the reader has read data, the full flag is no longer indicating the correct status. To take care of such a condition, the lastReadStatus is used.\n        * The reader lastReadStatus is updated when ever the reader reads data and the writer full flag is set.\n        */\n        if (*procUnit1->full.ptr && *procUnit1->lastReadStatus.ptr == *procUnit2->lastReadStatus.ptr)\n        {\n            /* Update tail value in writer CLA. This is the correct position to read from next. The reading CPU will update its tail to match with this. */\n            tail = ((uint16_T)(head + 1) >= (uint16_T)procUnit1->numOfBuffers) ? 0 : (uint16_T)(head + 1);\n            *procUnit1->tail.ptr = tail;\n            /* Increment overwrite.\n            * Writer overwrite flag is updated by counting up. The counter value is used by the reader CPU to decide whether the flag is outdated or not.\n            */\n            *procUnit1->overwrite.ptr = *procUnit2->overwrite.ptr + 1;\n        }\n        else\n        {\n            *procUnit1->lastReadStatus.ptr = *procUnit2->lastReadStatus.ptr;\n            *procUnit1->tail.ptr = *procUnit2->tail.ptr;\n            *procUnit1->overwrite.ptr = 0;\n            tail = *procUnit2->tail.ptr;\n        }\n        *procUnit1->mutex.ptr = 0; /* Unlock the mutex. */\n\n        /* For the CLA view, data is stored in words and hence the size to be copied is dataInWords.\n        * CLA writes to its own buffer, and hence the address at bufferStartAdd of the writer is used.\n        */\n        memcpy_cla((*(procUnit1->bufferStartAdd.ptr)).ptr + (head * dataInWords), dataToSend, dataInWords);\n\n        *procUnit1->head.ptr = ((uint16_T)(head + 1) >= (uint16_T)procUnit1->numOfBuffers) ? 0 : (head + 1);\n        *procUnit1->full.ptr = (*procUnit1->head.ptr == tail);\n    }\n    else /* If reading is in progress advance head. Head jumps the tail always. */\n    {\n        *procUnit1->head.ptr = ( ((uint16_T)(head + 1) >= (uint16_T)procUnit1->numOfBuffers) ? 0 : (head + 1) ) | 0xF0U;\n        *procUnit1->mutex.ptr = 0;\n\n        /* For the CLA view, data is stored in words and hence the size to be copied is dataInWords.\n        * CLA writes to its own buffer, and hence the address at bufferStartAdd of the writer is used.\n        */\n        memcpy_cla((*(procUnit1->bufferStartAdd.ptr)).ptr + (((uint16_T)(head + 1) >= (uint16_T)procUnit1->numOfBuffers) ? 0 : (head + 1)) * dataInWords, dataToSend, dataInWords);\n\n        *procUnit1->head.ptr = ((uint16_T)(head + 2) >= (uint16_T)procUnit1->numOfBuffers) ? 0 : (head + 2);\n        *procUnit1->full.ptr = (*procUnit1->head.ptr == tail);\n    }\n}\n\nvoid MW_IPC_Read_CLA(MW_IPC_Handle* ipcHandle, uint16_T CurrentPU, MW_Void_Ptr_T dataTobeRead, int8_T* status)\n{\n    *status = 0;\n\n    volatile IPCChannelStruct_T *procUnit1 = &ipcHandle->H_PU2; /* Reading core's info - CLA. */\n    volatile IPCChannelStruct_T *procUnit2 = &ipcHandle->H_PU1; /* Writing core's info - C28x. */\n\n    uint16_T tail;\n    uint16_T dataInBytes;\n    uint16_T dataInWords; /* 16-bits int size is 1 word. */\n\n    dataInBytes = *procUnit1->bufferLength.ptr * (*procUnit1->dataTypeInBytes.ptr);\n    dataInWords = dataInBytes / 2;\n\n    if (((*procUnit1->dataTypeInBytes.ptr) != (*procUnit2->dataTypeInBytes.ptr)) && (*procUnit2->bufferLength.ptr != *procUnit1->bufferLength.ptr))\n    {\n        *status = 6;\n    }\n    else if ((*procUnit1->dataTypeInBytes.ptr) != (*procUnit2->dataTypeInBytes.ptr))\n    {\n        *status = 2;\n    }\n    else if (*procUnit1->bufferLength.ptr != *procUnit2->bufferLength.ptr)\n    {\n        *status = 4;\n    }\n\n    while (*procUnit2->mutex.ptr); /* Wait while writing CPU is updating its flags. */\n    *procUnit1->mutex.ptr = 1; /* Lock the mutex. */\n\n    if ((*procUnit1->tail.ptr | 0xF0) != (*procUnit2->head.ptr & 0xFF))\n    {\n        if (*procUnit2->full.ptr)\n            *procUnit1->lastReadStatus.ptr = *procUnit1->lastReadStatus.ptr + 1;\n        /* Buffer is condidered to be empty if (writer head == reader tail) and (writer indicates that buffer is not full) => buffer is empty.\n        * This is negation of that condition i.e. there is data in the buffer.\n        */\n        if (!((*procUnit1->tail.ptr == *procUnit2->head.ptr) && (*procUnit2->full.ptr == 0)))\n        {\n            /* If writer CPU indicates an overwrite, update tail to read the earliest data in the buffer. */\n            if (*procUnit2->overwrite.ptr)\n            {\n                /* Writer overwrite flag may not have been updated. So reader also maintains an overwrite flag (*procUnit1->overwrite.ptr) that checks against this condition.\n                * Tail is not updated in case the writer overwrite flag is outdated.\n                * More on the logic:\n                *      *procUnit1->overwrite.ptr is 0 when the reader CLA is reading for the first time after overwrite flag is set in the writer CPU.\n                *      The second time this condition is encountered -\n                *          1) BEFORE the writer CPU runs again, *procUnit1->overwrite.ptr == *procUnit2->overwrite.ptr. Flag is outdated.\n                *          2) AFTER the writer CPU runs and sets its overwrite flag again, *procUnit1->overwrite.ptr != *procUnit2->overwrite.ptr. Flag NOT outdated.\n                */\n                if ((*procUnit1->overwrite.ptr == 0) || ((*procUnit1->overwrite.ptr != 0) && (*procUnit1->overwrite.ptr != *procUnit2->overwrite.ptr)))\n                {\n                    *procUnit1->tail.ptr = *procUnit2->tail.ptr;\n                }\n                *procUnit1->overwrite.ptr = *procUnit2->overwrite.ptr;\n            }\n            else\n            {\n                *procUnit1->overwrite.ptr = 0;\n            }\n            tail = *procUnit1->tail.ptr;\n            *procUnit1->tail.ptr = *procUnit1->tail.ptr | 0xF0;\n            *procUnit1->mutex.ptr = 0;\n\n            /* For the CLA view, data is stored in words and hence the size to be copied is dataInWords.\n            * CLA reads from the writer's buffer, and hence the address at bufferStartAdd of the writer is used.\n            */\n            memcpy_cla(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr)).ptr + (tail * dataInWords), dataInWords);\n\n            *procUnit1->tail.ptr = ((uint16_T)(tail + 1) >= (uint16_T)procUnit1->numOfBuffers) ? 0 : (tail + 1);\n        }\n        else /* No data or buff empty. Then output the last read index (read old data again). */\n        {\n            *status = 1;\n            /* Remove data from last read index (old data). */\n            if (*procUnit1->tail.ptr) /* If tail is positive value. */\n            {\n                *procUnit1->tail.ptr = *procUnit1->tail.ptr - 1;\n            }\n            else /* If tail is zero, return to end of buffer index to read. */\n            {\n                *procUnit1->tail.ptr = procUnit2->numOfBuffers - 1;\n            }\n            tail = *procUnit1->tail.ptr;\n            *procUnit1->tail.ptr = *procUnit1->tail.ptr | 0xF0;\n            *procUnit1->mutex.ptr = 0;\n\n            /* For the CLA view, data is stored in words and hence the size to be copied is dataInWords.\n            * CLA reads from the writer's buffer, and hence the address at bufferStartAdd of the writer is used.\n            */\n            memcpy_cla(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr)).ptr + (tail * dataInWords), dataInWords);\n\n            *procUnit1->tail.ptr = ((uint16_T)(tail + 1) >= (uint16_T)procUnit1->numOfBuffers) ? 0 : (tail + 1);\n        }\n    }\n    else /* If writing in progress, jump to next location and check if buffer is empty. */\n    {\n        /* If buffer is full, then read old data. */\n        if (*procUnit2->full.ptr && (*procUnit2->head.ptr == *procUnit1->tail.ptr))\n        {\n            tail = *procUnit1->tail.ptr;\n            *procUnit1->tail.ptr = (((uint16_T)(tail + 1) >= (uint16_T)procUnit1->numOfBuffers) ? 0 : (tail + 1)) | 0xF0;\n            *procUnit1->mutex.ptr = 0;\n\n            /* For the CLA view, data is stored in words and hence the size to be copied is dataInWords.\n            * CLA reads from the writer's buffer, and hence the address at bufferStartAdd of the writer is used.\n            */\n            memcpy_cla(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr)).ptr + ((((uint16_T)(tail + 1) >= (uint16_T)procUnit2->numOfBuffers) ? 0 : (tail + 1)) * dataInWords), dataInWords);\n\n            *procUnit1->tail.ptr = ((uint16_T)(tail + 2) >= (uint16_T)procUnit1->numOfBuffers) ? 0 : (tail + 2);\n        }\n        else /* No data or buff empty. Then output the last read index.*/\n        {\n            *status = 1;\n            /* Remove data from last read index (old data). */\n            if (*procUnit1->tail.ptr)\n            {\n                *procUnit1->tail.ptr = *procUnit1->tail.ptr - 1;\n            }\n            else\n            {\n                *procUnit1->tail.ptr = procUnit2->numOfBuffers - 1;\n            }\n            tail = *procUnit1->tail.ptr;\n            *procUnit1->tail.ptr = *procUnit1->tail.ptr | 0xF0;\n            *procUnit1->mutex.ptr = 0;\n\n            /* For the CLA view, data is stored in words and hence the size to be copied is dataInWords.\n            * CLA reads from the writer's buffer, and hence the address at bufferStartAdd of the writer is used.\n            */\n            memcpy_cla(dataTobeRead, (*(procUnit2->bufferStartAdd.ptr)).ptr + (tail * dataInWords), dataInWords);\n\n            *procUnit1->tail.ptr = ((uint16_T)(tail + 1) >= (uint16_T)procUnit1->numOfBuffers) ? 0 : (tail + 1);\n        }\n    }\n}\n\nvoid memcpy_cla(MW_Void_Ptr_T dst, MW_Const_Void_Ptr_T src, uint16_T N)\n{\n    const char_T *csrc = (const char_T *)src;\n    char_T *cdst = (char_T *)dst;\n    uint16_T i = 0;\n    for (; i < N; ++i)\n    {\n        cdst[i] = csrc[i];\n    }\n}\n#endif /* __TMS320C28XX_CLA__ */\n\n#endif /* IPC_BLOCK_INCLUDED */\n"},{"name":"sysctl.c","type":"source","group":"legacy","path":"C:\\Users\\awear\\my_projects\\pmsm\\deployment\\qep_offset\\mcb_pmsm_qep_offset_f28379d_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ti\\c2000\\C2000Ware_5_02_00_00\\driverlib\\f2837xd\\driverlib","tag":"","groupDisplay":"Other files","code":"//###########################################################################\n//\n// FILE:   sysctl.c\n//\n// TITLE:  C28x system control driver.\n//\n//###########################################################################\n// $Copyright:\n// Copyright (C) 2022 Texas Instruments Incorporated - http://www.ti.com\n//\n// Redistribution and use in source and binary forms, with or without \n// modification, are permitted provided that the following conditions \n// are met:\n// \n//   Redistributions of source code must retain the above copyright \n//   notice, this list of conditions and the following disclaimer.\n// \n//   Redistributions in binary form must reproduce the above copyright\n//   notice, this list of conditions and the following disclaimer in the \n//   documentation and/or other materials provided with the   \n//   distribution.\n// \n//   Neither the name of Texas Instruments Incorporated nor the names of\n//   its contributors may be used to endorse or promote products derived\n//   from this software without specific prior written permission.\n// \n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT \n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT \n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, \n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT \n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT \n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE \n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// $\n//###########################################################################\n\n#include \"cputimer.h\"\n#include \"sysctl.h\"\n\n//\n// Define to isolate inline assembly\n//\n#define SYSCTL_DELAY        __asm(\" .if __TI_EABI__\\n\"                         \\\n                                  \" .asg    SysCtl_delay    , _SysCtl_delay\\n\" \\\n                                  \" .endif\\n\"                                  \\\n                                  \" .def _SysCtl_delay\\n\"                      \\\n                                  \" .sect \\\".TI.ramfunc\\\"\\n\"                   \\\n                                  \" .global  _SysCtl_delay\\n\"                  \\\n                                  \"_SysCtl_delay:\\n\"                           \\\n                                  \" SUB    ACC,#1\\n\"                           \\\n                                  \" BF     _SysCtl_delay, GEQ\\n\"               \\\n                                  \" LRETR\\n\")\n#define SYSCTL_CLRC_DBGM    __asm(\" CLRC DBGM\")\n\n//\n// Define Timer1 and Timer2 seed values\n//\n#define TMR1SYSCLKCTR       0xF0000000U\n#define TMR2INPCLKCTR       0x800U\n\n#define XTAL_CPUTIMER_PERIOD 1023U\n\n//*****************************************************************************\n//\n// SysCtl_delay()\n//\n//*****************************************************************************\nSYSCTL_DELAY;\n\n\nstatic void\nSysCtl_pollCpuTimer(void)\n{\n    //\n    // Delay for 1 ms while the XTAL powers up\n    //\n    // 2000 loops, 5 cycles per loop + 9 cycles overhead = 10009 cycles\n    //\n    SysCtl_delay(2000);\n\n    //\n    // Wait for cpu timer 2 to overflow\n    //\n    while(CPUTimer_getTimerOverflowStatus(CPUTIMER2_BASE) == false);\n    {\n        //\n        // If your application is stuck in this loop, please check if the\n        // input clock source is valid.\n        //\n    }\n\n    //\n    // Clear cpu timer 2 overflow flag\n    //\n    CPUTimer_clearOverflowFlag(CPUTIMER2_BASE);\n}\n\n//*****************************************************************************\n//\n// SysCtl_getClock()\n//\n//*****************************************************************************\nuint32_t\nSysCtl_getClock(uint32_t clockInHz)\n{\n    uint32_t temp;\n    uint32_t oscSource;\n    uint32_t clockOut;\n\n    //\n    // Don't proceed if an MCD failure is detected.\n    //\n    if(SysCtl_isMCDClockFailureDetected())\n    {\n        //\n        // OSCCLKSRC2 failure detected. Returning the INTOSC1 rate. You need\n        // to handle the MCD and clear the failure.\n        //\n        clockOut = SYSCTL_DEFAULT_OSC_FREQ;\n    }\n    else\n    {\n        //\n        // If one of the internal oscillators is being used, start from the\n        // known default frequency.  Otherwise, use clockInHz parameter.\n        //\n        oscSource = HWREG(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &\n                    (uint32_t)SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M;\n\n        if((oscSource == (SYSCTL_OSCSRC_OSC2 >> SYSCTL_OSCSRC_S)) ||\n           (oscSource == (SYSCTL_OSCSRC_OSC1 >> SYSCTL_OSCSRC_S)))\n        {\n            clockOut = SYSCTL_DEFAULT_OSC_FREQ;\n        }\n        else\n        {\n            clockOut = clockInHz;\n        }\n\n        //\n        // If the PLL is enabled calculate its effect on the clock\n        //\n        if((HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLCTL1) &\n            (SYSCTL_SYSPLLCTL1_PLLEN | SYSCTL_SYSPLLCTL1_PLLCLKEN)) == 3U)\n        {\n            //\n            // Calculate portion from fractional multiplier\n            //\n            temp = (clockInHz * ((HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) &\n                                  SYSCTL_SYSPLLMULT_FMULT_M) >>\n                                 SYSCTL_SYSPLLMULT_FMULT_S)) / 4U;\n\n            //\n            // Calculate integer multiplier and fixed divide by 2\n            //\n            clockOut = clockOut * ((HWREG(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) &\n                                    SYSCTL_SYSPLLMULT_IMULT_M) >>\n                                   SYSCTL_SYSPLLMULT_IMULT_S);\n\n            //\n            // Add in fractional portion\n            //\n            clockOut += temp;\n        }\n\n        if((HWREG(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n            SYSCTL_SYSCLKDIVSEL_PLLSYSCLKDIV_M) != 0U)\n        {\n            clockOut /= (2U * (HWREG(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n                               SYSCTL_SYSCLKDIVSEL_PLLSYSCLKDIV_M));\n        }\n    }\n\n    return(clockOut);\n}\n\n//*****************************************************************************\n//\n// SysCtl_getAuxClock()\n//\n//*****************************************************************************\nuint32_t SysCtl_getAuxClock(uint32_t clockInHz)\n{\n    uint32_t temp;\n    uint32_t oscSource;\n    uint32_t clockOut;\n\n    oscSource = HWREG(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL2) &\n                (uint32_t)SYSCTL_CLKSRCCTL2_AUXOSCCLKSRCSEL_M;\n\n    //\n    // If one of the internal oscillators is being used, start from the\n    // known default frequency.  Otherwise, use clockInHz parameter.\n    //\n    if(oscSource == (SYSCTL_AUXPLL_OSCSRC_OSC2 >> SYSCTL_OSCSRC_S))\n    {\n        //\n        // 10MHz Internal Clock\n        //\n        clockOut = SYSCTL_DEFAULT_OSC_FREQ;\n    }\n    else\n    {\n        clockOut = clockInHz;\n    }\n\n    //\n    // If the PLL is enabled calculate its effect on the clock\n    //\n    if((HWREG(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) &\n        (SYSCTL_AUXPLLCTL1_PLLEN | SYSCTL_AUXPLLCTL1_PLLCLKEN)) == 3U)\n    {\n        //\n        // Calculate portion from fractional multiplier\n        //\n        temp = (clockInHz * ((HWREG(CLKCFG_BASE + SYSCTL_O_AUXPLLMULT) &\n                              SYSCTL_AUXPLLMULT_FMULT_M) >>\n                             SYSCTL_AUXPLLMULT_FMULT_S)) / 4U;\n\n        //\n        // Calculate integer multiplier\n        //\n        clockOut = clockOut * ((HWREG(CLKCFG_BASE + SYSCTL_O_AUXPLLMULT) &\n                                SYSCTL_AUXPLLMULT_IMULT_M) >>\n                               SYSCTL_AUXPLLMULT_IMULT_S);\n\n        //\n        // Add in fractional portion\n        //\n        clockOut += temp;\n    }\n\n    clockOut /= (1U << (HWREG(CLKCFG_BASE + SYSCTL_O_AUXCLKDIVSEL) &\n                        SYSCTL_AUXCLKDIVSEL_AUXPLLDIV_M));\n\n    return(clockOut);\n}\n\n//*****************************************************************************\n//\n// SysCtl_setClock()\n//\n//*****************************************************************************\nbool\nSysCtl_setClock(uint32_t config)\n{\n    uint16_t divSel;\n    uint16_t iMult = 0U, fMult = 0U, pllMult = 0U, div;\n    bool status, sysclkInvalidFreq = true;\n    uint16_t i, tempSCSR, tempWDCR, tempWDWCR, intStatus;\n    uint16_t t1TCR, t1TPR, t1TPRH, t2TCR, t2TPR, t2TPRH, t2CLKCTL;\n    uint32_t t1PRD, t2PRD, ctr1;\n    float32_t sysclkToInClkError, mult;\n\n    //\n    // Check the arguments.\n    //\n    ASSERT((config & SYSCTL_OSCSRC_M) != SYSCTL_OSCSRC_M); // 3 is not valid\n\n    //\n    // Don't proceed to the PLL initialization if an MCD failure is detected.\n    //\n    if(SysCtl_isMCDClockFailureDetected())\n    {\n        //\n        // OSCCLKSRC2 failure detected. Returning false. You'll need to clear\n        // the MCD error.\n        //\n        status = false;\n    }\n    else\n    {\n        //\n        // Configure oscillator source\n        //\n        SysCtl_selectOscSource(config & SYSCTL_OSCSRC_M);\n\n        //\n        // Bypass PLL\n        //\n        EALLOW;\n        HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLCTL1) &=\n            ~SYSCTL_SYSPLLCTL1_PLLCLKEN;\n        EDIS;\n\n        //\n        // Delay of at least 120 OSCCLK cycles required post PLL bypass\n        //\n        SysCtl_delay(23U);\n\n        //\n        // Configure PLL if enabled\n        //\n        EALLOW;\n        if((config & SYSCTL_PLL_ENABLE) == SYSCTL_PLL_ENABLE)\n        {\n            if((HWREGH(DEVCFG_BASE + SYSCTL_O_SYSDBGCTL) &\n                SYSCTL_SYSDBGCTL_BIT_0) != 0U)\n            {\n                //\n                // The user can optionally insert handler code here. This will\n                // only be executed if a watchdog reset occurred after a failed\n                // system PLL initialization. See your device user's guide for\n                // more information.\n                //\n                // If the application has a watchdog reset handler, this bit\n                // should be checked to determine if the watchdog reset\n                // occurred because of the PLL.\n                //\n                // No action here will continue with retrying the PLL as\n                // normal.\n                //\n            }\n\n            //\n            // Set dividers to /1\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) = 0U;\n\n            //\n            // Get the PLL multiplier settings from config\n            //\n            iMult |= (uint16_t)(config & SYSCTL_IMULT_M);\n            fMult |= (uint16_t)((config & SYSCTL_FMULT_M) >> SYSCTL_FMULT_S);\n            pllMult |= (iMult << SYSCTL_SYSPLLMULT_IMULT_S) |\n                       (fMult << SYSCTL_SYSPLLMULT_FMULT_S);\n\n            //\n            // Lock the PLL five times. This helps ensure a successful start.\n            // Five is the minimum recommended number. The user can increase\n            // this number according to allotted system initialization time.\n            //\n            for(i = 0U; i < 5U; i++)\n            {\n                //\n                // Turn off PLL\n                //\n                HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLCTL1) &=\n                    ~SYSCTL_SYSPLLCTL1_PLLEN;\n\n                asm(\" RPT #60 || NOP\");\n\n                //\n                // Write multiplier, which automatically turns on the PLL\n                //\n                HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) = pllMult;\n\n                //\n                // Wait for the SYSPLL lock counter\n                //\n                while((HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLSTS) &\n                       SYSCTL_SYSPLLSTS_LOCKS) == 0U)\n                {\n                    //\n                    // Consider to servicing the watchdog using\n                    // SysCtl_serviceWatchdog()\n                    //\n                }\n            }\n        }\n\n        //\n        // Configure Dividers. Set divider to produce slower output frequency\n        // to limit current increase.\n        //\n        divSel = (uint16_t)(config & SYSCTL_SYSDIV_M) >> SYSCTL_SYSDIV_S;\n\n        if(divSel != (126U / 2U))\n        {\n            HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) =\n                (HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n                ~(uint16_t)SYSCTL_SYSCLKDIVSEL_PLLSYSCLKDIV_M) | (divSel + 1U);\n        }\n        else\n        {\n            HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) =\n                (HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n                 ~(uint16_t)SYSCTL_SYSCLKDIVSEL_PLLSYSCLKDIV_M) | divSel;\n        }\n\n        //\n        //      *CAUTION*\n        // It is recommended to use the following watchdog code to monitor the\n        // PLLstartup sequence. If your application has already cleared the\n        // watchdog SCRS[WDOVERRIDE] bit this cannot be done. It is recommended\n        // not to clear this bit until after the PLL has been initiated.\n        //\n\n        //\n        // Backup User Watchdog\n        //\n        tempSCSR = HWREGH(WD_BASE + SYSCTL_O_SCSR);\n        tempWDCR = HWREGH(WD_BASE + SYSCTL_O_WDCR);\n        tempWDWCR = HWREGH(WD_BASE + SYSCTL_O_WDWCR);\n\n        //\n        // Disable windowed functionality, reset counter\n        //\n        HWREGH(WD_BASE + SYSCTL_O_WDWCR) = 0x0U;\n        SysCtl_serviceWatchdog();\n\n        //\n        // Disable global interrupts\n        //\n        intStatus = __disable_interrupts();\n\n        //\n        // Configure for watchdog reset and to run at max frequency\n        //\n        EALLOW;\n        HWREGH(WD_BASE + SYSCTL_O_SCSR) = 0x0U;\n        HWREGH(WD_BASE + SYSCTL_O_WDCR) = SYSCTL_WD_CHKBITS;\n\n        //\n        // This bit is reset only by power-on-reset (POR) and will not be\n        // cleared by a WD reset\n        //\n        HWREGH(DEVCFG_BASE + SYSCTL_O_SYSDBGCTL) |= SYSCTL_SYSDBGCTL_BIT_0;\n\n        //\n        // Enable PLLSYSCLK is fed from system PLL clock\n        //\n        HWREGH(CLKCFG_BASE +\n               SYSCTL_O_SYSPLLCTL1) |= SYSCTL_SYSPLLCTL1_PLLCLKEN;\n\n        EDIS;\n\n        //\n        // Delay to ensure system is clocking from PLL prior to clearing\n        // status bit\n        //\n        SysCtl_delay(3U);\n\n        //\n        // Slip Bit Monitor and SYSCLK Frequency Check using timers\n        // Re-lock routine for SLIP condition or if SYSCLK and CLKSRC timer\n        // counts are off by +/- 10%. At a minimum, SYSCLK check is performed.\n        // Re-lock attempt is carried out if SLIPS bit is set.\n        // This while loop is monitored by watchdog.\n        // In the event that the PLL does not successfully lock, the loop will\n        // be aborted by watchdog reset.\n        //\n        while(((config & SYSCTL_PLL_ENABLE) == SYSCTL_PLL_ENABLE) &&\n              (sysclkInvalidFreq == true))\n        {\n            EALLOW;\n\n            //\n            // Perform PLL re-lock only if SLIPS bit is set, otherwise monitor\n            // SYSCLK frequency with timers\n            //\n            if((HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLSTS) &\n                SYSCTL_SYSPLLSTS_SLIPS) == 1U)\n            {\n                //\n                // Bypass PLL\n                //\n                HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLCTL1) &=\n                    ~SYSCTL_SYSPLLCTL1_PLLCLKEN;\n\n                //\n                // Delay of at least 120 OSCCLK cycles required post PLL bypass\n                //\n                SysCtl_delay(23U);\n\n                //\n                // Turn off PLL\n                //\n                HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLCTL1) &=\n                    ~SYSCTL_SYSPLLCTL1_PLLEN;\n\n                SysCtl_delay(12U);\n\n                //\n                // Write multiplier, which automatically turns on the PLL\n                //\n                HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLMULT) |= pllMult;\n\n                //\n                // Wait for the SYSPLL lock counter\n                //\n                while((HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLSTS) &\n                        SYSCTL_SYSPLLSTS_LOCKS) == 0U)\n                {\n                    ;\n                }\n\n                //\n                // Enable PLLSYSCLK is fed from system PLL clock\n                //\n                HWREGH(CLKCFG_BASE + SYSCTL_O_SYSPLLCTL1) |=\n                    SYSCTL_SYSPLLCTL1_PLLCLKEN;\n\n                //\n                // Delay to ensure system is clocking from PLL prior to\n                // clearing status bit\n                //\n                SysCtl_delay(12U);\n            }\n\n            //\n            // Backup timer1 and timer2 settings\n            //\n            t1TCR = HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR);\n            t1PRD = HWREG(CPUTIMER1_BASE + CPUTIMER_O_PRD);\n            t1TPR = HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TPR);\n            t1TPRH = HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TPRH);\n            t2CLKCTL = HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL);\n            t2TCR = HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR);\n            t2PRD = HWREG(CPUTIMER2_BASE + CPUTIMER_O_PRD);\n            t2TPR = HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPR);\n            t2TPRH = HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPRH);\n\n            //\n            // Set up timers 1 and 2\n            // Configure timer1 to count SYSCLK cycles\n            //\n\n            //\n            // Stop timer 1\n            // Seed timer1 counter\n            // Set sysclock divider\n            // Reload timer with value in PRD\n            // Clear interrupt flag\n            // Enable interrupt\n            //\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TSS;\n            HWREG(CPUTIMER1_BASE + CPUTIMER_O_PRD) = (uint32_t)TMR1SYSCLKCTR;\n            HWREG(CPUTIMER1_BASE + CPUTIMER_O_TPR) = 0U;\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TRB;\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TIF;\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TIE;\n\n            //\n            // Configure timer2 to count Input clock cycles\n            //\n            switch (config & SYSCTL_OSCSRC_M)\n            {\n                case SYSCTL_OSCSRC_OSC1:\n                    //\n                    // Clk Src = INT_OSC1\n                    //\n                    HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL) =\n                            (HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL) &\n                             ~SYSCTL_TMR2CLKCTL_TMR2CLKSRCSEL_M) | 1U;\n                    break;\n\n                case SYSCTL_OSCSRC_OSC2:\n                    //\n                    // Clk Src = INT_OSC2\n                    //\n                    HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL) =\n                            (HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL) &\n                             ~SYSCTL_TMR2CLKCTL_TMR2CLKSRCSEL_M) | 2U;\n                    break;\n\n                case SYSCTL_OSCSRC_XTAL:\n                    //\n                    // Clk Src = XTAL\n                    //\n                    HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL) =\n                            (HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL) &\n                             ~SYSCTL_TMR2CLKCTL_TMR2CLKSRCSEL_M) | 3U;\n                    break;\n\n                default:\n                    //\n                    // Do nothing. Not a valid clock source value.\n                    //\n                    break;\n            }\n\n            //\n            // Clear interrupt flag\n            // Enable interrupt\n            // Stop timer 2\n            // Seed timer2 counter\n            // Set sysclock divider\n            // Reload timer with value in PRD\n            //\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TIF;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TIE;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TSS;\n            HWREG(CPUTIMER2_BASE + CPUTIMER_O_PRD) = (uint32_t)TMR2INPCLKCTR;\n            HWREG(CPUTIMER2_BASE + CPUTIMER_O_TPR) = 0U;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TRB;\n\n            //\n            // Stop/Start timer counters\n            //\n\n            //\n            // Stop timer 1\n            // Stop timer 2\n            // Reload timer1 with value in PRD\n            // Reload timer2 with value in PRD\n            // Clear timer2 interrupt flag\n            // Start timer2\n            // Start timer1\n            //\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TSS;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TSS;\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TRB;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TRB;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TIF;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) &= ~CPUTIMER_TCR_TSS;\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR) &= ~CPUTIMER_TCR_TSS;\n\n            //\n            // Wait for Timers - Stop if either timer overflows\n            //\n            while(((HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) &\n                   CPUTIMER_TCR_TIF) == 0U)  &&\n                  ((HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR) &\n                   CPUTIMER_TCR_TIF) == 0U))\n            {\n                ;\n            }\n\n            //\n            // Stop timer 1 and 2\n            //\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TSS;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TSS;\n\n            //\n            // Calculate elapsed counts on timer1\n            //\n            ctr1 = (uint32_t)TMR1SYSCLKCTR - HWREG(CPUTIMER1_BASE +\n                                                   CPUTIMER_O_TIM);\n\n            //\n            // Restore timer settings\n            //\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TCR) = t1TCR;\n            HWREG(CPUTIMER1_BASE + CPUTIMER_O_PRD) = t1PRD;\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TPR) = t1TPR;\n            HWREGH(CPUTIMER1_BASE + CPUTIMER_O_TPRH) = t1TPRH;\n            HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL) = t2CLKCTL;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) = t2TCR;\n            HWREG(CPUTIMER2_BASE + CPUTIMER_O_PRD) = t2PRD;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPR) = t2TPR;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPRH) = t2TPRH;\n\n            //\n            // Calculate Clock Error:\n            // Error = (mult/div) - (timer1 count/timer2 count)\n            //\n            mult = (float32_t)iMult + ((float32_t)fMult / 4.0F);\n\n            if((HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) & 0x3FU) == 0U)\n            {\n                div = 1U;\n            }\n            else\n            {\n                div = (HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n                       0x3FU) << 1;\n            }\n\n            sysclkToInClkError = (mult / (float32_t)div) -\n                                 ((float32_t)ctr1 / (float32_t)TMR2INPCLKCTR);\n\n            //\n            // sysclkInvalidFreq will be set to true if sysclkToInClkError is\n            // off by 10%\n            //\n            sysclkInvalidFreq = ((sysclkToInClkError > 0.10F) ||\n                                 (sysclkToInClkError < -0.10F));\n\n            EDIS;\n        }\n\n        //\n        // Clear bit\n        //\n        EALLOW;\n        HWREGH(DEVCFG_BASE + SYSCTL_O_SYSDBGCTL) &= ~SYSCTL_SYSDBGCTL_BIT_0;\n        EDIS;\n\n        //\n        // Restore user watchdog, first resetting counter\n        //\n        SysCtl_serviceWatchdog();\n\n        //\n        // Set the KEY bits and make sure not to set the WDOVERRIDE bit\n        //\n        EALLOW;\n        HWREGH(WD_BASE + SYSCTL_O_WDCR) = tempWDCR | SYSCTL_WD_CHKBITS;\n        HWREGH(WD_BASE + SYSCTL_O_WDWCR) = tempWDWCR;\n        HWREGH(WD_BASE + SYSCTL_O_SCSR) = tempSCSR & ~SYSCTL_SCSR_WDOVERRIDE;\n        EDIS;\n\n        //\n        // Restore state of ST1[INTM]. This was set by the\n        // __disable_interrupts() intrinsic previously.\n        //\n        if((intStatus & 0x1U) == 0U)\n        {\n            EINT;\n        }\n\n        //\n        // Restore state of ST1[DBGM]. This was set by the\n        // __disable_interrupts() intrinsic previously.\n        //\n        if((intStatus & 0x2U) == 0U)\n        {\n            SYSCTL_CLRC_DBGM;\n        }\n\n        //\n        // ~200 PLLSYSCLK delay to allow voltage regulator to stabilize prior\n        // to increasing entire system clock frequency.\n        //\n        SysCtl_delay(40U);\n\n        //\n        // Set the divider to user value\n        //\n        EALLOW;\n        HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) =\n            (HWREGH(CLKCFG_BASE + SYSCTL_O_SYSCLKDIVSEL) &\n             ~SYSCTL_SYSCLKDIVSEL_PLLSYSCLKDIV_M) | divSel;\n        SYSCTL_REGWRITE_DELAY;\n        EDIS;\n\n        status = true;\n    }\n\n    return(status);\n}\n//*****************************************************************************\n//\n// SysCtl_setAuxClock()\n//\n//*****************************************************************************\nvoid SysCtl_setAuxClock(uint32_t config)\n{\n    uint16_t pllMult = 0U;\n    uint16_t counter = 0U, started = 0U, attempts = 0U;\n    uint16_t mult;\n    uint16_t i, t2TCR, t2TPR, t2TPRH, t2CLKCTL;\n    uint32_t t2PRD;\n\n    //\n    // Check the arguments\n    //\n    ASSERT((config & SYSCTL_OSCSRC_M) != SYSCTL_OSCSRC_M); // 3 is not valid\n\n    //\n    // Bypass PLL\n    //\n    EALLOW;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) &= ~SYSCTL_AUXPLLCTL1_PLLCLKEN;\n    EDIS;\n\n    //\n    // Delay of at least 120 OSCCLK cycles required post PLL bypass\n    //\n    SysCtl_delay(23U);\n\n    //\n    // Configure oscillator source\n    //\n    SysCtl_selectOscSourceAuxPLL(config & SYSCTL_OSCSRC_M);\n\n    //\n    // Get the PLL multiplier settings from config\n    //\n    pllMult |= (uint16_t)((config & SYSCTL_IMULT_M) <<\n                          SYSCTL_AUXPLLMULT_IMULT_S);\n    pllMult |= (uint16_t)(((config & SYSCTL_FMULT_M) >> SYSCTL_FMULT_S) <<\n                          SYSCTL_AUXPLLMULT_FMULT_S);\n\n    //\n    // Get the PLL multipliers currently programmed\n    //\n    mult  = (uint16_t)((HWREG(CLKCFG_BASE + SYSCTL_O_AUXPLLMULT) &\n                        (uint32_t)SYSCTL_AUXPLLMULT_IMULT_M) >>\n                       (uint32_t)SYSCTL_AUXPLLMULT_IMULT_S);\n    mult |= (uint16_t)(HWREG(CLKCFG_BASE + SYSCTL_O_AUXPLLMULT) &\n                             SYSCTL_AUXPLLMULT_FMULT_M);\n\n    //\n    // Lock PLL only if the multipliers need update\n    //\n    if(mult !=  pllMult)\n    {\n\n        //\n        // Configure PLL if enabled\n        //\n        if((config & SYSCTL_AUXPLL_ENABLE) == SYSCTL_AUXPLL_ENABLE)\n        {\n            //\n            // Backup Timer 2 settings\n            //\n            t2CLKCTL = HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL);\n            t2TCR = HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR);\n            t2PRD = HWREG(CPUTIMER2_BASE + CPUTIMER_O_PRD);\n            t2TPR = HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPR);\n            t2TPRH = HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPRH);\n\n            //\n            // Configure Timer 2 for AUXPLL as source in known configuration\n            // - Clock source to AUXPLL\n            // - Clock divider to divide by 1\n            // - Small period to detect overflow\n            // - Interrupt disabled\n            //\n            EALLOW;\n            HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL) = 6U;\n\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TSS;\n\n            HWREG(CPUTIMER2_BASE + CPUTIMER_O_PRD) = 10U;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPR) = 0U;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPRH) = 0U;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) &= ~CPUTIMER_TCR_TIE;\n\n            //\n            // Set AUX Divide by 8 to ensure that AUXPLLCLK <= SYSCLK / 2\n            // while using Timer 2\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_AUXCLKDIVSEL) = 0x3U;\n            SYSCTL_REGWRITE_DELAY;\n            EDIS;\n\n            //\n            // Lock the PLL up to five times.\n            //CPU Timer 2 will monitor a successful\n            // lock and break out of the loop earlier if detected.\n            //\n            while((counter < 5U) && (started == 0U))\n            {\n                EALLOW;\n\n                //\n                // Turn off AUXPLL and delay for it to power down.\n                //\n                HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) &=\n                    ~SYSCTL_AUXPLLCTL1_PLLEN;\n                SysCtl_delay(3U);\n\n                //\n                // Set integer and fractional multiplier, which automatically\n                // turns on the PLL\n                //\n                HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLMULT) |= pllMult;\n                SYSCTL_REGWRITE_DELAY;\n\n                //\n                // Enable AUXPLL\n                //\n                HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) |=\n                    SYSCTL_AUXPLLCTL1_PLLEN;\n                EDIS;\n\n                //\n                // Wait for the AUXPLL lock counter\n                //\n\n                while((HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLSTS) &\n                       SYSCTL_AUXPLLSTS_LOCKS) != 1U)\n                {\n                    //\n                    // Consider to servicing the watchdog using\n                    // SysCtl_serviceWatchdog()\n                    //\n                }\n\n\n                //\n                // Enable AUXPLLCLK to be fed from AUXPLL\n                //\n                EALLOW;\n                HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) |=\n                    SYSCTL_AUXPLLCTL1_PLLCLKEN;\n                SysCtl_delay(3U);\n\n                //\n                // CPU Timer 2 will now be setup to be clocked from AUXPLLCLK.\n                // This is used to test that the PLL has successfully started.\n                //\n                // Reload and start the timer\n                //\n                HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TRB;\n                HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) &= ~CPUTIMER_TCR_TSS;\n\n                //\n                // Check to see timer is counting properly\n                //\n                for(i = 0U; i < 1000U; i++)\n                {\n                    //\n                    // Check overflow flag\n                    //\n                    if((HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) &\n                        CPUTIMER_TCR_TIF) != 0U)\n                    {\n                        //\n                        // Clear overflow flag\n                        //\n                        HWREGH(CPUTIMER2_BASE +\n                               CPUTIMER_O_TCR) |= CPUTIMER_TCR_TIF;\n\n                        //\n                        // Set flag to indicate PLL started and break out of\n                        // for-loop\n                        //\n                        started = 1U;\n                        break;\n                    }\n                }\n\n                //\n                // Stop timer\n                //\n                HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TSS;\n                counter++;\n                EDIS;\n            }\n\n            if(started == 0U)\n            {\n                //\n                // AUX PLL may not have started. Reset multiplier to 0 (bypass\n                // PLL).\n                //\n                EALLOW;\n                HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLMULT) = 0U;\n                EDIS;\n\n                //\n                // The user should put some handler code here based on how\n                // this condition should be handled in their application.\n                //\n                ESTOP0;\n            }\n\n            //\n            // Restore Timer 2 configuration\n            //\n            EALLOW;\n            HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL) = t2CLKCTL;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) = t2TCR;\n            HWREG(CPUTIMER2_BASE + CPUTIMER_O_PRD) = t2PRD;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPR) = t2TPR;\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPRH) = t2TPRH;\n\n            //\n            // Reload period value\n            //\n            HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TRB;\n            EDIS;\n        }\n    }\n    else\n    {\n        //\n        // Enable AUXPLLCLK to be fed from AUXPLL\n        //\n        EALLOW;\n        HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) |= SYSCTL_AUXPLLCTL1_PLLCLKEN;\n        SysCtl_delay(3U);\n        EDIS;\n    }\n\n    //\n    // Slip Bit Monitor\n    // Re-lock routine for SLIP condition\n    //\n    while(((HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLSTS) &\n            SYSCTL_AUXPLLSTS_SLIPS) != 0U) && (attempts < 10U) &&\n          ((config & SYSCTL_AUXPLL_ENABLE) == SYSCTL_AUXPLL_ENABLE))\n    {\n        EALLOW;\n\n        //\n        // Bypass AUXPLL\n        //\n        HWREGH(CLKCFG_BASE +\n               SYSCTL_O_AUXPLLCTL1) &= ~SYSCTL_AUXPLLCTL1_PLLCLKEN;\n\n        //\n        // Delay of at least 120 OSCCLK cycles required post PLL bypass\n        //\n        SysCtl_delay(23U);\n\n        //\n        // Turn off AUXPLL\n        //\n        HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) &= ~SYSCTL_AUXPLLCTL1_PLLEN;\n        SysCtl_delay(3U);\n\n        //\n        // Set integer and fractional multiplier, which automatically turns\n        // on the PLL\n        //\n        HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLMULT) |= pllMult;\n\n        //\n        // Enable AUXPLL\n        //\n        HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) |= SYSCTL_AUXPLLCTL1_PLLEN;\n\n        //\n        // Wait for the AUXPLL lock counter\n        //\n        while((HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLSTS) &\n               SYSCTL_AUXPLLSTS_LOCKS) != 1U)\n        {\n            //\n            // Consider to servicing the watchdog using\n            // SysCtl_serviceWatchdog()\n            //\n        }\n\n        //\n        // Enable AUXPLLCLK to be fed from AUXPLL\n        //\n        HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) |= SYSCTL_AUXPLLCTL1_PLLCLKEN;\n\n        SysCtl_delay(3U);\n\n        attempts++;\n\n        EDIS;\n    }\n\n    //\n    // Set divider to desired value\n    //\n    EALLOW;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_AUXCLKDIVSEL) =\n        (uint16_t)(config & SYSCTL_SYSDIV_M) >> SYSCTL_SYSDIV_S;\n    SYSCTL_REGWRITE_DELAY;\n    EDIS;\n\n}\n\n\n//*****************************************************************************\n//\n// SysCtl_selectXTAL()\n//\n//*****************************************************************************\nvoid\nSysCtl_selectXTAL(void)\n{\n    uint16_t t2TCR, t2TPR, t2TPRH, t2CLKCTL;\n    uint32_t t2PRD;\n\n    //\n    // Backup CPU timer2 settings\n    //\n    t2CLKCTL = HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL);\n    t2TCR = HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR);\n    t2PRD = HWREG(CPUTIMER2_BASE + CPUTIMER_O_PRD);\n    t2TPR = HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPR);\n    t2TPRH = HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPRH);\n\n    //\n    // Backup AUX clock settings\n    //\n    uint16_t clksrcctl2 = HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL2);\n    uint16_t auxpllctl1 = HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1);\n    uint16_t auxclkdivsel = HWREGH(CLKCFG_BASE + SYSCTL_O_AUXCLKDIVSEL);\n\n    //\n    // Set AUX clock source to XTAL, bypass mode.\n    // AUXCLK is used as the CPUTimer Clock source. SYSCLK frequency must be\n    // atleast twice the frequency of AUXCLK. SYSCLK = INTOSC2(10MHz)\n    // Set the AUX divider to 8. The above condition will be met for XTAL\n    // frequencies up to 40MHz\n    //\n    EALLOW;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL2) =\n            (HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL2) &\n             ~(SYSCTL_CLKSRCCTL2_AUXOSCCLKSRCSEL_M)) |\n            (1U << SYSCTL_CLKSRCCTL2_AUXOSCCLKSRCSEL_S);\n    HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) = 0x0U;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_AUXCLKDIVSEL) = SYSCTL_AUXPLLCLK_DIV_8;\n    SYSCTL_REGWRITE_DELAY;\n\n\n    //\n    // Disable cpu timer 2 interrupt\n    //\n    CPUTimer_disableInterrupt(CPUTIMER2_BASE);\n\n    //\n    // Stop cpu timer 2 if running\n    //\n    CPUTimer_stopTimer(CPUTIMER2_BASE);\n\n    //\n    // Initialize cpu timer 2 period\n    //\n    CPUTimer_setPeriod(CPUTIMER2_BASE, XTAL_CPUTIMER_PERIOD);\n\n    //\n    // Set cpu timer 2 clock source to XTAL\n    //\n    CPUTimer_selectClockSource(CPUTIMER2_BASE, CPUTIMER_CLOCK_SOURCE_AUX,\n                               CPUTIMER_CLOCK_PRESCALER_1);\n\n    //\n    // Clear cpu timer 2 overflow flag\n    //\n    CPUTimer_clearOverflowFlag(CPUTIMER2_BASE);\n\n    //\n    // Start cpu timer 2\n    //\n    CPUTimer_startTimer(CPUTIMER2_BASE);\n\n    EALLOW;\n    //\n    // Turn on XTAL\n    //\n    HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &= ~SYSCTL_CLKSRCCTL1_XTALOFF;\n    EDIS;\n\n    //\n    // Wait for the X1 clock to overflow cpu timer 2\n    //\n    SysCtl_pollCpuTimer();\n\n    //\n    // Select XTAL as the oscillator source\n    //\n    EALLOW;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) =\n    ((HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &\n      (~SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M)) |\n     (SYSCTL_OSCSRC_XTAL >> SYSCTL_OSCSRC_S));\n    EDIS;\n\n    //\n    // If a missing clock failure was detected, try waiting for the cpu timer 2\n    // to overflow again.\n    //\n    while(SysCtl_isMCDClockFailureDetected())\n    {\n        //\n        // Clear the MCD failure\n        //\n        SysCtl_resetMCD();\n\n        //\n        // Wait for the X1 clock to overflow cpu timer 2\n        //\n        SysCtl_pollCpuTimer();\n\n        //\n        // Select XTAL as the oscillator source\n        //\n        EALLOW;\n        HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) =\n        ((HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &\n          (~SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M)) |\n         (SYSCTL_OSCSRC_XTAL >> SYSCTL_OSCSRC_S));\n        EDIS;\n    }\n\n    //\n    // Stop cpu timer 2\n    //\n    CPUTimer_stopTimer(CPUTIMER2_BASE);\n\n    //\n    // Restore Timer 2 configuration\n    //\n    EALLOW;\n    HWREGH(CPUSYS_BASE + SYSCTL_O_TMR2CLKCTL) = t2CLKCTL;\n    HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) = t2TCR;\n    HWREG(CPUTIMER2_BASE + CPUTIMER_O_PRD) = t2PRD;\n    HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPR) = t2TPR;\n    HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TPRH) = t2TPRH;\n    HWREGH(CPUTIMER2_BASE + CPUTIMER_O_TCR) |= CPUTIMER_TCR_TRB;\n\n    //\n    // Restore AUX clock settings\n    //\n    HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL2) = clksrcctl2;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_AUXPLLCTL1) = auxpllctl1;\n    HWREGH(CLKCFG_BASE + SYSCTL_O_AUXCLKDIVSEL) = auxclkdivsel;\n    SYSCTL_REGWRITE_DELAY;\n    EDIS;\n\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// SysCtl_selectOscSource()\n//\n//*****************************************************************************\nvoid\nSysCtl_selectOscSource(uint32_t oscSource)\n{\n    ASSERT((oscSource == SYSCTL_OSCSRC_OSC1) ||\n           (oscSource == SYSCTL_OSCSRC_OSC2) ||\n           (oscSource == SYSCTL_OSCSRC_XTAL));\n\n    //\n    // Select the specified source.\n    //\n    EALLOW;\n    switch(oscSource)\n    {\n        case SYSCTL_OSCSRC_OSC2:\n            //\n            // Turn on INTOSC2\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &=\n                ~SYSCTL_CLKSRCCTL1_INTOSC2OFF;\n\n            SYSCTL_CLKSRCCTL_DELAY;\n\n            //\n            // Clk Src = INTOSC2\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &=\n                ~SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M;\n\n            SYSCTL_CLKSRCCTL_DELAY;\n\n            //\n            // Turn off XTALOSC\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) |=\n                SYSCTL_CLKSRCCTL1_XTALOFF;\n\n            break;\n\n        case SYSCTL_OSCSRC_XTAL:\n            //\n            // Select XTAL in crystal mode and wait for it to power up\n            //\n            SysCtl_selectXTAL();\n            break;\n\n        case SYSCTL_OSCSRC_OSC1:\n            //\n            // Clk Src = INTOSC1\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) =\n                   (HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &\n                    ~SYSCTL_CLKSRCCTL1_OSCCLKSRCSEL_M) |\n                   (SYSCTL_OSCSRC_OSC1 >> SYSCTL_OSCSRC_S);\n\n            SYSCTL_CLKSRCCTL_DELAY;\n\n            //\n            //Turn off XTALOSC\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) |=\n                SYSCTL_CLKSRCCTL1_XTALOFF;\n\n            break;\n\n        default:\n            //\n            // Do nothing. Not a valid oscSource value.\n            //\n            break;\n    }\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// SysCtl_selectOscSourceAuxPLL()\n//\n//*****************************************************************************\nvoid\nSysCtl_selectOscSourceAuxPLL(uint32_t oscSource)\n{\n    bool status = false;\n\n    EALLOW;\n\n    switch(oscSource)\n    {\n        case SYSCTL_AUXPLL_OSCSRC_OSC2:\n            //\n            // Turn on INTOSC2\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &=\n                    ~(SYSCTL_CLKSRCCTL1_INTOSC2OFF);\n            SYSCTL_CLKSRCCTL_DELAY;\n\n            //\n            // Clk Src = INTOSC2\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL2) &=\n                    ~(SYSCTL_CLKSRCCTL2_AUXOSCCLKSRCSEL_M);\n            break;\n\n        case SYSCTL_AUXPLL_OSCSRC_XTAL:\n            //\n            // Turn on XTALOSC\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL1) &=\n                   ~(SYSCTL_CLKSRCCTL1_XTALOFF);\n            SYSCTL_CLKSRCCTL_DELAY;\n\n            //\n            // Clk Src = XTAL\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL2) =\n                    (HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL2) &\n                     ~(SYSCTL_CLKSRCCTL2_AUXOSCCLKSRCSEL_M)) |\n                    (1U << SYSCTL_CLKSRCCTL2_AUXOSCCLKSRCSEL_S);\n            break;\n\n        case SYSCTL_AUXPLL_OSCSRC_AUXCLKIN:\n            //\n            // Clk Src = AUXCLKIN\n            //\n            HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL2) =\n                    (HWREGH(CLKCFG_BASE + SYSCTL_O_CLKSRCCTL2) &\n                     ~(SYSCTL_CLKSRCCTL2_AUXOSCCLKSRCSEL_M)) |\n                    (2U << SYSCTL_CLKSRCCTL2_AUXOSCCLKSRCSEL_S);\n            SYSCTL_CLKSRCCTL_DELAY;\n            break;\n\n        default:\n            //\n            // Do nothing. Not a valid clock source value.\n            //\n            break;\n    }\n    EDIS;\n}\n\n//*****************************************************************************\n//\n// SysCtl_getLowSpeedClock()\n//\n//*****************************************************************************\nuint32_t\nSysCtl_getLowSpeedClock(uint32_t clockInHz)\n{\n    uint32_t clockOut;\n\n    //\n    // Get the main system clock\n    //\n    clockOut = SysCtl_getClock(clockInHz);\n\n    //\n    // Apply the divider to the main clock\n    //\n    if((HWREG(CLKCFG_BASE + SYSCTL_O_LOSPCP) &\n        SYSCTL_LOSPCP_LSPCLKDIV_M) != 0U)\n    {\n        clockOut /= (2U * (HWREG(CLKCFG_BASE + SYSCTL_O_LOSPCP) &\n                            SYSCTL_LOSPCP_LSPCLKDIV_M));\n    }\n\n    return(clockOut);\n}\n\n//*****************************************************************************\n//\n// SysCtl_getDeviceParametric()\n//\n//*****************************************************************************\nuint16_t\nSysCtl_getDeviceParametric(SysCtl_DeviceParametric parametric)\n{\n    uint32_t value;\n\n    //\n    // Get requested parametric value\n    //\n    switch(parametric)\n    {\n        case SYSCTL_DEVICE_QUAL:\n            //\n            // Qualification Status\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDL) &\n                      SYSCTL_PARTIDL_QUAL_M) >> SYSCTL_PARTIDL_QUAL_S);\n            break;\n\n        case SYSCTL_DEVICE_PINCOUNT:\n            //\n            // Pin Count\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDL) &\n                      SYSCTL_PARTIDL_PIN_COUNT_M) >>\n                     SYSCTL_PARTIDL_PIN_COUNT_S);\n            break;\n\n        case SYSCTL_DEVICE_INSTASPIN:\n            //\n            // InstaSPIN Feature Set\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDL) &\n                      SYSCTL_PARTIDL_INSTASPIN_M) >>\n                     SYSCTL_PARTIDL_INSTASPIN_S);\n            break;\n\n        case SYSCTL_DEVICE_FLASH:\n            //\n            // Flash Size (KB)\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDL) &\n                      SYSCTL_PARTIDL_FLASH_SIZE_M) >>\n                     SYSCTL_PARTIDL_FLASH_SIZE_S);\n            break;\n\n        case SYSCTL_DEVICE_PARTID:\n            //\n            // PARTID Format Revision\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDL) &\n                      SYSCTL_PARTIDL_PARTID_FORMAT_REVISION_M) >>\n                     SYSCTL_PARTIDL_PARTID_FORMAT_REVISION_S);\n            break;\n\n        case SYSCTL_DEVICE_FAMILY:\n            //\n            // Device Family\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDH) &\n                      SYSCTL_PARTIDH_FAMILY_M) >> SYSCTL_PARTIDH_FAMILY_S);\n            break;\n\n        case SYSCTL_DEVICE_PARTNO:\n            //\n            // Part Number\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDH) &\n                      SYSCTL_PARTIDH_PARTNO_M) >> SYSCTL_PARTIDH_PARTNO_S);\n            break;\n\n        case SYSCTL_DEVICE_CLASSID:\n            //\n            // Class ID\n            //\n            value = ((HWREG(DEVCFG_BASE + SYSCTL_O_PARTIDH) &\n                      SYSCTL_PARTIDH_DEVICE_CLASS_ID_M) >>\n                     SYSCTL_PARTIDH_DEVICE_CLASS_ID_S);\n            break;\n\n        default:\n            //\n            // Not a valid value for PARTID register\n            //\n            value = 0U;\n            break;\n    }\n\n    return((uint16_t)value);\n}\n\n"}],"trace":"{\"model\":\"mcb_pmsm_qep_offset_f28379d\",\"sources\":[\"mcb_pmsm_qep_offset_f28379d.c\",\"mcb_pmsm_qep_offset_f28379d.h\"],\"categoricalProps\":[\"ModelElemCategory\",\"StorageClass\",\"BlockName\"],\"categoricalValues\":[\"InternalData\",\"Default\",\"\\u003cS54\\u003e/Data\",\"\\u003cS55\\u003e/Data\",\"\\u003cS56\\u003e/Data\",\"Constants\"],\"sidPrefixes\":[\"mcb_pmsm_qep_offset_f28379d\"],\"fileRecords\":{\"1\":{\"records\":[{\"tk\":[57,3,57,11],\"els\":[\"0:6868\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[57,12,57,20],\"els\":[\"0:6868\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[57,20,57,21],\"els\":[\"0:6868\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[57,21,57,22],\"els\":[\"0:6868\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[57,22,57,23],\"els\":[\"0:6868\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[57,23,57,24],\"els\":[\"0:6868\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[58,3,58,11],\"els\":[\"0:6892\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[58,12,58,23],\"els\":[\"0:6892\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[58,23,58,24],\"els\":[\"0:6892\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[58,24,58,25],\"els\":[\"0:6892\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[58,25,58,26],\"els\":[\"0:6892\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[58,26,58,27],\"els\":[\"0:6892\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[59,3,59,11],\"els\":[\"0:6893\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[59,12,59,28],\"els\":[\"0:6893\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[59,28,59,29],\"els\":[\"0:6893\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[60,3,60,11],\"els\":[\"0:6200:76:610\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[60,12,60,15],\"els\":[\"0:6200:76:610\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[60,15,60,16],\"els\":[\"0:6200:76:610\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[60,16,60,17],\"els\":[\"0:6200:76:610\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[60,17,60,18],\"els\":[\"0:6200:76:610\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[60,18,60,19],\"els\":[\"0:6200:76:610\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[61,3,61,11],\"els\":[\"0:6913\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[61,12,61,23],\"els\":[\"0:6913\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[61,23,61,24],\"els\":[\"0:6913\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[62,3,62,11],\"els\":[\"0:6912\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[62,12,62,15],\"els\":[\"0:6912\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[62,15,62,16],\"els\":[\"0:6912\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[63,3,63,11],\"ct\":{\"0\":0,\"1\":1,\"2\":2}},{\"tk\":[63,12,63,16],\"ct\":{\"1\":1,\"2\":2,\"0\":0}},{\"tk\":[63,16,63,17],\"ct\":{\"0\":0,\"1\":1,\"2\":2}},{\"tk\":[63,17,63,18],\"ct\":{\"0\":0,\"1\":1,\"2\":2}},{\"tk\":[63,18,63,19],\"ct\":{\"0\":0,\"1\":1,\"2\":2}},{\"tk\":[63,19,63,20],\"ct\":{\"0\":0,\"1\":1,\"2\":2}},{\"tk\":[64,3,64,11],\"ct\":{\"1\":1,\"0\":0,\"2\":3}},{\"tk\":[64,12,64,18],\"ct\":{\"1\":1,\"0\":0,\"2\":3}},{\"tk\":[64,18,64,19],\"ct\":{\"0\":0,\"1\":1,\"2\":3}},{\"tk\":[64,19,64,20],\"ct\":{\"0\":0,\"1\":1,\"2\":3}},{\"tk\":[64,20,64,21],\"ct\":{\"0\":0,\"1\":1,\"2\":3}},{\"tk\":[64,21,64,22],\"ct\":{\"1\":1,\"0\":0,\"2\":3}},{\"tk\":[65,3,65,11],\"ct\":{\"1\":1,\"0\":0,\"2\":4}},{\"tk\":[65,12,65,19],\"ct\":{\"0\":0,\"1\":1,\"2\":4}},{\"tk\":[65,19,65,20],\"ct\":{\"1\":1,\"2\":4,\"0\":0}},{\"tk\":[65,20,65,21],\"ct\":{\"0\":0,\"1\":1,\"2\":4}},{\"tk\":[65,21,65,22],\"ct\":{\"0\":0,\"1\":1,\"2\":4}},{\"tk\":[65,22,65,23],\"ct\":{\"0\":0,\"1\":1,\"2\":4}},{\"tk\":[66,3,66,11],\"els\":[\"0:6686\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[66,12,66,17],\"els\":[\"0:6686\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[66,17,66,18],\"els\":[\"0:6686\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[67,3,67,11],\"els\":[\"0:6683\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[67,12,67,16],\"els\":[\"0:6683\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[67,16,67,17],\"els\":[\"0:6683\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[68,3,68,11],\"els\":[\"0:6844\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[68,12,68,22],\"els\":[\"0:6844\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[68,22,68,23],\"els\":[\"0:6844\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[69,3,69,11],\"els\":[\"0:6254:164\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[69,12,69,15],\"els\":[\"0:6254:164\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[69,15,69,16],\"els\":[\"0:6254:164\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[70,3,70,11],\"els\":[\"0:6254:211\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[70,12,70,19],\"els\":[\"0:6254:211\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[70,19,70,20],\"els\":[\"0:6254:211\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[71,3,71,11],\"els\":[\"0:6253:925\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[71,12,71,18],\"els\":[\"0:6253:925\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[71,18,71,19],\"els\":[\"0:6253:925\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[72,3,72,11],\"els\":[\"0:6253:911\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[72,12,72,17],\"els\":[\"0:6253:911\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[72,17,72,18],\"els\":[\"0:6253:911\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[73,3,73,11],\"els\":[\"0:6253:1014:922\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[73,12,73,29],\"els\":[\"0:6253:1014:922\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[73,29,73,30],\"els\":[\"0:6253:1014:922\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[74,3,74,11],\"els\":[\"0:6253:919\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[74,12,74,17],\"els\":[\"0:6253:919\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[74,17,74,18],\"els\":[\"0:6253:919\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[75,3,75,11],\"els\":[\"0:6253:918\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[75,12,75,17],\"els\":[\"0:6253:918\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[75,17,75,18],\"els\":[\"0:6253:918\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[76,3,76,11],\"els\":[\"0:6966\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[76,12,76,20],\"els\":[\"0:6966\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[76,20,76,21],\"els\":[\"0:6966\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[77,3,77,11],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[77,12,77,43],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[77,43,77,44],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[77,44,77,45],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[77,45,77,46],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[77,46,77,47],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[78,3,78,11],\"els\":[\"0:6200:76:696\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[78,12,78,19],\"els\":[\"0:6200:76:696\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[78,19,78,20],\"els\":[\"0:6200:76:696\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[79,3,79,11],\"els\":[\"0:6200:76:605\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[79,12,79,20],\"els\":[\"0:6200:76:605\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[79,20,79,21],\"els\":[\"0:6200:76:605\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[80,3,80,11],\"els\":[\"0:6200:76:557\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[80,12,80,18],\"els\":[\"0:6200:76:557\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[80,18,80,19],\"els\":[\"0:6200:76:557\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[80,19,80,20],\"els\":[\"0:6200:76:557\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[80,20,80,21],\"els\":[\"0:6200:76:557\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[80,21,80,22],\"els\":[\"0:6200:76:557\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[81,3,81,11],\"els\":[\"0:6200:76:614\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[81,12,81,16],\"els\":[\"0:6200:76:614\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[81,16,81,17],\"els\":[\"0:6200:76:614\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[82,3,82,11],\"els\":[\"0:6200:76:653\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[82,12,82,31],\"els\":[\"0:6200:76:653\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[82,31,82,32],\"els\":[\"0:6200:76:653\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[83,3,83,11],\"els\":[\"0:6200:76:612\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[83,12,83,16],\"els\":[\"0:6200:76:612\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[83,16,83,17],\"els\":[\"0:6200:76:612\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[84,3,84,11],\"els\":[\"0:6200:76:616\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[84,12,84,21],\"els\":[\"0:6200:76:616\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[84,21,84,22],\"els\":[\"0:6200:76:616\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[85,3,85,11],\"els\":[\"0:6200:76:615\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[85,12,85,16],\"els\":[\"0:6200:76:615\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[85,16,85,17],\"els\":[\"0:6200:76:615\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[86,3,86,11],\"els\":[\"0:6200:76:622\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[86,12,86,16],\"els\":[\"0:6200:76:622\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[86,16,86,17],\"els\":[\"0:6200:76:622\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[87,3,87,11],\"els\":[\"0:6200:76:621\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[87,12,87,20],\"els\":[\"0:6200:76:621\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[87,20,87,21],\"els\":[\"0:6200:76:621\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[88,3,88,11],\"els\":[\"0:6200:76:623\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[88,12,88,16],\"els\":[\"0:6200:76:623\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[88,16,88,17],\"els\":[\"0:6200:76:623\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[89,3,89,11],\"els\":[\"0:6360\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[89,12,89,19],\"els\":[\"0:6360\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[89,19,89,20],\"els\":[\"0:6360\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[89,20,89,21],\"els\":[\"0:6360\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[89,21,89,22],\"els\":[\"0:6360\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[89,22,89,23],\"els\":[\"0:6360\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[90,3,90,11],\"els\":[\"0:6201:1632:492\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[90,12,90,24],\"els\":[\"0:6201:1632:492\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[90,24,90,25],\"els\":[\"0:6201:1632:492\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[91,3,91,11],\"els\":[\"0:6201:1632:493\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[91,12,91,22],\"els\":[\"0:6201:1632:493\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[91,22,91,23],\"els\":[\"0:6201:1632:493\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[92,3,92,11],\"els\":[\"0:6201:1632:499\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[92,12,92,17],\"els\":[\"0:6201:1632:499\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[92,17,92,18],\"els\":[\"0:6201:1632:499\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[93,3,93,11],\"els\":[\"0:6201:1632:490\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[93,12,93,17],\"els\":[\"0:6201:1632:490\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[93,17,93,18],\"els\":[\"0:6201:1632:490\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[94,3,94,11],\"els\":[\"0:6201:1404\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[94,12,94,15],\"els\":[\"0:6201:1404\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[94,15,94,16],\"els\":[\"0:6201:1404\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[95,3,95,11],\"els\":[\"0:6201:1403\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[95,12,95,15],\"els\":[\"0:6201:1403\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[95,15,95,16],\"els\":[\"0:6201:1403\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[96,3,96,11],\"els\":[\"0:6201:1400\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[96,12,96,17],\"els\":[\"0:6201:1400\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[96,17,96,18],\"els\":[\"0:6201:1400\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[97,3,97,11],\"els\":[\"0:6201:1405\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[97,12,97,24],\"els\":[\"0:6201:1405\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[97,24,97,25],\"els\":[\"0:6201:1405\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[98,3,98,11],\"els\":[\"0:6201:1408\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[98,12,98,16],\"els\":[\"0:6201:1408\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[98,16,98,17],\"els\":[\"0:6201:1408\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[99,3,99,11],\"els\":[\"0:6201:1407\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[99,12,99,18],\"els\":[\"0:6201:1407\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[99,18,99,19],\"els\":[\"0:6201:1407\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[100,3,100,11],\"els\":[\"0:6201:1409\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[100,12,100,16],\"els\":[\"0:6201:1409\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[100,16,100,17],\"els\":[\"0:6201:1409\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[101,3,101,11],\"els\":[\"0:6201:1551\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[101,12,101,16],\"els\":[\"0:6201:1551\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[101,16,101,17],\"els\":[\"0:6201:1551\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[101,17,101,18],\"els\":[\"0:6201:1551\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[101,18,101,19],\"els\":[\"0:6201:1551\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[101,19,101,20],\"els\":[\"0:6201:1551\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[102,3,102,11],\"els\":[\"0:6359\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[102,12,102,17],\"els\":[\"0:6359\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[102,17,102,18],\"els\":[\"0:6359\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[102,18,102,19],\"els\":[\"0:6359\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[102,19,102,20],\"els\":[\"0:6359\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[102,20,102,21],\"els\":[\"0:6359\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[103,3,103,11],\"els\":[\"0:6356\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[103,12,103,18],\"els\":[\"0:6356\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[103,18,103,19],\"els\":[\"0:6356\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[103,19,103,20],\"els\":[\"0:6356\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[103,20,103,21],\"els\":[\"0:6356\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[103,21,103,22],\"els\":[\"0:6356\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[104,3,104,11],\"els\":[\"0:6200:76:698\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[104,12,104,24],\"els\":[\"0:6200:76:698\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[104,24,104,25],\"els\":[\"0:6200:76:698\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[105,3,105,11],\"els\":[\"0:6200:76:695\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[105,12,105,26],\"els\":[\"0:6200:76:695\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[105,26,105,27],\"els\":[\"0:6200:76:695\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[106,3,106,11],\"els\":[\"0:6710\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[106,12,106,19],\"els\":[\"0:6710\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[106,19,106,20],\"els\":[\"0:6710\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[107,3,107,11],\"els\":[\"0:6711:1187\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[107,12,107,21],\"els\":[\"0:6711:1187\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[107,21,107,22],\"els\":[\"0:6711:1187\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[108,3,108,11],\"els\":[\"0:6770\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[108,12,108,20],\"els\":[\"0:6770\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[108,20,108,21],\"els\":[\"0:6770\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[109,3,109,11],\"els\":[\"0:6699\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[109,12,109,20],\"els\":[\"0:6699\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[109,20,109,21],\"els\":[\"0:6699\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[110,3,110,11],\"els\":[\"0:6711:1183\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[110,12,110,17],\"els\":[\"0:6711:1183\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[110,17,110,18],\"els\":[\"0:6711:1183\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[111,3,111,11],\"els\":[\"0:6711:1215\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[111,12,111,33],\"els\":[\"0:6711:1215\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[111,33,111,34],\"els\":[\"0:6711:1215\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[112,3,112,11],\"els\":[\"0:6711:1184\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[112,12,112,18],\"els\":[\"0:6711:1184\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[112,18,112,19],\"els\":[\"0:6711:1184\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[113,3,113,11],\"els\":[\"0:6711:0\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[113,12,113,17],\"els\":[\"0:6711:0\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[113,17,113,18],\"els\":[\"0:6711:0\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[114,3,114,11],\"els\":[\"0:6706\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[114,12,114,19],\"els\":[\"0:6706\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[114,19,114,20],\"els\":[\"0:6706\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[115,3,115,11],\"els\":[\"0:6704\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[115,12,115,18],\"els\":[\"0:6704\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[115,18,115,19],\"els\":[\"0:6704\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[116,3,116,11],\"els\":[\"0:6708\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[116,12,116,40],\"els\":[\"0:6708\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[116,40,116,41],\"els\":[\"0:6708\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[118,3,118,11],\"els\":[\"0:6181:434\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[118,12,118,16],\"els\":[\"0:6181:434\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[118,16,118,17],\"els\":[\"0:6181:434\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[119,3,119,11],\"els\":[\"0:6181:435\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[119,12,119,16],\"els\":[\"0:6181:435\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[119,16,119,17],\"els\":[\"0:6181:435\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[120,3,120,11],\"els\":[\"0:6181:436\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[120,12,120,20],\"els\":[\"0:6181:436\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[120,20,120,21],\"els\":[\"0:6181:436\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[121,3,121,11],\"els\":[\"0:6181:431\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[121,12,121,16],\"els\":[\"0:6181:431\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[121,16,121,17],\"els\":[\"0:6181:431\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[122,3,122,11],\"els\":[\"0:6181:433\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[122,12,122,16],\"els\":[\"0:6181:433\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[122,16,122,17],\"els\":[\"0:6181:433\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[123,3,123,11],\"els\":[\"0:6181:432\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[123,12,123,21],\"els\":[\"0:6181:432\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[123,21,123,22],\"els\":[\"0:6181:432\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[124,3,124,11],\"els\":[\"0:6181:755\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[124,12,124,21],\"els\":[\"0:6181:755\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[124,21,124,22],\"els\":[\"0:6181:755\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[124,22,124,23],\"els\":[\"0:6181:755\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[124,23,124,24],\"els\":[\"0:6181:755\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[124,24,124,25],\"els\":[\"0:6181:755\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[125,3,125,11],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[125,12,125,20],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[125,20,125,21],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[126,3,126,11],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[126,12,126,20],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[126,20,126,21],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[127,3,127,11],\"els\":[\"0:6873:4\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[127,12,127,18],\"els\":[\"0:6873:4\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[127,18,127,19],\"els\":[\"0:6873:4\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[128,3,128,11],\"els\":[\"0:6382\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[128,12,128,19],\"els\":[\"0:6382\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[128,19,128,20],\"els\":[\"0:6382\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[129,3,129,11],\"els\":[\"0:6382\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[129,12,129,19],\"els\":[\"0:6382\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[129,19,129,20],\"els\":[\"0:6382\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[130,3,130,11],\"els\":[\"0:6254:121\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[130,12,130,19],\"els\":[\"0:6254:121\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[130,19,130,20],\"els\":[\"0:6254:121\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[131,3,131,11],\"els\":[\"0:6873:3:4\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[131,12,131,21],\"els\":[\"0:6873:3:4\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[131,21,131,22],\"els\":[\"0:6873:3:4\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[132,3,132,11],\"els\":[\"0:6873:5:3\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[132,12,132,23],\"els\":[\"0:6873:5:3\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[132,23,132,24],\"els\":[\"0:6873:5:3\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[133,3,133,11],\"els\":[\"0:6200:76:702\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[133,12,133,30],\"els\":[\"0:6200:76:702\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[133,30,133,31],\"els\":[\"0:6200:76:702\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[134,3,134,11],\"els\":[\"0:6200:76:608\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[134,12,134,23],\"els\":[\"0:6200:76:608\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[134,23,134,24],\"els\":[\"0:6200:76:608\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[135,3,135,11],\"els\":[\"0:6379\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[135,12,135,21],\"els\":[\"0:6379\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[135,21,135,22],\"els\":[\"0:6379\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[136,3,136,11],\"els\":[\"0:6380\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[136,12,136,21],\"els\":[\"0:6380\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[136,21,136,22],\"els\":[\"0:6380\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[137,3,137,11],\"els\":[\"0:6358\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[137,12,137,36],\"els\":[\"0:6358\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[137,36,137,37],\"els\":[\"0:6358\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[137,37,137,38],\"els\":[\"0:6358\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[137,38,137,39],\"els\":[\"0:6358\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[137,39,137,40],\"els\":[\"0:6358\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[138,3,138,11],\"els\":[\"0:6254:130\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[138,12,138,18],\"els\":[\"0:6254:130\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[138,18,138,19],\"els\":[\"0:6254:130\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[139,3,139,11],\"els\":[\"0:6254:131\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[139,12,139,16],\"els\":[\"0:6254:131\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[139,16,139,17],\"els\":[\"0:6254:131\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[140,3,140,10],\"els\":[\"0:6915\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[140,11,140,24],\"els\":[\"0:6915\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[140,24,140,25],\"els\":[\"0:6915\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[141,3,141,10],\"els\":[\"0:6200:76:697\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[141,11,141,25],\"els\":[\"0:6200:76:697\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[141,25,141,26],\"els\":[\"0:6200:76:697\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[142,3,142,10],\"els\":[\"0:6200:76:694\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[142,11,142,27],\"els\":[\"0:6200:76:694\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[142,27,142,28],\"els\":[\"0:6200:76:694\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[143,3,143,10],\"els\":[\"0:6711:1195\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[143,11,143,31],\"els\":[\"0:6711:1195\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[143,31,143,32],\"els\":[\"0:6711:1195\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[144,3,144,12],\"els\":[\"0:7003\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[144,13,144,33],\"els\":[\"0:7003\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[144,33,144,34],\"els\":[\"0:7003\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[145,3,145,12],\"els\":[\"0:6968\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[145,13,145,26],\"els\":[\"0:6968\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[145,26,145,27],\"els\":[\"0:6968\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[146,3,146,12],\"els\":[\"0:6200:76:692:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[146,13,146,20],\"els\":[\"0:6200:76:692:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[146,20,146,21],\"els\":[\"0:6200:76:692:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[147,3,147,12],\"els\":[\"0:6919\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[147,13,147,21],\"els\":[\"0:6919\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[147,21,147,22],\"els\":[\"0:6919\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[148,3,148,12],\"els\":[\"0:6918\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[148,13,148,16],\"els\":[\"0:6918\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[148,16,148,17],\"els\":[\"0:6918\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[149,3,149,12],\"els\":[\"0:6684:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[149,13,149,22],\"els\":[\"0:6684:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[149,22,149,23],\"els\":[\"0:6684:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[150,3,150,12],\"els\":[\"0:6974\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[150,13,150,18],\"els\":[\"0:6974\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[150,18,150,19],\"els\":[\"0:6974\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[151,3,151,12],\"els\":[\"0:6957:2\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[151,13,151,22],\"els\":[\"0:6957:2\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[151,22,151,23],\"els\":[\"0:6957:2\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[152,3,152,12],\"els\":[\"0:6711:1179\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[152,13,152,18],\"els\":[\"0:6711:1179\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[152,18,152,19],\"els\":[\"0:6711:1179\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[153,3,153,12],\"els\":[\"0:6711:1210\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[153,13,153,20],\"els\":[\"0:6711:1210\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[153,20,153,21],\"els\":[\"0:6711:1210\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[158,3,158,11],\"els\":[\"0:6683\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[158,12,158,23],\"els\":[\"0:6683\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[158,23,158,24],\"els\":[\"0:6683\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[159,3,159,11],\"els\":[\"0:6711:1187\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[159,12,159,28],\"els\":[\"0:6711:1187\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[159,28,159,29],\"els\":[\"0:6711:1187\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[160,3,160,11],\"els\":[\"0:6706\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[160,12,160,24],\"els\":[\"0:6706\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[160,24,160,25],\"els\":[\"0:6706\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[161,3,161,11],\"els\":[\"0:6686\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[161,12,161,26],\"els\":[\"0:6686\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[161,26,161,27],\"els\":[\"0:6686\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[162,3,162,10],\"els\":[\"0:6728\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[162,11,162,34],\"els\":[\"0:6728\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[162,34,162,35],\"els\":[\"0:6728\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[163,3,163,10],\"els\":[\"0:6747\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[163,11,163,33],\"els\":[\"0:6747\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[163,33,163,34],\"els\":[\"0:6747\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[164,3,164,11],\"els\":[\"0:6200:76:610\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[164,12,164,22],\"els\":[\"0:6200:76:610\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[164,22,164,23],\"els\":[\"0:6200:76:610\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[164,23,164,24],\"els\":[\"0:6200:76:610\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[164,24,164,25],\"els\":[\"0:6200:76:610\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[164,25,164,26],\"els\":[\"0:6200:76:610\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[165,3,165,11],\"els\":[\"0:6912\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[165,12,165,22],\"els\":[\"0:6912\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[165,22,165,23],\"els\":[\"0:6912\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[166,3,166,11],\"els\":[\"0:6873:4\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[166,12,166,25],\"els\":[\"0:6873:4\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[166,25,166,26],\"els\":[\"0:6873:4\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[167,3,167,12],\"els\":[\"0:6711:1210\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[167,13,167,27],\"els\":[\"0:6711:1210\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[167,27,167,28],\"els\":[\"0:6711:1210\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[168,3,168,12],\"els\":[\"0:6967\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[168,13,168,19],\"els\":[\"0:6967\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[168,19,168,20],\"els\":[\"0:6967\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[169,3,169,12],\"els\":[\"0:6681\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[169,13,169,24],\"els\":[\"0:6681\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[169,24,169,25],\"els\":[\"0:6681\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[170,3,170,12],\"els\":[\"0:6758\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[170,13,170,27],\"els\":[\"0:6758\"],\"ct\":{\"0\":0,\"1\":1}},{\"tk\":[170,27,170,28],\"els\":[\"0:6758\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[171,3,171,12],\"els\":[\"0:6772\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[171,13,171,27],\"els\":[\"0:6772\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[171,27,171,28],\"els\":[\"0:6772\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[176,3,176,8],\"els\":[\"0:6904\"],\"ct\":{\"1\":1,\"0\":5}},{\"tk\":[176,9,176,17],\"els\":[\"0:6904\"],\"ct\":{\"1\":1,\"0\":5}},{\"tk\":[176,18,176,23],\"els\":[\"0:6904\"],\"ct\":{\"1\":1,\"0\":5}},{\"tk\":[176,23,176,24],\"els\":[\"0:6904\"],\"ct\":{\"1\":1,\"0\":5}},{\"tk\":[184,3,184,11],\"els\":[\"0:6200:76:549\"],\"ct\":{\"1\":1,\"0\":5}},{\"tk\":[184,12,184,35],\"els\":[\"0:6200:76:549\"],\"ct\":{\"1\":1,\"0\":5}},{\"tk\":[184,35,184,36],\"els\":[\"0:6200:76:549\"],\"ct\":{\"1\":1,\"0\":5}},{\"tk\":[184,36,184,40],\"els\":[\"0:6200:76:549\"],\"ct\":{\"0\":5,\"1\":1}},{\"tk\":[184,40,184,41],\"els\":[\"0:6200:76:549\"],\"ct\":{\"0\":5,\"1\":1}},{\"tk\":[184,41,184,42],\"els\":[\"0:6200:76:549\"],\"ct\":{\"0\":5,\"1\":1}}]},\"0\":{\"records\":[{\"tk\":[58,53,58,55],\"els\":[\"0:6728\",\"0:6727\",\"0:6729\"]},{\"tk\":[166,3,166,19],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,19,166,20],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,20,166,21],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,21,166,29],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,29,166,30],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,30,166,36],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,36,166,37],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,37,166,38],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,38,166,46],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,46,166,47],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,47,166,48],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,48,166,49],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,50,166,51],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,51,166,59],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,59,166,60],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,60,166,61],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,61,166,62],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,63,166,64],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,64,166,72],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,72,166,73],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,73,166,74],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[166,74,166,75],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,20,167,21],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,21,167,29],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,29,167,30],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,30,167,31],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,31,167,32],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,33,167,34],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,34,167,42],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,42,167,43],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,43,167,46],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,46,167,47],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,48,167,49],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,49,167,57],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,57,167,58],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,58,167,62],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,62,167,63],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,64,167,65],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,65,167,73],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,73,167,74],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,74,167,79],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[167,79,167,80],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,20,168,21],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,21,168,29],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,29,168,30],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,30,168,33],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,33,168,34],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,34,168,35],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,35,168,43],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,43,168,44],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,44,168,45],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,45,168,46],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[168,46,168,47],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[171,3,171,11],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[171,12,171,23],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[171,24,171,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[171,26,171,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[171,27,171,35],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[171,35,171,36],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[171,36,171,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[171,45,171,46],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[171,46,171,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[171,51,171,52],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[174,3,174,4],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,5,188,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,14,188,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,15,188,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,20,188,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,21,188,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,25,188,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,27,188,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,28,188,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,37,188,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,38,188,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,43,188,44],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,44,188,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,48,188,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,50,188,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,51,188,58],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,58,188,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,60,188,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,62,188,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[188,67,188,68],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,5,189,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,14,189,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,15,189,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,21,189,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,22,189,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,26,189,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,28,189,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,29,189,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,38,189,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,39,189,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,45,189,46],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,46,189,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,50,189,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,52,189,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,53,189,60],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,60,189,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,62,189,63],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,64,189,68],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[189,68,189,69],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[192,5,192,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[192,14,192,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[192,15,192,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[192,21,192,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[192,23,192,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[192,28,192,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,5,197,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,14,197,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,15,197,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,20,197,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,21,197,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,25,197,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,27,197,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,28,197,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,37,197,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,38,197,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,43,197,44],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,44,197,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,48,197,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,50,197,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,51,197,62],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,62,197,63],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,64,197,65],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,66,197,70],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[197,70,197,71],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[200,5,200,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[200,14,200,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[200,15,200,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[200,21,200,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[200,23,200,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[200,30,200,31],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,5,212,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,14,212,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,15,212,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,21,212,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,22,212,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,26,212,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,28,212,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,29,212,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,38,212,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,39,212,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,45,212,46],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,46,212,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,50,212,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,52,212,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,53,212,60],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,60,212,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,62,212,63],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,64,212,68],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[212,68,212,69],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,5,221,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,14,221,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,15,221,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,22,221,23],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,23,221,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,27,221,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,29,221,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,30,221,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,39,221,40],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,40,221,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,47,221,48],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,48,221,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,52,221,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,54,221,55],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,55,221,62],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,62,221,63],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,64,221,65],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,66,221,70],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[221,70,221,71],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[222,5,222,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[222,14,222,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[222,15,222,19],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[222,19,222,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[222,20,222,23],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[222,23,222,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[222,24,222,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[222,29,222,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[222,31,222,36],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[222,36,222,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[223,5,223,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[223,14,223,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[223,15,223,19],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[223,19,223,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[223,20,223,23],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[223,23,223,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[223,24,223,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[223,29,223,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[223,31,223,36],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[223,36,223,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[224,5,224,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[224,14,224,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[224,15,224,19],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[224,20,224,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[224,22,224,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[224,28,224,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[225,5,225,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[225,14,225,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[225,15,225,19],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[225,20,225,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[225,22,225,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[225,28,225,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[228,5,228,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[228,14,228,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[228,15,228,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[228,21,228,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[228,22,228,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[228,26,228,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[228,28,228,32],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[228,32,228,33],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[230,5,230,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[230,14,230,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[230,15,230,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[230,21,230,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[230,22,230,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[230,26,230,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[230,28,230,33],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[230,33,230,34],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,5,236,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,14,236,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,15,236,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,21,236,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,22,236,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,26,236,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,28,236,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,29,236,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,38,236,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,39,236,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,45,236,46],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,46,236,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,50,236,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,52,236,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,53,236,58],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,58,236,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,60,236,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,62,236,66],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[236,66,236,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,5,242,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,14,242,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,15,242,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,22,242,23],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,23,242,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,27,242,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,29,242,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,30,242,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,39,242,40],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,40,242,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,47,242,48],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,48,242,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,52,242,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,54,242,55],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,55,242,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,59,242,60],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,61,242,62],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,63,242,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[242,67,242,68],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,5,255,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,14,255,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,15,255,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,20,255,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,21,255,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,25,255,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,27,255,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,28,255,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,37,255,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,38,255,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,43,255,44],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,44,255,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,48,255,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,50,255,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,51,255,58],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,58,255,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,60,255,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,62,255,66],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[255,66,255,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,5,256,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,14,256,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,15,256,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,20,256,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,21,256,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,24,256,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,25,256,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,31,256,32],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,33,256,34],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,34,256,42],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,42,256,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,43,256,44],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,44,256,48],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,48,256,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[256,49,256,50],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,5,258,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,14,258,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,15,258,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,20,258,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,21,258,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,24,258,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,25,258,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,31,258,32],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,33,258,34],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,34,258,42],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,42,258,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,43,258,44],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,44,258,48],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,48,258,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[258,49,258,50],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,5,279,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,14,279,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,15,279,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,20,279,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,21,279,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,25,279,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,27,279,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,28,279,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,37,279,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,38,279,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,43,279,44],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,44,279,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,48,279,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,50,279,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,51,279,58],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,58,279,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,60,279,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,62,279,69],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[279,69,279,70],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,5,280,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,14,280,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,15,280,19],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,19,280,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,20,280,23],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,24,280,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,26,280,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,27,280,36],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,36,280,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,37,280,41],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,41,280,42],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,42,280,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,46,280,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,48,280,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,49,280,54],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,54,280,55],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,56,280,57],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,58,280,63],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[280,63,280,64],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,5,281,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,14,281,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,15,281,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,22,281,23],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,23,281,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,27,281,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,29,281,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,30,281,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,39,281,40],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,40,281,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,47,281,48],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,48,281,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,52,281,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,54,281,55],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,55,281,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,61,281,62],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,63,281,64],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,65,281,71],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[281,71,281,72],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,5,282,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,14,282,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,15,282,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,22,282,23],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,23,282,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,27,282,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,29,282,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,30,282,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,39,282,40],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,40,282,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,47,282,48],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,48,282,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,52,282,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,54,282,55],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,55,282,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,59,282,60],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,61,282,62],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,63,282,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[282,67,282,68],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,5,291,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,14,291,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,15,291,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,20,291,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,21,291,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,25,291,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,27,291,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,28,291,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,37,291,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,38,291,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,43,291,44],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,44,291,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,48,291,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,50,291,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,51,291,57],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,57,291,58],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,59,291,60],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,61,291,65],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[291,65,291,66],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[294,5,294,11],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[294,11,294,12],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[295,5,295,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[295,14,295,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[295,15,295,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[295,20,295,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[295,21,295,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[295,25,295,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[295,27,295,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[295,29,295,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,5,305,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,14,305,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,15,305,20],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,20,305,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,21,305,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,25,305,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,27,305,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,28,305,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,37,305,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,38,305,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,43,305,44],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,44,305,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,48,305,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,50,305,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,51,305,57],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,57,305,58],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,59,305,60],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,61,305,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[305,67,305,68],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,5,315,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,14,315,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,15,315,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,21,315,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,22,315,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,26,315,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,28,315,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,29,315,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,38,315,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,39,315,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,45,315,46],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,46,315,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,50,315,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,52,315,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,53,315,58],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,58,315,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,60,315,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,62,315,66],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[315,66,315,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,5,325,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,14,325,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,15,325,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,21,325,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,22,325,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,26,325,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,28,325,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,29,325,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,38,325,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,39,325,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,45,325,46],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,46,325,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,50,325,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,52,325,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,53,325,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,59,325,60],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,61,325,62],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,63,325,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[325,67,325,68],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,5,335,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,14,335,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,15,335,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,21,335,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,22,335,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,26,335,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,28,335,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,29,335,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,38,335,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,39,335,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,45,335,46],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,46,335,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,50,335,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,52,335,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,53,335,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,59,335,60],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,61,335,62],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,63,335,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[335,67,335,68],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,5,344,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,14,344,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,15,344,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,24,344,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,25,344,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,29,344,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,31,344,32],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,32,344,41],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,41,344,42],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,42,344,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,51,344,52],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,52,344,55],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,56,344,57],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,58,344,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,60,344,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,67,344,68],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,69,344,70],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,71,344,78],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[344,78,344,79],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,5,352,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,14,352,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,15,352,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,22,352,23],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,23,352,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,27,352,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,29,352,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,30,352,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,39,352,40],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,40,352,47],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,47,352,48],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,48,352,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,52,352,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,54,352,55],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,55,352,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,61,352,62],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,63,352,64],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,65,352,69],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[352,69,352,70],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,5,360,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,14,360,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,15,360,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,21,360,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,22,360,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,26,360,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,28,360,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,29,360,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,38,360,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,39,360,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,45,360,46],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,46,360,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,50,360,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,52,360,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,53,360,58],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,58,360,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,60,360,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,62,360,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[360,67,360,68],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[361,5,361,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[361,14,361,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[361,15,361,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[361,25,361,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[361,27,361,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[361,29,361,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[362,5,362,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[362,14,362,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[362,15,362,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[362,25,362,26],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[362,27,362,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[362,29,362,30],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,5,367,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,14,367,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,15,367,23],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,23,367,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,24,367,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,28,367,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,30,367,31],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,31,367,40],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,40,367,41],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,41,367,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,49,367,50],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,50,367,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,54,367,55],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,56,367,57],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,57,367,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,61,367,62],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,63,367,64],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,65,367,69],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[367,69,367,70],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,5,373,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,14,373,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,15,373,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,21,373,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,22,373,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,26,373,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,28,373,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,29,373,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,38,373,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,39,373,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,45,373,46],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,46,373,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,50,373,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,52,373,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,53,373,58],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,58,373,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,60,373,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,62,373,66],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[373,66,373,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[377,5,377,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[377,14,377,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[377,15,377,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[377,24,377,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[377,25,377,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[377,28,377,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[377,29,377,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[377,39,377,40],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[377,41,377,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[377,43,377,44],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[378,5,378,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[378,14,378,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[378,15,378,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[378,24,378,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[378,25,378,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[378,28,378,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[378,29,378,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[378,38,378,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[378,40,378,42],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[378,42,378,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[379,5,379,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[379,14,379,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[379,15,379,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[379,24,379,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[379,25,379,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[379,28,379,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[379,29,379,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[379,38,379,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[379,40,379,42],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[379,42,379,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[380,5,380,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[380,14,380,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[380,15,380,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[380,24,380,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[380,25,380,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[380,28,380,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[380,29,380,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[380,38,380,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[380,40,380,42],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[380,42,380,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[381,5,381,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[381,14,381,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[381,15,381,24],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[381,24,381,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[381,25,381,28],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[381,28,381,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[381,29,381,37],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[381,38,381,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[381,40,381,42],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[381,42,381,43],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,5,387,14],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,14,387,15],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,15,387,21],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,21,387,22],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,22,387,25],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,26,387,27],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,28,387,29],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,29,387,38],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,38,387,39],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,39,387,45],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,45,387,46],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,46,387,49],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,50,387,51],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,52,387,53],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,53,387,58],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,58,387,59],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,60,387,61],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,62,387,66],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[387,66,387,67],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[388,5,388,9],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[388,9,388,10],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[389,3,389,4],\"els\":[\"0:6383\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[392,3,392,11],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[392,12,392,23],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[392,24,392,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[392,26,392,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[392,27,392,35],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[392,35,392,36],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[392,36,392,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[392,45,392,46],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[392,46,392,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[392,51,392,52],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[395,3,395,4],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,5,409,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,14,409,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,15,409,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,20,409,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,21,409,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,25,409,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,27,409,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,28,409,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,37,409,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,38,409,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,43,409,44],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,44,409,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,48,409,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,50,409,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,51,409,58],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,58,409,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,60,409,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,62,409,69],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[409,69,409,70],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,5,410,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,14,410,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,15,410,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,21,410,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,22,410,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,26,410,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,28,410,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,29,410,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,38,410,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,39,410,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,45,410,46],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,46,410,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,50,410,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,52,410,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,53,410,60],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,60,410,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,62,410,63],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,64,410,68],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[410,68,410,69],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[413,5,413,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[413,14,413,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[413,15,413,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[413,21,413,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[413,23,413,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[413,28,413,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,5,418,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,14,418,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,15,418,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,20,418,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,21,418,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,25,418,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,27,418,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,28,418,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,37,418,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,38,418,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,43,418,44],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,44,418,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,48,418,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,50,418,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,51,418,62],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,62,418,63],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,64,418,65],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,66,418,70],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[418,70,418,71],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[421,5,421,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[421,14,421,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[421,15,421,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[421,21,421,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[421,23,421,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[421,30,421,31],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,5,433,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,14,433,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,15,433,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,21,433,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,22,433,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,26,433,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,28,433,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,29,433,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,38,433,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,39,433,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,45,433,46],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,46,433,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,50,433,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,52,433,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,53,433,60],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,60,433,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,62,433,63],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,64,433,68],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[433,68,433,69],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,5,442,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,14,442,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,15,442,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,22,442,23],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,23,442,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,27,442,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,29,442,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,30,442,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,39,442,40],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,40,442,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,47,442,48],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,48,442,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,52,442,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,54,442,55],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,55,442,62],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,62,442,63],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,64,442,65],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,66,442,70],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[442,70,442,71],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[443,5,443,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[443,14,443,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[443,15,443,19],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[443,19,443,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[443,20,443,23],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[443,23,443,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[443,24,443,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[443,29,443,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[443,31,443,36],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[443,36,443,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[444,5,444,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[444,14,444,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[444,15,444,19],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[444,19,444,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[444,20,444,23],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[444,23,444,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[444,24,444,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[444,29,444,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[444,31,444,36],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[444,36,444,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[445,5,445,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[445,14,445,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[445,15,445,19],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[445,20,445,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[445,22,445,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[445,28,445,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[446,5,446,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[446,14,446,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[446,15,446,19],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[446,20,446,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[446,22,446,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[446,28,446,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[449,5,449,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[449,14,449,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[449,15,449,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[449,21,449,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[449,22,449,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[449,26,449,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[449,28,449,32],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[449,32,449,33],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[451,5,451,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[451,14,451,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[451,15,451,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[451,21,451,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[451,22,451,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[451,26,451,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[451,28,451,33],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[451,33,451,34],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,5,457,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,14,457,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,15,457,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,21,457,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,22,457,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,26,457,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,28,457,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,29,457,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,38,457,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,39,457,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,45,457,46],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,46,457,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,50,457,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,52,457,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,53,457,58],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,58,457,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,60,457,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,62,457,66],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[457,66,457,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,5,463,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,14,463,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,15,463,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,22,463,23],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,23,463,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,27,463,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,29,463,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,30,463,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,39,463,40],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,40,463,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,47,463,48],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,48,463,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,52,463,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,54,463,55],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,55,463,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,59,463,60],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,61,463,62],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,63,463,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[463,67,463,68],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,5,476,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,14,476,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,15,476,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,20,476,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,21,476,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,25,476,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,27,476,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,28,476,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,37,476,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,38,476,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,43,476,44],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,44,476,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,48,476,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,50,476,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,51,476,58],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,58,476,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,60,476,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,62,476,66],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[476,66,476,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,5,477,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,14,477,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,15,477,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,20,477,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,21,477,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,24,477,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,25,477,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,31,477,32],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,33,477,34],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,34,477,42],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,42,477,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,43,477,44],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,44,477,48],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,48,477,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[477,49,477,50],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,5,479,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,14,479,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,15,479,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,20,479,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,21,479,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,24,479,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,25,479,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,31,479,32],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,33,479,34],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,34,479,42],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,42,479,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,43,479,44],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,44,479,48],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,48,479,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[479,49,479,50],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,5,500,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,14,500,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,15,500,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,20,500,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,21,500,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,25,500,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,27,500,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,28,500,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,37,500,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,38,500,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,43,500,44],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,44,500,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,48,500,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,50,500,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,51,500,58],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,58,500,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,60,500,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,62,500,69],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[500,69,500,70],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,5,501,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,14,501,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,15,501,19],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,19,501,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,20,501,23],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,24,501,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,26,501,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,27,501,36],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,36,501,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,37,501,41],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,41,501,42],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,42,501,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,46,501,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,48,501,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,49,501,54],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,54,501,55],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,56,501,57],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,58,501,63],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[501,63,501,64],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,5,502,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,14,502,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,15,502,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,22,502,23],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,23,502,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,27,502,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,29,502,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,30,502,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,39,502,40],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,40,502,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,47,502,48],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,48,502,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,52,502,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,54,502,55],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,55,502,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,61,502,62],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,63,502,64],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,65,502,71],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[502,71,502,72],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,5,503,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,14,503,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,15,503,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,22,503,23],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,23,503,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,27,503,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,29,503,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,30,503,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,39,503,40],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,40,503,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,47,503,48],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,48,503,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,52,503,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,54,503,55],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,55,503,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,59,503,60],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,61,503,62],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,63,503,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[503,67,503,68],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,5,512,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,14,512,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,15,512,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,20,512,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,21,512,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,25,512,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,27,512,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,28,512,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,37,512,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,38,512,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,43,512,44],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,44,512,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,48,512,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,50,512,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,51,512,57],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,57,512,58],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,59,512,60],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,61,512,65],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[512,65,512,66],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[515,5,515,11],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[515,11,515,12],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[516,5,516,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[516,14,516,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[516,15,516,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[516,20,516,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[516,21,516,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[516,25,516,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[516,27,516,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[516,29,516,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,5,526,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,14,526,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,15,526,20],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,20,526,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,21,526,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,25,526,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,27,526,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,28,526,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,37,526,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,38,526,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,43,526,44],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,44,526,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,48,526,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,50,526,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,51,526,57],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,57,526,58],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,59,526,60],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,61,526,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[526,67,526,68],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,5,536,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,14,536,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,15,536,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,21,536,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,22,536,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,26,536,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,28,536,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,29,536,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,38,536,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,39,536,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,45,536,46],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,46,536,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,50,536,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,52,536,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,53,536,58],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,58,536,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,60,536,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,62,536,66],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[536,66,536,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,5,546,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,14,546,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,15,546,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,21,546,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,22,546,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,26,546,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,28,546,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,29,546,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,38,546,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,39,546,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,45,546,46],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,46,546,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,50,546,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,52,546,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,53,546,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,59,546,60],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,61,546,62],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,63,546,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[546,67,546,68],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,5,556,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,14,556,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,15,556,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,21,556,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,22,556,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,26,556,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,28,556,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,29,556,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,38,556,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,39,556,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,45,556,46],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,46,556,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,50,556,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,52,556,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,53,556,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,59,556,60],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,61,556,62],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,63,556,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[556,67,556,68],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,5,565,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,14,565,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,15,565,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,24,565,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,25,565,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,29,565,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,31,565,32],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,32,565,41],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,41,565,42],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,42,565,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,51,565,52],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,52,565,55],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,56,565,57],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,58,565,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,60,565,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,67,565,68],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,69,565,70],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,71,565,78],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[565,78,565,79],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,5,573,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,14,573,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,15,573,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,22,573,23],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,23,573,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,27,573,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,29,573,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,30,573,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,39,573,40],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,40,573,47],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,47,573,48],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,48,573,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,52,573,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,54,573,55],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,55,573,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,61,573,62],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,63,573,64],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,65,573,69],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[573,69,573,70],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,5,581,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,14,581,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,15,581,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,21,581,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,22,581,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,26,581,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,28,581,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,29,581,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,38,581,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,39,581,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,45,581,46],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,46,581,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,50,581,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,52,581,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,53,581,58],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,58,581,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,60,581,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,62,581,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[581,67,581,68],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[582,5,582,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[582,14,582,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[582,15,582,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[582,25,582,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[582,27,582,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[582,29,582,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[583,5,583,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[583,14,583,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[583,15,583,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[583,25,583,26],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[583,27,583,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[583,29,583,30],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,5,588,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,14,588,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,15,588,23],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,23,588,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,24,588,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,28,588,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,30,588,31],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,31,588,40],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,40,588,41],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,41,588,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,49,588,50],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,50,588,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,54,588,55],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,56,588,57],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,57,588,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,61,588,62],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,63,588,64],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,65,588,69],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[588,69,588,70],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,5,594,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,14,594,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,15,594,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,21,594,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,22,594,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,26,594,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,28,594,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,29,594,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,38,594,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,39,594,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,45,594,46],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,46,594,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,50,594,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,52,594,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,53,594,58],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,58,594,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,60,594,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,62,594,66],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[594,66,594,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[598,5,598,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[598,14,598,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[598,15,598,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[598,24,598,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[598,25,598,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[598,28,598,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[598,29,598,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[598,39,598,40],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[598,41,598,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[598,43,598,44],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[599,5,599,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[599,14,599,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[599,15,599,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[599,24,599,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[599,25,599,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[599,28,599,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[599,29,599,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[599,38,599,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[599,40,599,42],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[599,42,599,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[600,5,600,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[600,14,600,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[600,15,600,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[600,24,600,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[600,25,600,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[600,28,600,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[600,29,600,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[600,38,600,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[600,40,600,42],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[600,42,600,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[601,5,601,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[601,14,601,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[601,15,601,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[601,24,601,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[601,25,601,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[601,28,601,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[601,29,601,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[601,38,601,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[601,40,601,42],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[601,42,601,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[602,5,602,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[602,14,602,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[602,15,602,24],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[602,24,602,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[602,25,602,28],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[602,28,602,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[602,29,602,37],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[602,38,602,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[602,40,602,42],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[602,42,602,43],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,5,608,14],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,14,608,15],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,15,608,21],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,21,608,22],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,22,608,25],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,26,608,27],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,28,608,29],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,29,608,38],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,38,608,39],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,39,608,45],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,45,608,46],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,46,608,49],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,50,608,51],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,52,608,53],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,53,608,58],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,58,608,59],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,60,608,61],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,62,608,66],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[608,66,608,67],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[609,5,609,9],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[609,9,609,10],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[610,3,610,4],\"els\":[\"0:6384\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[613,3,613,11],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[613,12,613,23],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[613,24,613,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[613,26,613,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[613,27,613,35],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[613,35,613,36],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[613,36,613,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[613,45,613,46],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[613,46,613,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[613,51,613,52],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[616,3,616,4],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,5,630,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,14,630,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,15,630,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,20,630,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,21,630,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,25,630,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,27,630,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,28,630,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,37,630,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,38,630,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,43,630,44],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,44,630,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,48,630,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,50,630,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,51,630,58],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,58,630,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,60,630,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,62,630,69],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[630,69,630,70],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,5,631,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,14,631,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,15,631,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,21,631,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,22,631,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,26,631,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,28,631,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,29,631,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,38,631,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,39,631,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,45,631,46],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,46,631,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,50,631,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,52,631,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,53,631,60],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,60,631,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,62,631,63],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,64,631,68],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[631,68,631,69],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[634,5,634,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[634,14,634,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[634,15,634,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[634,21,634,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[634,23,634,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[634,28,634,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,5,639,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,14,639,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,15,639,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,20,639,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,21,639,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,25,639,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,27,639,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,28,639,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,37,639,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,38,639,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,43,639,44],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,44,639,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,48,639,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,50,639,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,51,639,62],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,62,639,63],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,64,639,65],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,66,639,70],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[639,70,639,71],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[642,5,642,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[642,14,642,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[642,15,642,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[642,21,642,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[642,23,642,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[642,30,642,31],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,5,654,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,14,654,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,15,654,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,21,654,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,22,654,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,26,654,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,28,654,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,29,654,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,38,654,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,39,654,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,45,654,46],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,46,654,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,50,654,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,52,654,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,53,654,60],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,60,654,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,62,654,63],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,64,654,68],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[654,68,654,69],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,5,663,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,14,663,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,15,663,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,22,663,23],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,23,663,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,27,663,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,29,663,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,30,663,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,39,663,40],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,40,663,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,47,663,48],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,48,663,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,52,663,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,54,663,55],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,55,663,62],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,62,663,63],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,64,663,65],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,66,663,70],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[663,70,663,71],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[664,5,664,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[664,14,664,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[664,15,664,19],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[664,19,664,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[664,20,664,23],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[664,23,664,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[664,24,664,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[664,29,664,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[664,31,664,36],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[664,36,664,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[665,5,665,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[665,14,665,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[665,15,665,19],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[665,19,665,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[665,20,665,23],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[665,23,665,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[665,24,665,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[665,29,665,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[665,31,665,36],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[665,36,665,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[666,5,666,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[666,14,666,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[666,15,666,19],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[666,20,666,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[666,22,666,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[666,28,666,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[667,5,667,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[667,14,667,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[667,15,667,19],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[667,20,667,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[667,22,667,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[667,28,667,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[670,5,670,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[670,14,670,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[670,15,670,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[670,21,670,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[670,22,670,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[670,26,670,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[670,28,670,32],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[670,32,670,33],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[672,5,672,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[672,14,672,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[672,15,672,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[672,21,672,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[672,22,672,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[672,26,672,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[672,28,672,33],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[672,33,672,34],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,5,678,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,14,678,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,15,678,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,21,678,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,22,678,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,26,678,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,28,678,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,29,678,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,38,678,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,39,678,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,45,678,46],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,46,678,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,50,678,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,52,678,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,53,678,58],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,58,678,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,60,678,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,62,678,66],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[678,66,678,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,5,684,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,14,684,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,15,684,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,22,684,23],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,23,684,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,27,684,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,29,684,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,30,684,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,39,684,40],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,40,684,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,47,684,48],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,48,684,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,52,684,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,54,684,55],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,55,684,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,59,684,60],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,61,684,62],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,63,684,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[684,67,684,68],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,5,697,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,14,697,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,15,697,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,20,697,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,21,697,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,25,697,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,27,697,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,28,697,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,37,697,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,38,697,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,43,697,44],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,44,697,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,48,697,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,50,697,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,51,697,58],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,58,697,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,60,697,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,62,697,66],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[697,66,697,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,5,698,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,14,698,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,15,698,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,20,698,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,21,698,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,24,698,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,25,698,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,31,698,32],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,33,698,34],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,34,698,42],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,42,698,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,43,698,44],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,44,698,48],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,48,698,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[698,49,698,50],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,5,700,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,14,700,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,15,700,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,20,700,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,21,700,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,24,700,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,25,700,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,31,700,32],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,33,700,34],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,34,700,42],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,42,700,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,43,700,44],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,44,700,48],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,48,700,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[700,49,700,50],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,5,721,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,14,721,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,15,721,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,20,721,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,21,721,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,25,721,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,27,721,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,28,721,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,37,721,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,38,721,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,43,721,44],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,44,721,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,48,721,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,50,721,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,51,721,58],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,58,721,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,60,721,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,62,721,69],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[721,69,721,70],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,5,722,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,14,722,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,15,722,19],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,19,722,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,20,722,23],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,24,722,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,26,722,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,27,722,36],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,36,722,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,37,722,41],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,41,722,42],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,42,722,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,46,722,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,48,722,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,49,722,54],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,54,722,55],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,56,722,57],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,58,722,63],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[722,63,722,64],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,5,723,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,14,723,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,15,723,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,22,723,23],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,23,723,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,27,723,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,29,723,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,30,723,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,39,723,40],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,40,723,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,47,723,48],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,48,723,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,52,723,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,54,723,55],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,55,723,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,61,723,62],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,63,723,64],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,65,723,71],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[723,71,723,72],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,5,724,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,14,724,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,15,724,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,22,724,23],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,23,724,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,27,724,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,29,724,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,30,724,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,39,724,40],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,40,724,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,47,724,48],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,48,724,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,52,724,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,54,724,55],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,55,724,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,59,724,60],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,61,724,62],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,63,724,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[724,67,724,68],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,5,733,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,14,733,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,15,733,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,20,733,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,21,733,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,25,733,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,27,733,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,28,733,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,37,733,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,38,733,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,43,733,44],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,44,733,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,48,733,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,50,733,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,51,733,57],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,57,733,58],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,59,733,60],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,61,733,65],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[733,65,733,66],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[736,5,736,11],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[736,11,736,12],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[737,5,737,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[737,14,737,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[737,15,737,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[737,20,737,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[737,21,737,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[737,25,737,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[737,27,737,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[737,29,737,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,5,747,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,14,747,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,15,747,20],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,20,747,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,21,747,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,25,747,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,27,747,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,28,747,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,37,747,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,38,747,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,43,747,44],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,44,747,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,48,747,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,50,747,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,51,747,57],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,57,747,58],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,59,747,60],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,61,747,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[747,67,747,68],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,5,757,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,14,757,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,15,757,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,21,757,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,22,757,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,26,757,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,28,757,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,29,757,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,38,757,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,39,757,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,45,757,46],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,46,757,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,50,757,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,52,757,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,53,757,58],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,58,757,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,60,757,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,62,757,66],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[757,66,757,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,5,767,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,14,767,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,15,767,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,21,767,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,22,767,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,26,767,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,28,767,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,29,767,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,38,767,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,39,767,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,45,767,46],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,46,767,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,50,767,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,52,767,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,53,767,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,59,767,60],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,61,767,62],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,63,767,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[767,67,767,68],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,5,777,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,14,777,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,15,777,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,21,777,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,22,777,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,26,777,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,28,777,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,29,777,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,38,777,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,39,777,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,45,777,46],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,46,777,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,50,777,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,52,777,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,53,777,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,59,777,60],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,61,777,62],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,63,777,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[777,67,777,68],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,5,786,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,14,786,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,15,786,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,24,786,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,25,786,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,29,786,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,31,786,32],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,32,786,41],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,41,786,42],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,42,786,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,51,786,52],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,52,786,55],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,56,786,57],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,58,786,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,60,786,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,67,786,68],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,69,786,70],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,71,786,78],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[786,78,786,79],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,5,794,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,14,794,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,15,794,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,22,794,23],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,23,794,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,27,794,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,29,794,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,30,794,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,39,794,40],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,40,794,47],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,47,794,48],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,48,794,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,52,794,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,54,794,55],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,55,794,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,61,794,62],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,63,794,64],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,65,794,69],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[794,69,794,70],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,5,802,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,14,802,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,15,802,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,21,802,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,22,802,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,26,802,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,28,802,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,29,802,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,38,802,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,39,802,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,45,802,46],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,46,802,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,50,802,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,52,802,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,53,802,58],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,58,802,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,60,802,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,62,802,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[802,67,802,68],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[803,5,803,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[803,14,803,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[803,15,803,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[803,25,803,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[803,27,803,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[803,29,803,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[804,5,804,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[804,14,804,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[804,15,804,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[804,25,804,26],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[804,27,804,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[804,29,804,30],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,5,809,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,14,809,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,15,809,23],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,23,809,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,24,809,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,28,809,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,30,809,31],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,31,809,40],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,40,809,41],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,41,809,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,49,809,50],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,50,809,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,54,809,55],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,56,809,57],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,57,809,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,61,809,62],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,63,809,64],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,65,809,69],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[809,69,809,70],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,5,815,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,14,815,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,15,815,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,21,815,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,22,815,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,26,815,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,28,815,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,29,815,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,38,815,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,39,815,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,45,815,46],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,46,815,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,50,815,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,52,815,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,53,815,58],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,58,815,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,60,815,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,62,815,66],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[815,66,815,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[819,5,819,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[819,14,819,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[819,15,819,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[819,24,819,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[819,25,819,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[819,28,819,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[819,29,819,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[819,39,819,40],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[819,41,819,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[819,43,819,44],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[820,5,820,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[820,14,820,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[820,15,820,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[820,24,820,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[820,25,820,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[820,28,820,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[820,29,820,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[820,38,820,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[820,40,820,42],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[820,42,820,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[821,5,821,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[821,14,821,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[821,15,821,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[821,24,821,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[821,25,821,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[821,28,821,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[821,29,821,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[821,38,821,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[821,40,821,42],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[821,42,821,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[822,5,822,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[822,14,822,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[822,15,822,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[822,24,822,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[822,25,822,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[822,28,822,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[822,29,822,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[822,38,822,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[822,40,822,42],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[822,42,822,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[823,5,823,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[823,14,823,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[823,15,823,24],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[823,24,823,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[823,25,823,28],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[823,28,823,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[823,29,823,37],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[823,38,823,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[823,40,823,42],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[823,42,823,43],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,5,829,14],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,14,829,15],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,15,829,21],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,21,829,22],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,22,829,25],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,26,829,27],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,28,829,29],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,29,829,38],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,38,829,39],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,39,829,45],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,45,829,46],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,46,829,49],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,50,829,51],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,52,829,53],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,53,829,58],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,58,829,59],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,60,829,61],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,62,829,66],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[829,66,829,67],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[830,5,830,9],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[830,9,830,10],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[831,3,831,4],\"els\":[\"0:6385\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[834,3,834,9],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[834,9,834,10],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[835,3,835,15],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[835,15,835,16],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[835,16,835,23],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[835,23,835,24],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[835,24,835,27],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[835,28,835,30],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[835,31,835,42],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[835,42,835,43],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[836,3,836,15],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[836,15,836,16],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[836,16,836,22],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[836,22,836,23],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[836,23,836,26],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[836,27,836,29],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[836,30,836,41],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[836,41,836,42],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[837,3,837,7],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[837,7,837,8],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[840,3,840,5],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[840,6,840,7],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[840,7,840,22],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[840,23,840,25],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[840,26,840,28],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[840,28,840,29],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[840,30,840,31],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[841,5,841,13],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[841,13,841,14],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[841,14,841,15],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[841,15,841,16],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[842,5,842,20],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[842,21,842,22],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[842,23,842,25],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[842,25,842,26],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[843,3,843,4],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[845,3,845,19],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[845,20,845,21],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[845,21,845,22],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[845,22,845,23],\"els\":[\"0:6379\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[848,3,848,5],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[848,6,848,7],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[848,7,848,22],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[848,23,848,25],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[848,26,848,28],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[848,28,848,29],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[848,30,848,31],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[849,5,849,13],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[849,13,849,14],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[849,14,849,15],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[849,15,849,16],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[850,5,850,20],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[850,21,850,22],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[850,23,850,25],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[850,25,850,26],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[851,3,851,4],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[853,3,853,19],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[853,20,853,21],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[853,21,853,22],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[853,22,853,23],\"els\":[\"0:6380\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[857,3,857,34],\"els\":[\"0:6711:1187\",\"0:6681\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[857,34,857,35],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[857,35,857,51],\"els\":[\"0:6711:1187\",\"0:6681\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[857,52,857,53],\"els\":[\"0:6711:1187\",\"0:6681\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[857,54,857,58],\"els\":[\"0:6711:1187\",\"0:6681\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[857,58,857,59],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[860,3,860,32],\"els\":[\"0:6710#out:1\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[860,32,860,33],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[860,33,860,40],\"els\":[\"0:6710#out:1\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[860,41,860,42],\"els\":[\"0:6710#out:1\",\"0:6710\",\"0:6681\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[860,43,860,47],\"els\":[\"0:6710\",\"0:6681\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[860,47,860,48],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[864,3,864,34],\"els\":[\"0:6686\",\"0:6758\",\"0:6681\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[864,34,864,35],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[864,35,864,49],\"els\":[\"0:6686\",\"0:6758\",\"0:6681\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[864,50,864,51],\"els\":[\"0:6686\",\"0:6758\",\"0:6681\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[864,52,864,55],\"els\":[\"0:6686\",\"0:6758\",\"0:6681\",\"0:6132\",\"0:7007:517\"]},{\"tk\":[864,55,864,56],\"els\":[\"0:6132\",\"0:7007:517\"]},{\"tk\":[880,3,880,4],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[881,5,881,34],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[881,34,881,35],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[881,35,881,45],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[881,46,881,47],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[881,48,881,49],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[881,49,881,57],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[881,57,881,58],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[881,58,881,61],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[881,61,881,62],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[882,3,882,4],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[885,3,885,4],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[889,5,889,18],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[889,18,889,19],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[889,19,889,22],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[889,22,889,23],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[889,23,889,26],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[889,27,889,28],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[889,29,889,40],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[889,40,889,41],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[890,5,890,18],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[890,18,890,19],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[890,19,890,22],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[890,22,890,23],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[890,23,890,26],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[890,27,890,28],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[890,29,890,40],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[890,40,890,41],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[891,5,891,18],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[891,18,891,19],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[891,19,891,22],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[891,22,891,23],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[891,23,891,26],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[891,27,891,28],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[891,29,891,34],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[891,34,891,35],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[892,5,892,19],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[892,19,892,20],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[892,20,892,21],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[892,21,892,22],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[893,3,893,4],\"els\":[\"0:6844\",\"0:6733\",\"0:7009:517\"]},{\"tk\":[946,7,946,8],\"els\":[\"0:7007:517\"]},{\"tk\":[947,9,947,17],\"els\":[\"0:7007:517\"]},{\"tk\":[947,18,947,21],\"els\":[\"0:7007:517\"]},{\"tk\":[947,21,947,22],\"els\":[\"0:7007:517\"]},{\"tk\":[948,9,948,17],\"els\":[\"0:7007:517\"]},{\"tk\":[948,18,948,22],\"els\":[\"0:7007:517\"]},{\"tk\":[948,22,948,23],\"els\":[\"0:7007:517\"]},{\"tk\":[949,9,949,17],\"els\":[\"0:7007:517\"]},{\"tk\":[949,18,949,22],\"els\":[\"0:7007:517\"]},{\"tk\":[949,22,949,23],\"els\":[\"0:7007:517\"]},{\"tk\":[950,9,950,17],\"els\":[\"0:7007:517\"]},{\"tk\":[950,18,950,22],\"els\":[\"0:7007:517\"]},{\"tk\":[950,22,950,23],\"els\":[\"0:7007:517\"]},{\"tk\":[951,9,951,16],\"els\":[\"0:7007:517\"]},{\"tk\":[951,17,951,25],\"els\":[\"0:7007:517\"]},{\"tk\":[951,25,951,26],\"els\":[\"0:7007:517\"]},{\"tk\":[952,9,952,17],\"els\":[\"0:7007:517\"]},{\"tk\":[952,18,952,20],\"els\":[\"0:7007:517\"]},{\"tk\":[952,20,952,21],\"els\":[\"0:7007:517\"]},{\"tk\":[953,9,953,17],\"els\":[\"0:7007:517\"]},{\"tk\":[953,18,953,20],\"els\":[\"0:7007:517\"]},{\"tk\":[953,20,953,21],\"els\":[\"0:7007:517\"]},{\"tk\":[954,9,954,18],\"els\":[\"0:7007:517\"]},{\"tk\":[954,19,954,24],\"els\":[\"0:7007:517\"]},{\"tk\":[954,24,954,25],\"els\":[\"0:7007:517\"]},{\"tk\":[955,9,955,18],\"els\":[\"0:7007:517\"]},{\"tk\":[955,19,955,24],\"els\":[\"0:7007:517\"]},{\"tk\":[955,24,955,25],\"els\":[\"0:7007:517\"]},{\"tk\":[958,9,958,38],\"els\":[\"0:6873:4#out:1\",\"0:7007:517\"]},{\"tk\":[958,38,958,39],\"els\":[\"0:7007:517\"]},{\"tk\":[958,39,958,45],\"els\":[\"0:6873:4#out:1\",\"0:7007:517\"]},{\"tk\":[958,46,958,47],\"els\":[\"0:6873:4#out:1\",\"0:6873:4\",\"0:7007:517\"]},{\"tk\":[959,11,959,42],\"els\":[\"0:6873:4\",\"0:7007:517\"]},{\"tk\":[959,42,959,43],\"els\":[\"0:7007:517\"]},{\"tk\":[959,43,959,56],\"els\":[\"0:6873:4\",\"0:7007:517\"]},{\"tk\":[959,56,959,57],\"els\":[\"0:7007:517\"]},{\"tk\":[962,9,962,10],\"els\":[\"0:7007:517\"]},{\"tk\":[963,11,963,40],\"els\":[\"0:6382\",\"0:7007:517\"]},{\"tk\":[963,40,963,41],\"els\":[\"0:7007:517\"]},{\"tk\":[963,41,963,48],\"els\":[\"0:6382\",\"0:7007:517\"]},{\"tk\":[963,49,963,50],\"els\":[\"0:7007:517\"]},{\"tk\":[963,51,963,60],\"els\":[\"0:7007:517\"]},{\"tk\":[963,60,963,61],\"els\":[\"0:7007:517\"]},{\"tk\":[963,61,963,68],\"els\":[\"0:7007:517\"]},{\"tk\":[963,68,963,69],\"els\":[\"0:7007:517\"]},{\"tk\":[964,11,964,40],\"els\":[\"0:6382\",\"0:7007:517\"]},{\"tk\":[964,40,964,41],\"els\":[\"0:7007:517\"]},{\"tk\":[964,41,964,48],\"els\":[\"0:6382\",\"0:7007:517\"]},{\"tk\":[964,49,964,50],\"els\":[\"0:7007:517\"]},{\"tk\":[964,51,964,60],\"els\":[\"0:7007:517\"]},{\"tk\":[964,60,964,61],\"els\":[\"0:7007:517\"]},{\"tk\":[964,61,964,69],\"els\":[\"0:7007:517\"]},{\"tk\":[964,69,964,70],\"els\":[\"0:7007:517\"]},{\"tk\":[966,9,966,10],\"els\":[\"0:7007:517\"]},{\"tk\":[978,9,978,38],\"els\":[\"0:6254:130#out:1\",\"0:7007:517\"]},{\"tk\":[978,38,978,39],\"els\":[\"0:7007:517\"]},{\"tk\":[978,39,978,45],\"els\":[\"0:6254:130#out:1\",\"0:7007:517\"]},{\"tk\":[978,46,978,47],\"els\":[\"0:6254:130#out:1\",\"0:6254:130\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[979,11,979,40],\"els\":[\"0:6254:130\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[979,40,979,41],\"els\":[\"0:7007:517\"]},{\"tk\":[979,41,979,48],\"els\":[\"0:6254:130\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[979,49,979,50],\"els\":[\"0:6254:130\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[980,11,980,40],\"els\":[\"0:6254:130\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[980,40,980,41],\"els\":[\"0:7007:517\"]},{\"tk\":[980,41,980,48],\"els\":[\"0:6254:130\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[980,48,980,49],\"els\":[\"0:7007:517\"]},{\"tk\":[981,9,981,38],\"els\":[\"0:6254:131#out:1\",\"0:7007:517\"]},{\"tk\":[981,38,981,39],\"els\":[\"0:7007:517\"]},{\"tk\":[981,39,981,43],\"els\":[\"0:6254:131#out:1\",\"0:7007:517\"]},{\"tk\":[981,44,981,45],\"els\":[\"0:6254:131#out:1\",\"0:6254:131\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[982,11,982,40],\"els\":[\"0:6254:131\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[982,40,982,41],\"els\":[\"0:7007:517\"]},{\"tk\":[982,41,982,47],\"els\":[\"0:6254:131\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[982,48,982,49],\"els\":[\"0:6254:131\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[982,50,982,55],\"els\":[\"0:6254:131\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:6254:212:215\",\"0:7007:517\"]},{\"tk\":[982,55,982,56],\"els\":[\"0:7007:517\"]},{\"tk\":[983,9,983,11],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[983,12,983,13],\"els\":[\"0:6254:142\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[983,14,983,43],\"els\":[\"0:6254:142\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[983,43,983,44],\"els\":[\"0:7007:517\"]},{\"tk\":[983,44,983,50],\"els\":[\"0:6254:142\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[983,50,983,51],\"els\":[\"0:7007:517\"]},{\"tk\":[984,9,984,11],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[984,12,984,13],\"els\":[\"0:6254:142\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[984,14,984,43],\"els\":[\"0:6254:142\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[984,43,984,44],\"els\":[\"0:7007:517\"]},{\"tk\":[984,44,984,48],\"els\":[\"0:6254:142\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[984,48,984,49],\"els\":[\"0:7007:517\"]},{\"tk\":[985,9,985,11],\"els\":[\"0:6254:142\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[985,12,985,13],\"els\":[\"0:7007:517\"]},{\"tk\":[985,13,985,15],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[985,16,985,18],\"els\":[\"0:6254:142\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[985,19,985,21],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[985,21,985,22],\"els\":[\"0:7007:517\"]},{\"tk\":[985,23,985,24],\"els\":[\"0:7007:517\"]},{\"tk\":[986,11,986,13],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[986,14,986,15],\"els\":[\"0:6254:142\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[986,16,986,18],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[986,18,986,19],\"els\":[\"0:7007:517\"]},{\"tk\":[987,9,987,10],\"els\":[\"0:7007:517\"]},{\"tk\":[989,9,989,38],\"els\":[\"0:6254:121#out:1\",\"0:7007:517\"]},{\"tk\":[989,38,989,39],\"els\":[\"0:7007:517\"]},{\"tk\":[989,39,989,46],\"els\":[\"0:6254:121#out:1\",\"0:7007:517\"]},{\"tk\":[989,47,989,48],\"els\":[\"0:6254:121#out:1\",\"0:6254:142\",\"0:6254:123\",\"0:6254:120\",\"0:6254:126\",\"0:7007:517\"]},{\"tk\":[989,49,989,51],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[989,51,989,52],\"els\":[\"0:7007:517\"]},{\"tk\":[995,9,995,38],\"els\":[\"0:6254:164#out:1\",\"0:7007:517\"]},{\"tk\":[995,38,995,39],\"els\":[\"0:7007:517\"]},{\"tk\":[995,39,995,42],\"els\":[\"0:6254:164#out:1\",\"0:7007:517\"]},{\"tk\":[995,43,995,44],\"els\":[\"0:6254:164#out:1\",\"0:6254:164\",\"0:7007:517\"]},{\"tk\":[996,11,996,40],\"els\":[\"0:6254:164\",\"0:7007:517\"]},{\"tk\":[996,40,996,41],\"els\":[\"0:7007:517\"]},{\"tk\":[996,41,996,48],\"els\":[\"0:6254:164\",\"0:7007:517\"]},{\"tk\":[996,48,996,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1001,9,1001,38],\"els\":[\"0:6254:211#out:1\",\"0:7007:517\"]},{\"tk\":[1001,38,1001,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1001,39,1001,46],\"els\":[\"0:6254:211#out:1\",\"0:7007:517\"]},{\"tk\":[1001,47,1001,48],\"els\":[\"0:6254:211#out:1\",\"0:6254:211\",\"0:7007:517\"]},{\"tk\":[1002,11,1002,40],\"els\":[\"0:6254:211\",\"0:7007:517\"]},{\"tk\":[1002,40,1002,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1002,41,1002,44],\"els\":[\"0:6254:211\",\"0:7007:517\"]},{\"tk\":[1002,45,1002,46],\"els\":[\"0:6254:211\",\"0:7007:517\"]},{\"tk\":[1002,47,1002,55],\"els\":[\"0:6254:211\",\"0:6254:199:202\",\"0:7007:517\"]},{\"tk\":[1002,55,1002,56],\"els\":[\"0:7007:517\"]},{\"tk\":[1007,9,1007,38],\"els\":[\"0:6253:925#out:1\",\"0:7007:517\"]},{\"tk\":[1007,38,1007,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1007,39,1007,45],\"els\":[\"0:6253:925#out:1\",\"0:7007:517\"]},{\"tk\":[1007,46,1007,47],\"els\":[\"0:6253:925#out:1\",\"0:6253:925\",\"0:7007:517\"]},{\"tk\":[1007,48,1007,52],\"els\":[\"0:6253:925\",\"0:6253:914\",\"0:7007:517\"]},{\"tk\":[1007,52,1007,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1010,9,1010,11],\"els\":[\"0:6253:897\",\"0:7007:517\"]},{\"tk\":[1010,12,1010,13],\"els\":[\"0:7007:517\"]},{\"tk\":[1010,13,1010,42],\"els\":[\"0:6253:897\",\"0:7007:517\"]},{\"tk\":[1010,42,1010,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1010,43,1010,50],\"els\":[\"0:6253:897\",\"0:7007:517\"]},{\"tk\":[1010,51,1010,53],\"els\":[\"0:6253:897\",\"0:7007:517\"]},{\"tk\":[1010,54,1010,58],\"els\":[\"0:6253:897\",\"0:7007:517\"]},{\"tk\":[1010,58,1010,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1010,60,1010,61],\"els\":[\"0:7007:517\"]},{\"tk\":[1017,11,1017,40],\"els\":[\"0:6253:897\",\"0:6253:911#out:1\",\"0:7007:517\"]},{\"tk\":[1017,40,1017,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1017,41,1017,46],\"els\":[\"0:6253:897\",\"0:6253:911#out:1\",\"0:7007:517\"]},{\"tk\":[1017,47,1017,48],\"els\":[\"0:6253:897\",\"0:6253:911#out:1\",\"0:6253:902\",\"0:6253:898\",\"0:6253:901\",\"0:7007:517\"]},{\"tk\":[1017,49,1017,53],\"els\":[\"0:6253:902\",\"0:6253:898\",\"0:6253:897\",\"0:6253:901\",\"0:7007:517\"]},{\"tk\":[1017,53,1017,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1020,9,1020,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1020,11,1020,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1020,16,1020,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1027,11,1027,40],\"els\":[\"0:6253:911#out:1\",\"0:7007:517\"]},{\"tk\":[1027,40,1027,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1027,41,1027,46],\"els\":[\"0:6253:911#out:1\",\"0:7007:517\"]},{\"tk\":[1027,47,1027,48],\"els\":[\"0:6253:911#out:1\",\"0:6253:909\",\"0:6253:905\",\"0:6253:897\",\"0:6253:908\",\"0:7007:517\"]},{\"tk\":[1028,13,1028,42],\"els\":[\"0:6253:909\",\"0:6253:905\",\"0:6253:897\",\"0:6253:908\",\"0:7007:517\"]},{\"tk\":[1028,42,1028,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1028,43,1028,50],\"els\":[\"0:6253:909\",\"0:6253:905\",\"0:6253:897\",\"0:6253:908\",\"0:7007:517\"]},{\"tk\":[1028,50,1028,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1031,9,1031,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1036,9,1036,38],\"els\":[\"0:6253:1014:922#out:1\",\"0:7007:517\"]},{\"tk\":[1036,38,1036,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1036,39,1036,56],\"els\":[\"0:6253:1014:922#out:1\",\"0:7007:517\"]},{\"tk\":[1036,57,1036,58],\"els\":[\"0:6253:1014:922#out:1\",\"0:6253:1014:922\",\"0:7007:517\"]},{\"tk\":[1036,59,1036,63],\"els\":[\"0:6253:1014:922\",\"0:7007:517\"]},{\"tk\":[1036,64,1036,65],\"els\":[\"0:6253:1014:922\",\"0:7007:517\"]},{\"tk\":[1037,11,1037,40],\"els\":[\"0:6253:1014:922\",\"0:7007:517\"]},{\"tk\":[1037,40,1037,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1037,41,1037,46],\"els\":[\"0:6253:1014:922\",\"0:7007:517\"]},{\"tk\":[1037,46,1037,47],\"els\":[\"0:7007:517\"]},{\"tk\":[1040,9,1040,38],\"els\":[\"0:6253:919#out:1\",\"0:7007:517\"]},{\"tk\":[1040,38,1040,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1040,39,1040,44],\"els\":[\"0:6253:919#out:1\",\"0:7007:517\"]},{\"tk\":[1040,45,1040,46],\"els\":[\"0:6253:919#out:1\",\"0:6253:919\",\"0:7007:517\"]},{\"tk\":[1040,47,1040,48],\"els\":[\"0:6253:919\",\"0:7007:517\"]},{\"tk\":[1040,48,1040,56],\"els\":[\"0:7007:517\"]},{\"tk\":[1040,56,1040,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1040,57,1040,62],\"els\":[\"0:6253:919\",\"0:7007:517\"]},{\"tk\":[1041,11,1041,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1041,12,1041,41],\"els\":[\"0:6253:919\",\"0:7007:517\"]},{\"tk\":[1041,41,1041,42],\"els\":[\"0:7007:517\"]},{\"tk\":[1041,42,1041,59],\"els\":[\"0:6253:919\",\"0:7007:517\"]},{\"tk\":[1041,59,1041,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1041,60,1041,61],\"els\":[\"0:7007:517\"]},{\"tk\":[1044,9,1044,38],\"els\":[\"0:6253:918#out:1\",\"0:7007:517\"]},{\"tk\":[1044,38,1044,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1044,39,1044,44],\"els\":[\"0:6253:918#out:1\",\"0:7007:517\"]},{\"tk\":[1044,45,1044,46],\"els\":[\"0:6253:918#out:1\",\"0:6253:918\",\"0:7007:517\"]},{\"tk\":[1045,11,1045,40],\"els\":[\"0:6253:918\",\"0:7007:517\"]},{\"tk\":[1045,40,1045,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1045,41,1045,58],\"els\":[\"0:6253:918\",\"0:7007:517\"]},{\"tk\":[1045,59,1045,60],\"els\":[\"0:6253:918\",\"0:7007:517\"]},{\"tk\":[1046,11,1046,40],\"els\":[\"0:6253:918\",\"0:7007:517\"]},{\"tk\":[1046,40,1046,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1046,41,1046,46],\"els\":[\"0:6253:918\",\"0:7007:517\"]},{\"tk\":[1046,46,1046,47],\"els\":[\"0:7007:517\"]},{\"tk\":[1049,9,1049,38],\"els\":[\"0:6968#out:1\",\"0:7007:517\"]},{\"tk\":[1049,38,1049,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1049,39,1049,52],\"els\":[\"0:6968#out:1\",\"0:7007:517\"]},{\"tk\":[1049,53,1049,54],\"els\":[\"0:6968#out:1\",\"0:6968\",\"0:7007:517\"]},{\"tk\":[1050,11,1050,42],\"els\":[\"0:6968\",\"0:7007:517\"]},{\"tk\":[1050,42,1050,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1050,43,1050,49],\"els\":[\"0:6968\",\"0:7007:517\"]},{\"tk\":[1050,49,1050,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1055,9,1055,11],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1055,12,1055,13],\"els\":[\"0:7007:517\"]},{\"tk\":[1055,13,1055,42],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1055,42,1055,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1055,43,1055,56],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1055,56,1055,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1055,58,1055,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1056,11,1056,13],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1056,14,1056,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1056,15,1056,16],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1056,16,1056,47],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1056,47,1056,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1056,48,1056,59],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1056,59,1056,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1056,61,1056,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1058,13,1058,44],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1058,44,1058,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1058,45,1058,61],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1058,62,1058,63],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1058,64,1058,68],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1058,68,1058,69],\"els\":[\"0:7007:517\"]},{\"tk\":[1059,13,1059,44],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1059,44,1059,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1059,45,1059,56],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1059,57,1059,58],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1059,59,1059,63],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1059,63,1059,64],\"els\":[\"0:7007:517\"]},{\"tk\":[1060,11,1060,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1065,11,1065,13],\"els\":[\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1065,14,1065,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1065,15,1065,16],\"els\":[\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1065,16,1065,47],\"els\":[\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1065,47,1065,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1065,48,1065,62],\"els\":[\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1065,62,1065,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1065,64,1065,65],\"els\":[\"0:7007:517\"]},{\"tk\":[1067,13,1067,44],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1067,44,1067,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1067,45,1067,59],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1067,60,1067,61],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1067,62,1067,65],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1067,65,1067,66],\"els\":[\"0:7007:517\"]},{\"tk\":[1068,13,1068,44],\"els\":[\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1068,44,1068,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1068,45,1068,59],\"els\":[\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1068,60,1068,61],\"els\":[\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1068,62,1068,66],\"els\":[\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1068,66,1068,67],\"els\":[\"0:7007:517\"]},{\"tk\":[1069,11,1069,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1072,11,1072,40],\"els\":[\"0:6686#out:1\",\"0:7007:517\"]},{\"tk\":[1072,40,1072,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1072,41,1072,46],\"els\":[\"0:6686#out:1\",\"0:7007:517\"]},{\"tk\":[1072,47,1072,48],\"els\":[\"0:6686#out:1\",\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1073,13,1073,44],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1073,44,1073,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1073,45,1073,59],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1073,59,1073,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1078,11,1078,14],\"els\":[\"0:6683\",\"0:7007:517\"]},{\"tk\":[1078,15,1078,16],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1078,17,1078,46],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1078,46,1078,47],\"els\":[\"0:7007:517\"]},{\"tk\":[1078,47,1078,52],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1078,53,1078,54],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1078,55,1078,59],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:6685\",\"0:7007:517\"]},{\"tk\":[1078,59,1078,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1079,11,1079,13],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1079,14,1079,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1079,15,1079,18],\"els\":[\"0:6683\",\"0:7007:517\"]},{\"tk\":[1079,19,1079,20],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1079,21,1079,34],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1079,34,1079,35],\"els\":[\"0:7007:517\"]},{\"tk\":[1079,36,1079,37],\"els\":[\"0:7007:517\"]},{\"tk\":[1080,13,1080,16],\"els\":[\"0:6683\",\"0:7007:517\"]},{\"tk\":[1080,17,1080,18],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1080,19,1080,32],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1080,32,1080,33],\"els\":[\"0:7007:517\"]},{\"tk\":[1081,11,1081,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1084,11,1084,40],\"els\":[\"0:6683#out:1\",\"0:7007:517\"]},{\"tk\":[1084,40,1084,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1084,41,1084,45],\"els\":[\"0:6683#out:1\",\"0:7007:517\"]},{\"tk\":[1084,46,1084,47],\"els\":[\"0:6683#out:1\",\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1084,48,1084,49],\"els\":[\"0:6683\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1084,49,1084,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1084,57,1084,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1084,58,1084,61],\"els\":[\"0:6683\",\"0:7007:517\"]},{\"tk\":[1084,61,1084,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1087,11,1087,42],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1087,42,1087,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1087,43,1087,57],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1087,58,1087,59],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1088,13,1088,42],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1088,42,1088,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1088,43,1088,47],\"els\":[\"0:6686\",\"0:6760\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1088,47,1088,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1095,11,1095,40],\"els\":[\"0:6684:2#out:1\",\"0:7007:517\"]},{\"tk\":[1095,40,1095,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1095,41,1095,50],\"els\":[\"0:6684:2#out:1\",\"0:7007:517\"]},{\"tk\":[1095,51,1095,52],\"els\":[\"0:6684:2#out:1\",\"0:6684:2\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1096,13,1096,14],\"els\":[\"0:7007:517\"]},{\"tk\":[1096,14,1096,43],\"els\":[\"0:6684:2\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1096,43,1096,44],\"els\":[\"0:7007:517\"]},{\"tk\":[1096,44,1096,48],\"els\":[\"0:6684:2\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1096,49,1096,51],\"els\":[\"0:6684:2\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1096,52,1096,60],\"els\":[\"0:6684:2\",\"0:6744\",\"0:6681\",\"0:6684:3\",\"0:7007:517\"]},{\"tk\":[1096,60,1096,61],\"els\":[\"0:7007:517\"]},{\"tk\":[1096,61,1096,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1099,11,1099,40],\"els\":[\"0:6974#out:1\",\"0:7007:517\"]},{\"tk\":[1099,40,1099,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1099,41,1099,46],\"els\":[\"0:6974#out:1\",\"0:7007:517\"]},{\"tk\":[1099,47,1099,48],\"els\":[\"0:6974#out:1\",\"0:6974\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1100,13,1100,14],\"els\":[\"0:6974\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1100,14,1100,43],\"els\":[\"0:6974\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1100,43,1100,44],\"els\":[\"0:7007:517\"]},{\"tk\":[1100,44,1100,53],\"els\":[\"0:6974\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1100,53,1100,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1105,11,1105,13],\"els\":[\"0:6973\",\"0:6972\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1105,14,1105,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1105,15,1105,44],\"els\":[\"0:6973\",\"0:6972\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1105,44,1105,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1105,45,1105,50],\"els\":[\"0:6973\",\"0:6972\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1105,50,1105,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1105,52,1105,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1109,13,1109,44],\"els\":[\"0:6970\",\"0:6973\",\"0:6972\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1109,44,1109,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1109,45,1109,51],\"els\":[\"0:6970\",\"0:6973\",\"0:6972\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1109,52,1109,53],\"els\":[\"0:6970\",\"0:6973\",\"0:6972\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1109,54,1109,59],\"els\":[\"0:6970\",\"0:6973\",\"0:6972\",\"0:6744\",\"0:6681\",\"0:6971\",\"0:7007:517\"]},{\"tk\":[1109,59,1109,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1110,11,1110,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1117,11,1117,40],\"els\":[\"0:6957:2#out:1\",\"0:7007:517\"]},{\"tk\":[1117,40,1117,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1117,41,1117,50],\"els\":[\"0:6957:2#out:1\",\"0:7007:517\"]},{\"tk\":[1117,51,1117,52],\"els\":[\"0:6957:2#out:1\",\"0:6957:2\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1118,13,1118,14],\"els\":[\"0:7007:517\"]},{\"tk\":[1118,14,1118,43],\"els\":[\"0:6957:2\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1118,43,1118,44],\"els\":[\"0:7007:517\"]},{\"tk\":[1118,44,1118,48],\"els\":[\"0:6957:2\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1118,49,1118,51],\"els\":[\"0:6957:2\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1118,52,1118,60],\"els\":[\"0:6957:2\",\"0:6744\",\"0:6681\",\"0:6957:3\",\"0:7007:517\"]},{\"tk\":[1118,60,1118,61],\"els\":[\"0:7007:517\"]},{\"tk\":[1118,61,1118,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1124,11,1124,13],\"els\":[\"0:6690\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1124,14,1124,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1124,15,1124,44],\"els\":[\"0:6690\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1124,44,1124,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1124,45,1124,49],\"els\":[\"0:6690\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1124,50,1124,51],\"els\":[\"0:6690\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1124,52,1124,59],\"els\":[\"0:6690\",\"0:6744\",\"0:6681\",\"0:6956\",\"0:7007:517\"]},{\"tk\":[1124,59,1124,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1124,61,1124,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1131,13,1131,42],\"els\":[\"0:6710#out:1\",\"0:7007:517\"]},{\"tk\":[1131,42,1131,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1131,43,1131,50],\"els\":[\"0:6710#out:1\",\"0:7007:517\"]},{\"tk\":[1131,51,1131,52],\"els\":[\"0:6710#out:1\",\"0:6693\",\"0:6691\",\"0:6690\",\"0:6692\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1131,53,1131,57],\"els\":[\"0:6693\",\"0:6691\",\"0:6690\",\"0:6692\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1131,57,1131,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1134,11,1134,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1134,13,1134,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1134,18,1134,20],\"els\":[\"0:6690\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1134,21,1134,22],\"els\":[\"0:7007:517\"]},{\"tk\":[1134,22,1134,51],\"els\":[\"0:6690\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1134,51,1134,52],\"els\":[\"0:7007:517\"]},{\"tk\":[1134,52,1134,56],\"els\":[\"0:6690\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1134,57,1134,58],\"els\":[\"0:6690\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1134,59,1134,67],\"els\":[\"0:6690\",\"0:6744\",\"0:6681\",\"0:6955\",\"0:7007:517\"]},{\"tk\":[1134,67,1134,68],\"els\":[\"0:7007:517\"]},{\"tk\":[1134,69,1134,70],\"els\":[\"0:7007:517\"]},{\"tk\":[1139,13,1139,42],\"els\":[\"0:6706#out:1\",\"0:7007:517\"]},{\"tk\":[1139,42,1139,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1139,43,1139,50],\"els\":[\"0:6706#out:1\",\"0:7007:517\"]},{\"tk\":[1139,51,1139,52],\"els\":[\"0:6706#out:1\",\"0:6706\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1140,15,1140,46],\"els\":[\"0:6706\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1140,46,1140,47],\"els\":[\"0:7007:517\"]},{\"tk\":[1140,47,1140,59],\"els\":[\"0:6706\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1140,59,1140,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1145,13,1145,42],\"els\":[\"0:6704#out:1\",\"0:7007:517\"]},{\"tk\":[1145,42,1145,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1145,43,1145,49],\"els\":[\"0:6704#out:1\",\"0:7007:517\"]},{\"tk\":[1145,50,1145,51],\"els\":[\"0:6704#out:1\",\"0:6704\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1146,15,1146,44],\"els\":[\"0:6704\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1146,44,1146,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1146,45,1146,52],\"els\":[\"0:6704\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1146,53,1146,54],\"els\":[\"0:6704\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1146,55,1146,61],\"els\":[\"0:6704\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:6705\",\"0:7007:517\"]},{\"tk\":[1146,61,1146,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1149,13,1149,17],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1149,18,1149,19],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1149,20,1149,49],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1149,49,1149,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1149,50,1149,56],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1149,56,1149,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1150,13,1150,15],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1150,16,1150,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1150,17,1150,21],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1150,22,1150,23],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1150,24,1150,28],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1150,28,1150,29],\"els\":[\"0:7007:517\"]},{\"tk\":[1150,30,1150,31],\"els\":[\"0:7007:517\"]},{\"tk\":[1152,15,1152,44],\"els\":[\"0:6708#out:1\",\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1152,44,1152,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1152,45,1152,73],\"els\":[\"0:6708#out:1\",\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1152,74,1152,75],\"els\":[\"0:6708#out:1\",\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1152,76,1152,80],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1152,80,1152,81],\"els\":[\"0:7007:517\"]},{\"tk\":[1153,13,1153,14],\"els\":[\"0:7007:517\"]},{\"tk\":[1153,15,1153,19],\"els\":[\"0:7007:517\"]},{\"tk\":[1153,20,1153,22],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1153,23,1153,24],\"els\":[\"0:7007:517\"]},{\"tk\":[1153,24,1153,28],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1153,29,1153,30],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1153,31,1153,35],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1153,35,1153,36],\"els\":[\"0:7007:517\"]},{\"tk\":[1153,37,1153,38],\"els\":[\"0:7007:517\"]},{\"tk\":[1155,15,1155,44],\"els\":[\"0:6708#out:1\",\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1155,44,1155,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1155,45,1155,73],\"els\":[\"0:6708#out:1\",\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1155,74,1155,75],\"els\":[\"0:6708#out:1\",\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1155,76,1155,80],\"els\":[\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1155,80,1155,81],\"els\":[\"0:7007:517\"]},{\"tk\":[1156,13,1156,14],\"els\":[\"0:7007:517\"]},{\"tk\":[1156,15,1156,19],\"els\":[\"0:7007:517\"]},{\"tk\":[1156,20,1156,21],\"els\":[\"0:7007:517\"]},{\"tk\":[1158,15,1158,44],\"els\":[\"0:6708#out:1\",\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1158,44,1158,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1158,45,1158,73],\"els\":[\"0:6708#out:1\",\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1158,74,1158,75],\"els\":[\"0:6708#out:1\",\"0:6708\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1158,76,1158,80],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1158,80,1158,81],\"els\":[\"0:7007:517\"]},{\"tk\":[1159,13,1159,14],\"els\":[\"0:7007:517\"]},{\"tk\":[1166,13,1166,42],\"els\":[\"0:6710#out:1\",\"0:7007:517\"]},{\"tk\":[1166,42,1166,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1166,43,1166,50],\"els\":[\"0:6710#out:1\",\"0:7007:517\"]},{\"tk\":[1166,51,1166,52],\"els\":[\"0:6710#out:1\",\"0:6707\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1166,53,1166,60],\"els\":[\"0:6707\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1166,61,1166,62],\"els\":[\"0:6707\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1167,15,1167,44],\"els\":[\"0:6707\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1167,44,1167,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1167,45,1167,73],\"els\":[\"0:6707\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1167,73,1167,74],\"els\":[\"0:7007:517\"]},{\"tk\":[1170,13,1170,44],\"els\":[\"0:6706\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1170,44,1170,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1170,45,1170,57],\"els\":[\"0:6706\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1170,58,1170,59],\"els\":[\"0:6706\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1171,15,1171,44],\"els\":[\"0:6706\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1171,44,1171,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1171,45,1171,73],\"els\":[\"0:6706\",\"0:6702\",\"0:6690\",\"0:6703\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1171,73,1171,74],\"els\":[\"0:7007:517\"]},{\"tk\":[1174,11,1174,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1179,11,1179,40],\"els\":[\"0:6711:1187#out:1\",\"0:7007:517\"]},{\"tk\":[1179,40,1179,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1179,41,1179,50],\"els\":[\"0:6711:1187#out:1\",\"0:7007:517\"]},{\"tk\":[1179,51,1179,52],\"els\":[\"0:6711:1187#out:1\",\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1180,13,1180,44],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1180,44,1180,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1180,45,1180,61],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1180,61,1180,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1185,11,1185,40],\"els\":[\"0:6711:1179#out:1\",\"0:7007:517\"]},{\"tk\":[1185,40,1185,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1185,41,1185,46],\"els\":[\"0:6711:1179#out:1\",\"0:7007:517\"]},{\"tk\":[1185,47,1185,48],\"els\":[\"0:6711:1179#out:1\",\"0:6711:1179\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1185,49,1185,53],\"els\":[\"0:6711:1179\",\"0:6744\",\"0:6681\",\"0:6711:1216\",\"0:7007:517\"]},{\"tk\":[1185,53,1185,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1191,11,1191,40],\"els\":[\"0:6711:1210#out:1\",\"0:7007:517\"]},{\"tk\":[1191,40,1191,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1191,41,1191,48],\"els\":[\"0:6711:1210#out:1\",\"0:7007:517\"]},{\"tk\":[1191,49,1191,50],\"els\":[\"0:6711:1210#out:1\",\"0:6711:1210\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1192,13,1192,44],\"els\":[\"0:6711:1210\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1192,44,1192,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1192,45,1192,59],\"els\":[\"0:6711:1210\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1192,59,1192,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1197,11,1197,13],\"els\":[\"0:6711:1207\",\"0:6711:1204\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1197,14,1197,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1197,15,1197,44],\"els\":[\"0:6711:1207\",\"0:6711:1204\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1197,44,1197,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1197,45,1197,52],\"els\":[\"0:6711:1207\",\"0:6711:1204\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1197,52,1197,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1197,54,1197,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1199,13,1199,42],\"els\":[\"0:6711:1211\",\"0:7007:517\"]},{\"tk\":[1199,42,1199,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1199,43,1199,48],\"els\":[\"0:6711:1211\",\"0:7007:517\"]},{\"tk\":[1199,49,1199,50],\"els\":[\"0:6711:1211\",\"0:6711:1207\",\"0:6711:1204\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1200,15,1200,44],\"els\":[\"0:6711:1211\",\"0:6711:1207\",\"0:6711:1204\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1200,44,1200,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1200,45,1200,52],\"els\":[\"0:6711:1211\",\"0:6711:1207\",\"0:6711:1204\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1200,52,1200,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1201,11,1201,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1206,11,1206,40],\"els\":[\"0:6711:1183#out:1\",\"0:7007:517\"]},{\"tk\":[1206,40,1206,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1206,41,1206,46],\"els\":[\"0:6711:1183#out:1\",\"0:7007:517\"]},{\"tk\":[1206,47,1206,48],\"els\":[\"0:6711:1183#out:1\",\"0:6711:1183\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1207,13,1207,42],\"els\":[\"0:6711:1183\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1207,42,1207,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1207,43,1207,48],\"els\":[\"0:6711:1183\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1207,49,1207,50],\"els\":[\"0:6711:1183\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1208,13,1208,42],\"els\":[\"0:6711:1183\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1208,42,1208,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1208,43,1208,52],\"els\":[\"0:6711:1183\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1208,52,1208,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1211,11,1211,40],\"els\":[\"0:6711:1195#out:1\",\"0:7007:517\"]},{\"tk\":[1211,40,1211,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1211,41,1211,61],\"els\":[\"0:6711:1195#out:1\",\"0:7007:517\"]},{\"tk\":[1211,62,1211,63],\"els\":[\"0:6711:1195#out:1\",\"0:6711:1195\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1211,64,1211,65],\"els\":[\"0:6711:1195\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1211,65,1211,72],\"els\":[\"0:7007:517\"]},{\"tk\":[1211,72,1211,73],\"els\":[\"0:7007:517\"]},{\"tk\":[1212,13,1212,14],\"els\":[\"0:6711:1195\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1212,14,1212,22],\"els\":[\"0:7007:517\"]},{\"tk\":[1212,22,1212,23],\"els\":[\"0:7007:517\"]},{\"tk\":[1212,23,1212,28],\"els\":[\"0:6711:1195\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1212,28,1212,29],\"els\":[\"0:7007:517\"]},{\"tk\":[1212,29,1212,58],\"els\":[\"0:6711:1195\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1212,58,1212,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1212,59,1212,64],\"els\":[\"0:6711:1195\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1212,64,1212,65],\"els\":[\"0:7007:517\"]},{\"tk\":[1212,65,1212,66],\"els\":[\"0:7007:517\"]},{\"tk\":[1215,11,1215,40],\"els\":[\"0:6711:1215#out:1\",\"0:7007:517\"]},{\"tk\":[1215,40,1215,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1215,41,1215,62],\"els\":[\"0:6711:1215#out:1\",\"0:7007:517\"]},{\"tk\":[1215,63,1215,64],\"els\":[\"0:6711:1215#out:1\",\"0:6711:1215\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1216,13,1216,42],\"els\":[\"0:6711:1215\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1216,42,1216,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1216,43,1216,63],\"els\":[\"0:6711:1215\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1216,63,1216,64],\"els\":[\"0:7007:517\"]},{\"tk\":[1219,11,1219,40],\"els\":[\"0:6711:1184#out:1\",\"0:7007:517\"]},{\"tk\":[1219,40,1219,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1219,41,1219,47],\"els\":[\"0:6711:1184#out:1\",\"0:7007:517\"]},{\"tk\":[1219,48,1219,49],\"els\":[\"0:6711:1184#out:1\",\"0:6711:1184\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1220,13,1220,42],\"els\":[\"0:6711:1184\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1220,42,1220,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1220,43,1220,48],\"els\":[\"0:6711:1184\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1220,49,1220,50],\"els\":[\"0:6711:1184\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1221,13,1221,42],\"els\":[\"0:6711:1184\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1221,42,1221,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1221,43,1221,64],\"els\":[\"0:6711:1184\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1221,64,1221,65],\"els\":[\"0:7007:517\"]},{\"tk\":[1226,11,1226,42],\"els\":[\"0:6711:1210\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1226,42,1226,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1226,43,1226,57],\"els\":[\"0:6711:1210\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1226,58,1226,59],\"els\":[\"0:6711:1210\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1226,60,1226,64],\"els\":[\"0:6711:1210\",\"0:6711:1182\",\"0:6711:1180\",\"0:6744\",\"0:6681\",\"0:6711:1209\",\"0:7007:517\"]},{\"tk\":[1226,64,1226,65],\"els\":[\"0:7007:517\"]},{\"tk\":[1233,11,1233,13],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1233,14,1233,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1233,15,1233,44],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1233,44,1233,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1233,45,1233,54],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1233,54,1233,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1233,56,1233,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1234,13,1234,44],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1234,44,1234,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1234,45,1234,59],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1234,60,1234,61],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1234,62,1234,66],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1234,66,1234,67],\"els\":[\"0:7007:517\"]},{\"tk\":[1237,13,1237,42],\"els\":[\"0:6699#out:1\",\"0:7007:517\"]},{\"tk\":[1237,42,1237,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1237,43,1237,51],\"els\":[\"0:6699#out:1\",\"0:7007:517\"]},{\"tk\":[1237,52,1237,53],\"els\":[\"0:6699#out:1\",\"0:6699\",\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1237,54,1237,59],\"els\":[\"0:6699\",\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1237,60,1237,61],\"els\":[\"0:6699\",\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1238,15,1238,44],\"els\":[\"0:6699\",\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1238,44,1238,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1238,45,1238,50],\"els\":[\"0:6699\",\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1238,50,1238,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1243,13,1243,42],\"els\":[\"0:6770\",\"0:6744\",\"0:6681\",\"0:6770#out:1\",\"0:7007:517\"]},{\"tk\":[1243,42,1243,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1243,43,1243,51],\"els\":[\"0:6770\",\"0:6744\",\"0:6681\",\"0:6770#out:1\",\"0:7007:517\"]},{\"tk\":[1243,52,1243,53],\"els\":[\"0:6770\",\"0:6744\",\"0:6681\",\"0:6770#out:1\",\"0:7007:517\"]},{\"tk\":[1243,54,1243,58],\"els\":[\"0:6770\",\"0:6744\",\"0:6681\",\"0:6771\",\"0:7007:517\"]},{\"tk\":[1243,58,1243,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1244,11,1244,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1244,13,1244,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1244,18,1244,19],\"els\":[\"0:7007:517\"]},{\"tk\":[1245,13,1245,15],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1245,16,1245,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1245,17,1245,48],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1245,48,1245,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1245,49,1245,63],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1245,63,1245,64],\"els\":[\"0:7007:517\"]},{\"tk\":[1245,65,1245,66],\"els\":[\"0:7007:517\"]},{\"tk\":[1249,15,1249,44],\"els\":[\"0:6699#out:1\",\"0:7007:517\"]},{\"tk\":[1249,44,1249,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1249,45,1249,53],\"els\":[\"0:6699#out:1\",\"0:7007:517\"]},{\"tk\":[1249,54,1249,55],\"els\":[\"0:6699#out:1\",\"0:6774\",\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1249,56,1249,60],\"els\":[\"0:6774\",\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1249,60,1249,61],\"els\":[\"0:7007:517\"]},{\"tk\":[1250,15,1250,46],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1250,46,1250,47],\"els\":[\"0:7007:517\"]},{\"tk\":[1250,47,1250,61],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1250,62,1250,63],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1250,64,1250,69],\"els\":[\"0:6775\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1250,69,1250,70],\"els\":[\"0:7007:517\"]},{\"tk\":[1251,13,1251,14],\"els\":[\"0:7007:517\"]},{\"tk\":[1254,13,1254,42],\"els\":[\"0:6770#out:1\",\"0:7007:517\"]},{\"tk\":[1254,42,1254,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1254,43,1254,51],\"els\":[\"0:6770#out:1\",\"0:7007:517\"]},{\"tk\":[1254,52,1254,53],\"els\":[\"0:6770#out:1\",\"0:6770\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1255,15,1255,44],\"els\":[\"0:6770\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1255,44,1255,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1255,45,1255,51],\"els\":[\"0:6770\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1255,51,1255,52],\"els\":[\"0:7007:517\"]},{\"tk\":[1256,11,1256,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1261,11,1261,42],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1261,42,1261,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1261,43,1261,59],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1261,60,1261,61],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1262,13,1262,42],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1262,42,1262,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1262,43,1262,49],\"els\":[\"0:6711:1187\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1262,49,1262,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1263,9,1263,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1263,11,1263,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1263,16,1263,18],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1263,19,1263,20],\"els\":[\"0:7007:517\"]},{\"tk\":[1263,20,1263,51],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1263,51,1263,52],\"els\":[\"0:7007:517\"]},{\"tk\":[1263,52,1263,63],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1263,63,1263,64],\"els\":[\"0:7007:517\"]},{\"tk\":[1263,65,1263,66],\"els\":[\"0:7007:517\"]},{\"tk\":[1265,11,1265,13],\"els\":[\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1265,14,1265,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1265,15,1265,46],\"els\":[\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1265,46,1265,47],\"els\":[\"0:7007:517\"]},{\"tk\":[1265,47,1265,61],\"els\":[\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1265,61,1265,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1265,63,1265,64],\"els\":[\"0:7007:517\"]},{\"tk\":[1269,13,1269,42],\"els\":[\"0:6683#out:1\",\"0:7007:517\"]},{\"tk\":[1269,42,1269,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1269,43,1269,47],\"els\":[\"0:6683#out:1\",\"0:7007:517\"]},{\"tk\":[1269,48,1269,49],\"els\":[\"0:6683#out:1\",\"0:6759\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1269,50,1269,53],\"els\":[\"0:6759\",\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1269,53,1269,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1270,13,1270,44],\"els\":[\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1270,44,1270,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1270,45,1270,59],\"els\":[\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1270,60,1270,61],\"els\":[\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1270,62,1270,67],\"els\":[\"0:6758\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1270,67,1270,68],\"els\":[\"0:7007:517\"]},{\"tk\":[1271,11,1271,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1276,11,1276,13],\"els\":[\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1276,14,1276,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1276,15,1276,46],\"els\":[\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1276,46,1276,47],\"els\":[\"0:7007:517\"]},{\"tk\":[1276,47,1276,61],\"els\":[\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1276,61,1276,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1276,63,1276,64],\"els\":[\"0:7007:517\"]},{\"tk\":[1280,13,1280,42],\"els\":[\"0:6699#out:1\",\"0:7007:517\"]},{\"tk\":[1280,42,1280,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1280,43,1280,51],\"els\":[\"0:6699#out:1\",\"0:7007:517\"]},{\"tk\":[1280,52,1280,53],\"els\":[\"0:6699#out:1\",\"0:6774\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1280,54,1280,58],\"els\":[\"0:6774\",\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1280,58,1280,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1281,13,1281,44],\"els\":[\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1281,44,1281,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1281,45,1281,59],\"els\":[\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1281,60,1281,61],\"els\":[\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1281,62,1281,67],\"els\":[\"0:6772\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1281,67,1281,68],\"els\":[\"0:7007:517\"]},{\"tk\":[1282,11,1282,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1289,11,1289,40],\"els\":[\"0:6684:2#out:1\",\"0:7007:517\"]},{\"tk\":[1289,40,1289,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1289,41,1289,50],\"els\":[\"0:6684:2#out:1\",\"0:7007:517\"]},{\"tk\":[1289,51,1289,52],\"els\":[\"0:6684:2#out:1\",\"0:6716\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1289,53,1289,58],\"els\":[\"0:6716\",\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1289,58,1289,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1290,11,1290,42],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1290,42,1290,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1290,43,1290,54],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1290,55,1290,56],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1290,57,1290,62],\"els\":[\"0:6744\",\"0:6681\",\"0:7007:517\"]},{\"tk\":[1290,62,1290,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1291,9,1291,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1296,9,1296,11],\"els\":[\"0:6966\",\"0:7007:517\"]},{\"tk\":[1296,12,1296,13],\"els\":[\"0:7007:517\"]},{\"tk\":[1296,13,1296,42],\"els\":[\"0:6966\",\"0:7007:517\"]},{\"tk\":[1296,42,1296,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1296,43,1296,52],\"els\":[\"0:6966\",\"0:7007:517\"]},{\"tk\":[1296,52,1296,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1296,54,1296,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1298,11,1298,40],\"els\":[\"0:6966\",\"0:6966#out:1\",\"0:7007:517\"]},{\"tk\":[1298,40,1298,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1298,41,1298,49],\"els\":[\"0:6966\",\"0:6966#out:1\",\"0:7007:517\"]},{\"tk\":[1298,50,1298,51],\"els\":[\"0:6966\",\"0:6966#out:1\",\"0:7007:517\"]},{\"tk\":[1299,13,1299,42],\"els\":[\"0:6966\",\"0:7007:517\"]},{\"tk\":[1299,42,1299,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1299,43,1299,48],\"els\":[\"0:6966\",\"0:7007:517\"]},{\"tk\":[1299,48,1299,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1300,9,1300,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1300,11,1300,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1300,16,1300,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1304,11,1304,40],\"els\":[\"0:6966#out:1\",\"0:7007:517\"]},{\"tk\":[1304,40,1304,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1304,41,1304,49],\"els\":[\"0:6966#out:1\",\"0:7007:517\"]},{\"tk\":[1304,50,1304,51],\"els\":[\"0:6966#out:1\",\"0:6966\",\"0:7007:517\"]},{\"tk\":[1304,52,1304,53],\"els\":[\"0:6966\",\"0:6963\",\"0:7007:517\"]},{\"tk\":[1304,53,1304,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1304,57,1304,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1305,9,1305,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1310,9,1310,38],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1310,38,1310,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1310,39,1310,70],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1310,70,1310,71],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1310,71,1310,72],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1310,72,1310,73],\"els\":[\"0:7007:517\"]},{\"tk\":[1310,74,1310,75],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1311,11,1311,40],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1311,40,1311,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1311,41,1311,49],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1311,49,1311,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1312,9,1312,38],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1312,38,1312,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1312,39,1312,70],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1312,70,1312,71],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1312,71,1312,72],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1312,72,1312,73],\"els\":[\"0:7007:517\"]},{\"tk\":[1312,74,1312,75],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1313,11,1313,40],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1313,40,1313,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1313,41,1313,49],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1313,49,1313,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1318,9,1318,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1319,11,1319,19],\"els\":[\"0:7007:517\"]},{\"tk\":[1319,20,1319,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1319,40,1319,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1319,42,1319,44],\"els\":[\"0:7007:517\"]},{\"tk\":[1319,44,1319,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1320,11,1320,19],\"els\":[\"0:7007:517\"]},{\"tk\":[1320,20,1320,37],\"els\":[\"0:7007:517\"]},{\"tk\":[1320,38,1320,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1320,40,1320,42],\"els\":[\"0:7007:517\"]},{\"tk\":[1320,42,1320,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1323,11,1323,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1323,15,1323,16],\"els\":[\"0:7007:517\"]},{\"tk\":[1323,17,1323,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1323,26,1323,27],\"els\":[\"0:7007:517\"]},{\"tk\":[1323,28,1323,29],\"els\":[\"0:7007:517\"]},{\"tk\":[1323,29,1323,58],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1323,58,1323,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1323,59,1323,67],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1323,67,1323,68],\"els\":[\"0:7007:517\"]},{\"tk\":[1323,68,1323,69],\"els\":[\"0:7007:517\"]},{\"tk\":[1323,69,1323,70],\"els\":[\"0:7007:517\"]},{\"tk\":[1323,70,1323,71],\"els\":[\"0:7007:517\"]},{\"tk\":[1327,11,1327,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,13,1328,30],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,31,1328,32],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,33,1328,34],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,34,1328,42],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,42,1328,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,43,1328,44],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,45,1328,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,47,1328,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,53,1328,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,54,1328,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,62,1328,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1328,63,1328,64],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,13,1329,19],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,19,1329,20],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,20,1329,21],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,21,1329,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,26,1329,27],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,27,1329,28],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,28,1329,29],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,29,1329,30],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,30,1329,31],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,31,1329,32],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,32,1329,40],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,41,1329,42],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,42,1329,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,43,1329,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,51,1329,52],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,52,1329,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,53,1329,72],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,72,1329,73],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,73,1329,74],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,74,1329,75],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,76,1329,77],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,77,1329,81],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,81,1329,82],\"els\":[\"0:7007:517\"]},{\"tk\":[1329,82,1329,83],\"els\":[\"0:7007:517\"]},{\"tk\":[1330,20,1330,21],\"els\":[\"0:7007:517\"]},{\"tk\":[1330,21,1330,50],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1330,50,1330,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1330,51,1330,82],\"els\":[\"0:6868\",\"0:7007:517\"]},{\"tk\":[1331,20,1331,21],\"els\":[\"0:7007:517\"]},{\"tk\":[1331,21,1331,22],\"els\":[\"0:7007:517\"]},{\"tk\":[1331,22,1331,23],\"els\":[\"0:7007:517\"]},{\"tk\":[1331,23,1331,24],\"els\":[\"0:7007:517\"]},{\"tk\":[1331,25,1331,42],\"els\":[\"0:7007:517\"]},{\"tk\":[1331,42,1331,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1331,43,1331,44],\"els\":[\"0:7007:517\"]},{\"tk\":[1332,11,1332,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1333,9,1333,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1336,9,1336,11],\"els\":[\"0:6891\",\"0:7007:517\"]},{\"tk\":[1336,12,1336,13],\"els\":[\"0:7007:517\"]},{\"tk\":[1336,13,1336,42],\"els\":[\"0:6891\",\"0:7007:517\"]},{\"tk\":[1336,42,1336,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1336,43,1336,49],\"els\":[\"0:6891\",\"0:7007:517\"]},{\"tk\":[1336,50,1336,52],\"els\":[\"0:6891\",\"0:7007:517\"]},{\"tk\":[1336,53,1336,55],\"els\":[\"0:6891\",\"0:7007:517\"]},{\"tk\":[1336,55,1336,56],\"els\":[\"0:7007:517\"]},{\"tk\":[1336,57,1336,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1344,11,1344,40],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1344,40,1344,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1344,41,1344,52],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1344,52,1344,53],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1344,53,1344,54],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1344,54,1344,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1344,56,1344,57],\"els\":[\"0:6892#out:1\",\"0:6902\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1344,58,1344,70],\"els\":[\"0:6902\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:6901\",\"0:7007:517\"]},{\"tk\":[1344,70,1344,71],\"els\":[\"0:7007:517\"]},{\"tk\":[1347,11,1347,15],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1347,16,1347,17],\"els\":[\"0:6896\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1347,18,1347,47],\"els\":[\"0:6896\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1347,47,1347,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1347,48,1347,56],\"els\":[\"0:6896\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1347,56,1347,57],\"els\":[\"0:6896\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1347,57,1347,58],\"els\":[\"0:6896\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1347,58,1347,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1347,59,1347,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1350,11,1350,40],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1350,40,1350,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1350,41,1350,48],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1350,48,1350,49],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1350,49,1350,50],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1350,50,1350,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1350,52,1350,53],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1350,54,1350,58],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1350,58,1350,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1358,11,1358,40],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1358,40,1358,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1358,41,1358,52],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1358,52,1358,53],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1358,53,1358,54],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1358,54,1358,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1358,56,1358,57],\"els\":[\"0:6892#out:1\",\"0:6902\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1358,58,1358,62],\"els\":[\"0:6902\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1358,62,1358,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1361,11,1361,15],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1361,16,1361,17],\"els\":[\"0:6896\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1361,18,1361,47],\"els\":[\"0:6896\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1361,47,1361,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1361,48,1361,56],\"els\":[\"0:6896\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1361,56,1361,57],\"els\":[\"0:6896\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1361,57,1361,58],\"els\":[\"0:6896\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1361,58,1361,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1361,59,1361,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1364,11,1364,40],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1364,40,1364,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1364,41,1364,48],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1364,48,1364,49],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1364,49,1364,50],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1364,50,1364,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1364,52,1364,53],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1364,54,1364,58],\"els\":[\"0:6896\",\"0:7007:517\"]},{\"tk\":[1364,58,1364,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1372,11,1372,40],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1372,40,1372,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1372,41,1372,52],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1372,52,1372,53],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1372,53,1372,54],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1372,54,1372,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1372,56,1372,57],\"els\":[\"0:6892#out:1\",\"0:6902\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1372,58,1372,62],\"els\":[\"0:6902\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1372,62,1372,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1377,11,1377,40],\"els\":[\"0:6893#out:1\",\"0:7007:517\"]},{\"tk\":[1377,40,1377,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1377,41,1377,57],\"els\":[\"0:6893#out:1\",\"0:7007:517\"]},{\"tk\":[1377,58,1377,59],\"els\":[\"0:6893#out:1\",\"0:6899\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1378,13,1378,44],\"els\":[\"0:6899\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1378,44,1378,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1378,45,1378,50],\"els\":[\"0:6899\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1378,51,1378,52],\"els\":[\"0:6899\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1378,53,1378,56],\"els\":[\"0:6899\",\"0:6895\",\"0:6891\",\"0:6898\",\"0:7007:517\"]},{\"tk\":[1378,56,1378,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1381,9,1381,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1381,11,1381,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1381,16,1381,18],\"els\":[\"0:6891\",\"0:7007:517\"]},{\"tk\":[1381,19,1381,20],\"els\":[\"0:7007:517\"]},{\"tk\":[1381,20,1381,49],\"els\":[\"0:6891\",\"0:7007:517\"]},{\"tk\":[1381,49,1381,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1381,50,1381,56],\"els\":[\"0:6891\",\"0:7007:517\"]},{\"tk\":[1381,57,1381,59],\"els\":[\"0:6891\",\"0:7007:517\"]},{\"tk\":[1381,60,1381,64],\"els\":[\"0:6891\",\"0:7007:517\"]},{\"tk\":[1381,64,1381,65],\"els\":[\"0:7007:517\"]},{\"tk\":[1381,66,1381,67],\"els\":[\"0:7007:517\"]},{\"tk\":[1386,11,1386,15],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1386,16,1386,17],\"els\":[\"0:6883\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1386,18,1386,47],\"els\":[\"0:6883\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1386,47,1386,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1386,48,1386,56],\"els\":[\"0:6883\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1386,56,1386,57],\"els\":[\"0:6883\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1386,57,1386,58],\"els\":[\"0:6883\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1386,58,1386,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1386,59,1386,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1389,11,1389,40],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1389,40,1389,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1389,41,1389,47],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1389,47,1389,48],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1389,48,1389,49],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1389,49,1389,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1389,51,1389,52],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1389,53,1389,57],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1389,57,1389,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1397,11,1397,40],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1397,40,1397,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1397,41,1397,52],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1397,52,1397,53],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1397,53,1397,54],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1397,54,1397,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1397,56,1397,57],\"els\":[\"0:6892#out:1\",\"0:6889\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1397,58,1397,62],\"els\":[\"0:6889\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1397,62,1397,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1400,11,1400,15],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1400,16,1400,17],\"els\":[\"0:6883\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1400,18,1400,47],\"els\":[\"0:6883\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1400,47,1400,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1400,48,1400,56],\"els\":[\"0:6883\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1400,56,1400,57],\"els\":[\"0:6883\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1400,57,1400,58],\"els\":[\"0:6883\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1400,58,1400,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1400,59,1400,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1403,11,1403,40],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1403,40,1403,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1403,41,1403,47],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1403,47,1403,48],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1403,48,1403,49],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1403,49,1403,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1403,51,1403,52],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1403,53,1403,57],\"els\":[\"0:6883\",\"0:7007:517\"]},{\"tk\":[1403,57,1403,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1412,11,1412,40],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1412,40,1412,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1412,41,1412,52],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1412,52,1412,53],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1412,53,1412,54],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1412,54,1412,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1412,56,1412,57],\"els\":[\"0:6892#out:1\",\"0:6889\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1412,58,1412,62],\"els\":[\"0:6889\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1412,62,1412,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1413,11,1413,40],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1413,40,1413,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1413,41,1413,52],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1413,52,1413,53],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1413,53,1413,54],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1413,54,1413,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1413,56,1413,57],\"els\":[\"0:6892#out:1\",\"0:6889\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1413,58,1413,70],\"els\":[\"0:6889\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:6887\",\"0:7007:517\"]},{\"tk\":[1413,70,1413,71],\"els\":[\"0:7007:517\"]},{\"tk\":[1418,11,1418,40],\"els\":[\"0:6893#out:1\",\"0:7007:517\"]},{\"tk\":[1418,40,1418,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1418,41,1418,57],\"els\":[\"0:6893#out:1\",\"0:7007:517\"]},{\"tk\":[1418,58,1418,59],\"els\":[\"0:6893#out:1\",\"0:6886\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1419,13,1419,44],\"els\":[\"0:6886\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1419,44,1419,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1419,45,1419,50],\"els\":[\"0:6886\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1419,51,1419,52],\"els\":[\"0:6886\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1419,53,1419,56],\"els\":[\"0:6886\",\"0:6882\",\"0:6891\",\"0:6885\",\"0:7007:517\"]},{\"tk\":[1419,56,1419,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1422,9,1422,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1422,11,1422,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1422,16,1422,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1427,11,1427,15],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1427,16,1427,17],\"els\":[\"0:6875\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1427,18,1427,47],\"els\":[\"0:6875\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1427,47,1427,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1427,48,1427,56],\"els\":[\"0:6875\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1427,56,1427,57],\"els\":[\"0:6875\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1427,57,1427,58],\"els\":[\"0:6875\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1427,58,1427,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1427,59,1427,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1430,11,1430,40],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1430,40,1430,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1430,41,1430,45],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1430,45,1430,46],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1430,46,1430,47],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1430,47,1430,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1430,49,1430,50],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1430,51,1430,55],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1430,55,1430,56],\"els\":[\"0:7007:517\"]},{\"tk\":[1438,11,1438,40],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1438,40,1438,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1438,41,1438,52],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1438,52,1438,53],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1438,53,1438,54],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1438,54,1438,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1438,56,1438,57],\"els\":[\"0:6892#out:1\",\"0:6880\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1438,58,1438,62],\"els\":[\"0:6880\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1438,62,1438,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1441,11,1441,15],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1441,16,1441,17],\"els\":[\"0:6875\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1441,18,1441,47],\"els\":[\"0:6875\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1441,47,1441,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1441,48,1441,56],\"els\":[\"0:6875\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1441,56,1441,57],\"els\":[\"0:6875\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1441,57,1441,58],\"els\":[\"0:6875\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1441,58,1441,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1441,59,1441,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1444,11,1444,40],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1444,40,1444,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1444,41,1444,45],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1444,45,1444,46],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1444,46,1444,47],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1444,47,1444,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1444,49,1444,50],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1444,51,1444,55],\"els\":[\"0:6875\",\"0:7007:517\"]},{\"tk\":[1444,55,1444,56],\"els\":[\"0:7007:517\"]},{\"tk\":[1453,11,1453,40],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1453,40,1453,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1453,41,1453,52],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1453,52,1453,53],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1453,53,1453,54],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1453,54,1453,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1453,56,1453,57],\"els\":[\"0:6892#out:1\",\"0:6880\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1453,58,1453,62],\"els\":[\"0:6880\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1453,62,1453,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1454,11,1454,40],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1454,40,1454,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1454,41,1454,52],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1454,52,1454,53],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1454,53,1454,54],\"els\":[\"0:6892#out:1\",\"0:7007:517\"]},{\"tk\":[1454,54,1454,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1454,56,1454,57],\"els\":[\"0:6892#out:1\",\"0:6880\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1454,58,1454,61],\"els\":[\"0:6880\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:6878\",\"0:7007:517\"]},{\"tk\":[1454,61,1454,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1459,11,1459,40],\"els\":[\"0:6893#out:1\",\"0:7007:517\"]},{\"tk\":[1459,40,1459,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1459,41,1459,57],\"els\":[\"0:6893#out:1\",\"0:7007:517\"]},{\"tk\":[1459,58,1459,59],\"els\":[\"0:6893#out:1\",\"0:6876\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1460,13,1460,44],\"els\":[\"0:6876\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1460,44,1460,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1460,45,1460,50],\"els\":[\"0:6876\",\"0:6874\",\"0:6891\",\"0:6877\",\"0:7007:517\"]},{\"tk\":[1460,50,1460,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1463,9,1463,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1470,9,1470,17],\"els\":[\"0:6915\",\"0:7007:517\"]},{\"tk\":[1470,18,1470,19],\"els\":[\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1470,20,1470,21],\"els\":[\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1470,21,1470,22],\"els\":[\"0:7007:517\"]},{\"tk\":[1471,9,1471,11],\"els\":[\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1471,12,1471,13],\"els\":[\"0:7007:517\"]},{\"tk\":[1472,11,1472,40],\"els\":[\"0:6915#out:1\",\"0:7007:517\"]},{\"tk\":[1472,40,1472,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1472,41,1472,54],\"els\":[\"0:6915#out:1\",\"0:7007:517\"]},{\"tk\":[1472,55,1472,56],\"els\":[\"0:6915#out:1\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1472,57,1472,65],\"els\":[\"0:6915\",\"0:7007:517\"]},{\"tk\":[1472,65,1472,66],\"els\":[\"0:7007:517\"]},{\"tk\":[1473,11,1473,40],\"els\":[\"0:6913#out:1\",\"0:7007:517\"]},{\"tk\":[1473,40,1473,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1473,41,1473,52],\"els\":[\"0:6913#out:1\",\"0:7007:517\"]},{\"tk\":[1473,53,1473,54],\"els\":[\"0:6913#out:1\",\"0:6913\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1474,13,1474,42],\"els\":[\"0:6913\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1474,42,1474,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1474,43,1474,54],\"els\":[\"0:6913\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1474,54,1474,55],\"els\":[\"0:6913\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1474,55,1474,84],\"els\":[\"0:6913\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1474,84,1474,85],\"els\":[\"0:7007:517\"]},{\"tk\":[1474,85,1474,98],\"els\":[\"0:6913\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1475,13,1475,14],\"els\":[\"0:6913\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1475,15,1475,16],\"els\":[\"0:6913\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1475,16,1475,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1475,17,1475,18],\"els\":[\"0:7007:517\"]},{\"tk\":[1477,11,1477,12],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1478,13,1478,15],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1478,16,1478,17],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1478,17,1478,44],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1478,45,1478,47],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1478,48,1478,50],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1478,50,1478,51],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1478,52,1478,53],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1479,15,1479,42],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1479,43,1479,44],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1479,45,1479,47],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1479,47,1479,48],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1480,15,1480,22],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1480,23,1480,35],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1480,36,1480,37],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1480,38,1480,45],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1480,45,1480,46],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1481,15,1481,22],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1481,23,1481,33],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1481,34,1481,35],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1481,36,1481,43],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1481,43,1481,44],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1482,15,1482,22],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1482,23,1482,33],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1482,34,1482,35],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1482,36,1482,43],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1482,43,1482,44],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1483,15,1483,25],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1483,26,1483,27],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1483,28,1483,37],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1483,37,1483,38],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1483,38,1483,39],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1483,39,1483,46],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1483,46,1483,47],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1483,47,1483,48],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1484,17,1484,18],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1484,18,1484,47],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1484,47,1484,48],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1484,48,1484,59],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1484,59,1484,60],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1484,61,1484,62],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1484,62,1484,63],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1484,64,1484,65],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1484,65,1484,66],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1484,66,1484,67],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1485,15,1485,42],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1485,43,1485,44],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1485,45,1485,47],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1485,47,1485,48],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1486,13,1486,14],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1487,11,1487,12],\"els\":[\"0:6914\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1489,11,1489,40],\"els\":[\"0:6912#out:1\",\"0:7007:517\"]},{\"tk\":[1489,40,1489,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1489,41,1489,44],\"els\":[\"0:6912#out:1\",\"0:7007:517\"]},{\"tk\":[1489,45,1489,46],\"els\":[\"0:6912#out:1\",\"0:6912\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1490,13,1490,42],\"els\":[\"0:6912\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1490,42,1490,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1490,43,1490,59],\"els\":[\"0:6912\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1490,60,1490,61],\"els\":[\"0:6912\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1490,62,1490,63],\"els\":[\"0:6912\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1490,63,1490,71],\"els\":[\"0:7007:517\"]},{\"tk\":[1490,71,1490,72],\"els\":[\"0:7007:517\"]},{\"tk\":[1491,13,1491,42],\"els\":[\"0:6912\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1491,42,1491,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1491,43,1491,56],\"els\":[\"0:6912\",\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1491,56,1491,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1492,11,1492,19],\"els\":[\"0:6915\",\"0:7007:517\"]},{\"tk\":[1492,19,1492,21],\"els\":[\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1492,21,1492,22],\"els\":[\"0:7007:517\"]},{\"tk\":[1493,9,1493,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1493,11,1493,16],\"els\":[\"0:7007:517\"]},{\"tk\":[1493,17,1493,18],\"els\":[\"0:7007:517\"]},{\"tk\":[1493,18,1493,47],\"els\":[\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1493,47,1493,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1493,48,1493,51],\"els\":[\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1493,52,1493,54],\"els\":[\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1493,55,1493,58],\"els\":[\"0:6915\",\"0:6909\",\"0:7007:517\"]},{\"tk\":[1493,58,1493,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1493,59,1493,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1500,9,1500,38],\"els\":[\"0:6873:3:4#out:1\",\"0:7007:517\"]},{\"tk\":[1500,38,1500,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1500,39,1500,48],\"els\":[\"0:6873:3:4#out:1\",\"0:7007:517\"]},{\"tk\":[1500,49,1500,50],\"els\":[\"0:6873:3:4#out:1\",\"0:6873:3:4\",\"0:7007:517\"]},{\"tk\":[1501,11,1501,40],\"els\":[\"0:6873:3:4\",\"0:7007:517\"]},{\"tk\":[1501,40,1501,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1501,41,1501,47],\"els\":[\"0:6873:3:4\",\"0:7007:517\"]},{\"tk\":[1501,48,1501,49],\"els\":[\"0:6873:3:4\",\"0:7007:517\"]},{\"tk\":[1501,50,1501,52],\"els\":[\"0:6873:3:4\",\"0:6873:3:2\",\"0:7007:517\"]},{\"tk\":[1501,52,1501,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1504,9,1504,11],\"els\":[\"0:6873:5:3\",\"0:7007:517\"]},{\"tk\":[1504,12,1504,13],\"els\":[\"0:7007:517\"]},{\"tk\":[1504,13,1504,42],\"els\":[\"0:6873:5:3\",\"0:7007:517\"]},{\"tk\":[1504,42,1504,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1504,43,1504,52],\"els\":[\"0:6873:5:3\",\"0:7007:517\"]},{\"tk\":[1504,53,1504,54],\"els\":[\"0:6873:5:3\",\"0:7007:517\"]},{\"tk\":[1504,55,1504,59],\"els\":[\"0:6873:5:3\",\"0:7007:517\"]},{\"tk\":[1504,59,1504,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1504,61,1504,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1508,11,1508,40],\"els\":[\"0:6873:5:3\",\"0:6873:5:3#out:1\",\"0:7007:517\"]},{\"tk\":[1508,40,1508,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1508,41,1508,52],\"els\":[\"0:6873:5:3\",\"0:6873:5:3#out:1\",\"0:7007:517\"]},{\"tk\":[1508,53,1508,54],\"els\":[\"0:6873:5:3\",\"0:6873:5:3#out:1\",\"0:7007:517\"]},{\"tk\":[1508,55,1508,57],\"els\":[\"0:6873:5:3\",\"0:6873:5:4\",\"0:7007:517\"]},{\"tk\":[1508,57,1508,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1509,9,1509,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1509,11,1509,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1509,16,1509,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1511,11,1511,40],\"els\":[\"0:6873:5:3#out:1\",\"0:7007:517\"]},{\"tk\":[1511,40,1511,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1511,41,1511,52],\"els\":[\"0:6873:5:3#out:1\",\"0:7007:517\"]},{\"tk\":[1511,53,1511,54],\"els\":[\"0:6873:5:3#out:1\",\"0:6873:5:3\",\"0:7007:517\"]},{\"tk\":[1512,13,1512,42],\"els\":[\"0:6873:5:3\",\"0:7007:517\"]},{\"tk\":[1512,42,1512,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1512,43,1512,52],\"els\":[\"0:6873:5:3\",\"0:7007:517\"]},{\"tk\":[1512,52,1512,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1513,9,1513,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1520,9,1520,38],\"els\":[\"0:6200:76:692:2#out:1\",\"0:7007:517\"]},{\"tk\":[1520,38,1520,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1520,39,1520,46],\"els\":[\"0:6200:76:692:2#out:1\",\"0:7007:517\"]},{\"tk\":[1520,47,1520,48],\"els\":[\"0:6200:76:692:2#out:1\",\"0:6200:76:692:2\",\"0:7007:517\"]},{\"tk\":[1521,11,1521,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1521,12,1521,41],\"els\":[\"0:6200:76:692:2\",\"0:7007:517\"]},{\"tk\":[1521,41,1521,42],\"els\":[\"0:7007:517\"]},{\"tk\":[1521,42,1521,50],\"els\":[\"0:6200:76:692:2\",\"0:7007:517\"]},{\"tk\":[1521,51,1521,52],\"els\":[\"0:6200:76:692:2\",\"0:7007:517\"]},{\"tk\":[1521,53,1521,57],\"els\":[\"0:6200:76:692:2\",\"0:6200:76:692:3\",\"0:7007:517\"]},{\"tk\":[1521,57,1521,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1521,58,1521,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1524,9,1524,38],\"els\":[\"0:6200:76:702#out:1\",\"0:7007:517\"]},{\"tk\":[1524,38,1524,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1524,39,1524,57],\"els\":[\"0:6200:76:702#out:1\",\"0:7007:517\"]},{\"tk\":[1524,58,1524,59],\"els\":[\"0:6200:76:702#out:1\",\"0:6200:76:702\",\"0:7007:517\"]},{\"tk\":[1525,11,1525,40],\"els\":[\"0:6200:76:702\",\"0:7007:517\"]},{\"tk\":[1525,40,1525,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1525,41,1525,48],\"els\":[\"0:6200:76:702\",\"0:7007:517\"]},{\"tk\":[1525,48,1525,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1528,9,1528,11],\"els\":[\"0:6200:76:683\",\"0:7007:517\"]},{\"tk\":[1528,12,1528,13],\"els\":[\"0:7007:517\"]},{\"tk\":[1528,13,1528,42],\"els\":[\"0:6200:76:683\",\"0:7007:517\"]},{\"tk\":[1528,42,1528,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1528,43,1528,61],\"els\":[\"0:6200:76:683\",\"0:7007:517\"]},{\"tk\":[1528,62,1528,63],\"els\":[\"0:6200:76:683\",\"0:7007:517\"]},{\"tk\":[1528,64,1528,66],\"els\":[\"0:6200:76:683\",\"0:7007:517\"]},{\"tk\":[1528,66,1528,67],\"els\":[\"0:7007:517\"]},{\"tk\":[1528,68,1528,69],\"els\":[\"0:7007:517\"]},{\"tk\":[1533,11,1533,40],\"els\":[\"0:6200:76:694#out:1\",\"0:7007:517\"]},{\"tk\":[1533,40,1533,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1533,41,1533,57],\"els\":[\"0:6200:76:694#out:1\",\"0:7007:517\"]},{\"tk\":[1533,58,1533,59],\"els\":[\"0:6200:76:694#out:1\",\"0:6200:76:694\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1533,60,1533,61],\"els\":[\"0:6200:76:694\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1533,61,1533,68],\"els\":[\"0:7007:517\"]},{\"tk\":[1533,68,1533,69],\"els\":[\"0:7007:517\"]},{\"tk\":[1533,69,1533,70],\"els\":[\"0:6200:76:694\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1533,70,1533,78],\"els\":[\"0:7007:517\"]},{\"tk\":[1533,78,1533,79],\"els\":[\"0:7007:517\"]},{\"tk\":[1534,13,1534,18],\"els\":[\"0:6200:76:694\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1534,18,1534,19],\"els\":[\"0:7007:517\"]},{\"tk\":[1534,19,1534,48],\"els\":[\"0:6200:76:694\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1534,48,1534,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1534,49,1534,57],\"els\":[\"0:6200:76:694\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1534,57,1534,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1534,58,1534,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1537,11,1537,40],\"els\":[\"0:6200:76:695#out:1\",\"0:7007:517\"]},{\"tk\":[1537,40,1537,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1537,41,1537,55],\"els\":[\"0:6200:76:695#out:1\",\"0:7007:517\"]},{\"tk\":[1537,56,1537,57],\"els\":[\"0:6200:76:695#out:1\",\"0:6200:76:695\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1538,13,1538,42],\"els\":[\"0:6200:76:695\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1538,42,1538,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1538,43,1538,59],\"els\":[\"0:6200:76:695\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1538,59,1538,60],\"els\":[\"0:7007:517\"]},{\"tk\":[1543,11,1543,40],\"els\":[\"0:6200:76:696#out:1\",\"0:7007:517\"]},{\"tk\":[1543,40,1543,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1543,41,1543,48],\"els\":[\"0:6200:76:696#out:1\",\"0:7007:517\"]},{\"tk\":[1543,49,1543,50],\"els\":[\"0:6200:76:696#out:1\",\"0:6200:76:693\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1544,13,1544,42],\"els\":[\"0:6200:76:693\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1544,42,1544,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1544,43,1544,51],\"els\":[\"0:6200:76:693\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1544,52,1544,53],\"els\":[\"0:6200:76:693\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1545,13,1545,42],\"els\":[\"0:6200:76:693\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1545,42,1545,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1545,43,1545,57],\"els\":[\"0:6200:76:693\",\"0:6200:76:684\",\"0:6200:76:683\",\"0:6200:76:686\",\"0:7007:517\"]},{\"tk\":[1545,57,1545,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1548,9,1548,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1548,11,1548,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1548,16,1548,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1553,11,1553,40],\"els\":[\"0:6200:76:697#out:1\",\"0:7007:517\"]},{\"tk\":[1553,40,1553,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1553,41,1553,55],\"els\":[\"0:6200:76:697#out:1\",\"0:7007:517\"]},{\"tk\":[1553,56,1553,57],\"els\":[\"0:6200:76:697#out:1\",\"0:6200:76:697\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1553,58,1553,59],\"els\":[\"0:6200:76:697\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1553,59,1553,66],\"els\":[\"0:7007:517\"]},{\"tk\":[1553,66,1553,67],\"els\":[\"0:7007:517\"]},{\"tk\":[1554,13,1554,42],\"els\":[\"0:6200:76:697\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1554,42,1554,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1554,43,1554,51],\"els\":[\"0:6200:76:697\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1554,51,1554,52],\"els\":[\"0:7007:517\"]},{\"tk\":[1557,11,1557,40],\"els\":[\"0:6200:76:698#out:1\",\"0:7007:517\"]},{\"tk\":[1557,40,1557,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1557,41,1557,53],\"els\":[\"0:6200:76:698#out:1\",\"0:7007:517\"]},{\"tk\":[1557,54,1557,55],\"els\":[\"0:6200:76:698#out:1\",\"0:6200:76:698\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1558,13,1558,42],\"els\":[\"0:6200:76:698\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1558,42,1558,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1558,43,1558,57],\"els\":[\"0:6200:76:698\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1558,57,1558,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1563,11,1563,40],\"els\":[\"0:6200:76:696#out:1\",\"0:7007:517\"]},{\"tk\":[1563,40,1563,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1563,41,1563,48],\"els\":[\"0:6200:76:696#out:1\",\"0:7007:517\"]},{\"tk\":[1563,49,1563,50],\"els\":[\"0:6200:76:696#out:1\",\"0:6200:76:700\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1564,13,1564,42],\"els\":[\"0:6200:76:700\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1564,42,1564,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1564,43,1564,51],\"els\":[\"0:6200:76:700\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1564,52,1564,53],\"els\":[\"0:6200:76:700\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1565,13,1565,42],\"els\":[\"0:6200:76:700\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1565,42,1565,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1565,43,1565,55],\"els\":[\"0:6200:76:700\",\"0:6200:76:688\",\"0:6200:76:683\",\"0:6200:76:690\",\"0:7007:517\"]},{\"tk\":[1565,55,1565,56],\"els\":[\"0:7007:517\"]},{\"tk\":[1568,9,1568,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1573,9,1573,38],\"els\":[\"0:6200:76:605#out:1\",\"0:7007:517\"]},{\"tk\":[1573,38,1573,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1573,39,1573,47],\"els\":[\"0:6200:76:605#out:1\",\"0:7007:517\"]},{\"tk\":[1573,48,1573,49],\"els\":[\"0:6200:76:605#out:1\",\"0:6200:76:605\",\"0:7007:517\"]},{\"tk\":[1573,50,1573,56],\"els\":[\"0:6200:76:605\",\"0:7007:517\"]},{\"tk\":[1573,57,1573,58],\"els\":[\"0:6200:76:605\",\"0:7007:517\"]},{\"tk\":[1574,11,1574,40],\"els\":[\"0:6200:76:605\",\"0:7007:517\"]},{\"tk\":[1574,40,1574,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1574,41,1574,48],\"els\":[\"0:6200:76:605\",\"0:7007:517\"]},{\"tk\":[1574,48,1574,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1577,9,1577,38],\"els\":[\"0:6200:76:608#out:1\",\"0:7007:517\"]},{\"tk\":[1577,38,1577,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1577,39,1577,50],\"els\":[\"0:6200:76:608#out:1\",\"0:7007:517\"]},{\"tk\":[1577,51,1577,52],\"els\":[\"0:6200:76:608#out:1\",\"0:6200:76:608\",\"0:7007:517\"]},{\"tk\":[1577,53,1577,54],\"els\":[\"0:6200:76:608\",\"0:7007:517\"]},{\"tk\":[1577,54,1577,62],\"els\":[\"0:7007:517\"]},{\"tk\":[1577,62,1577,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1578,11,1578,40],\"els\":[\"0:6200:76:608\",\"0:7007:517\"]},{\"tk\":[1578,40,1578,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1578,41,1578,49],\"els\":[\"0:6200:76:608\",\"0:7007:517\"]},{\"tk\":[1578,49,1578,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1583,9,1583,13],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1583,14,1583,15],\"els\":[\"0:6200:76:610#out:1\",\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1583,16,1583,45],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1583,45,1583,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1583,46,1583,57],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1583,58,1583,59],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1583,60,1583,63],\"els\":[\"0:6200:76:610\",\"0:6200:76:657\",\"0:7007:517\"]},{\"tk\":[1583,63,1583,64],\"els\":[\"0:7007:517\"]},{\"tk\":[1584,9,1584,38],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1584,38,1584,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1584,39,1584,42],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1584,42,1584,43],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1584,43,1584,44],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1584,44,1584,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1584,46,1584,47],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1584,48,1584,52],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1584,52,1584,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1589,9,1589,38],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1589,38,1589,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1589,39,1589,45],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1589,45,1589,46],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1589,46,1589,47],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1589,47,1589,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1589,49,1589,50],\"els\":[\"0:6200:76:557#out:1\",\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1590,11,1590,42],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1590,42,1590,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1590,43,1590,66],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1590,66,1590,67],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1590,67,1590,68],\"els\":[\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1590,68,1590,75],\"els\":[\"0:7007:517\"]},{\"tk\":[1590,75,1590,76],\"els\":[\"0:7007:517\"]},{\"tk\":[1590,76,1590,80],\"els\":[\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1590,80,1590,81],\"els\":[\"0:7007:517\"]},{\"tk\":[1590,81,1590,82],\"els\":[\"0:7007:517\"]},{\"tk\":[1593,9,1593,13],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1593,14,1593,15],\"els\":[\"0:6200:76:610#out:1\",\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1593,16,1593,45],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1593,45,1593,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1593,46,1593,57],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1593,57,1593,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1594,9,1594,38],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1594,38,1594,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1594,39,1594,42],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1594,42,1594,43],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1594,43,1594,44],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1594,44,1594,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1594,46,1594,47],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1594,48,1594,52],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1594,52,1594,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1599,9,1599,38],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1599,38,1599,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1599,39,1599,45],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1599,45,1599,46],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1599,46,1599,47],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1599,47,1599,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1599,49,1599,50],\"els\":[\"0:6200:76:557#out:1\",\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1600,11,1600,42],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1600,42,1600,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1600,43,1600,66],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1600,66,1600,67],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1600,67,1600,68],\"els\":[\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1600,68,1600,75],\"els\":[\"0:7007:517\"]},{\"tk\":[1600,75,1600,76],\"els\":[\"0:7007:517\"]},{\"tk\":[1600,76,1600,80],\"els\":[\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1600,80,1600,81],\"els\":[\"0:7007:517\"]},{\"tk\":[1600,81,1600,82],\"els\":[\"0:7007:517\"]},{\"tk\":[1605,9,1605,13],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1605,14,1605,15],\"els\":[\"0:6200:76:610#out:1\",\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1605,16,1605,45],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1605,45,1605,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1605,46,1605,57],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1605,58,1605,59],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1605,60,1605,65],\"els\":[\"0:6200:76:610\",\"0:6200:76:657\",\"0:7007:517\"]},{\"tk\":[1605,65,1605,66],\"els\":[\"0:7007:517\"]},{\"tk\":[1606,9,1606,38],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1606,38,1606,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1606,39,1606,42],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1606,42,1606,43],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1606,43,1606,44],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1606,44,1606,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1606,46,1606,47],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1606,48,1606,52],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1606,52,1606,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1611,9,1611,38],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1611,38,1611,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1611,39,1611,45],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1611,45,1611,46],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1611,46,1611,47],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1611,47,1611,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1611,49,1611,50],\"els\":[\"0:6200:76:557#out:1\",\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1612,11,1612,42],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1612,42,1612,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1612,43,1612,66],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1612,66,1612,67],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1612,67,1612,68],\"els\":[\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1612,68,1612,75],\"els\":[\"0:7007:517\"]},{\"tk\":[1612,75,1612,76],\"els\":[\"0:7007:517\"]},{\"tk\":[1612,76,1612,80],\"els\":[\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1612,80,1612,81],\"els\":[\"0:7007:517\"]},{\"tk\":[1612,81,1612,82],\"els\":[\"0:7007:517\"]},{\"tk\":[1617,9,1617,13],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1617,14,1617,15],\"els\":[\"0:6200:76:610#out:1\",\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1617,16,1617,45],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1617,45,1617,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1617,46,1617,57],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1617,58,1617,59],\"els\":[\"0:6200:76:610\",\"0:7007:517\"]},{\"tk\":[1617,60,1617,65],\"els\":[\"0:6200:76:610\",\"0:6200:76:657\",\"0:7007:517\"]},{\"tk\":[1617,65,1617,66],\"els\":[\"0:7007:517\"]},{\"tk\":[1618,9,1618,38],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1618,38,1618,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1618,39,1618,42],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1618,42,1618,43],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1618,43,1618,44],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1618,44,1618,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1618,46,1618,47],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1618,48,1618,52],\"els\":[\"0:6200:76:610#out:1\",\"0:7007:517\"]},{\"tk\":[1618,52,1618,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1623,9,1623,38],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1623,38,1623,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1623,39,1623,45],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1623,45,1623,46],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1623,46,1623,47],\"els\":[\"0:6200:76:557#out:1\",\"0:7007:517\"]},{\"tk\":[1623,47,1623,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1623,49,1623,50],\"els\":[\"0:6200:76:557#out:1\",\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1624,11,1624,42],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1624,42,1624,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1624,43,1624,66],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1624,66,1624,67],\"els\":[\"0:6200:76:557\",\"0:6200:76:549\",\"0:7007:517\"]},{\"tk\":[1624,67,1624,68],\"els\":[\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1624,68,1624,75],\"els\":[\"0:7007:517\"]},{\"tk\":[1624,75,1624,76],\"els\":[\"0:7007:517\"]},{\"tk\":[1624,76,1624,80],\"els\":[\"0:6200:76:557\",\"0:7007:517\"]},{\"tk\":[1624,80,1624,81],\"els\":[\"0:7007:517\"]},{\"tk\":[1624,81,1624,82],\"els\":[\"0:7007:517\"]},{\"tk\":[1627,9,1627,38],\"els\":[\"0:6200:76:614#out:1\",\"0:7007:517\"]},{\"tk\":[1627,38,1627,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1627,39,1627,43],\"els\":[\"0:6200:76:614#out:1\",\"0:7007:517\"]},{\"tk\":[1627,44,1627,45],\"els\":[\"0:6200:76:614#out:1\",\"0:6200:76:614\",\"0:7007:517\"]},{\"tk\":[1628,11,1628,40],\"els\":[\"0:6200:76:614\",\"0:7007:517\"]},{\"tk\":[1628,40,1628,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1628,41,1628,47],\"els\":[\"0:6200:76:614\",\"0:7007:517\"]},{\"tk\":[1628,47,1628,48],\"els\":[\"0:6200:76:614\",\"0:7007:517\"]},{\"tk\":[1628,48,1628,49],\"els\":[\"0:6200:76:614\",\"0:7007:517\"]},{\"tk\":[1628,49,1628,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1628,51,1628,52],\"els\":[\"0:6200:76:614\",\"0:7007:517\"]},{\"tk\":[1629,11,1629,40],\"els\":[\"0:6200:76:614\",\"0:7007:517\"]},{\"tk\":[1629,40,1629,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1629,41,1629,47],\"els\":[\"0:6200:76:614\",\"0:7007:517\"]},{\"tk\":[1629,47,1629,48],\"els\":[\"0:6200:76:614\",\"0:7007:517\"]},{\"tk\":[1629,48,1629,49],\"els\":[\"0:6200:76:614\",\"0:7007:517\"]},{\"tk\":[1629,49,1629,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1629,50,1629,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1632,9,1632,38],\"els\":[\"0:6200:76:653#out:1\",\"0:7007:517\"]},{\"tk\":[1632,38,1632,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1632,39,1632,58],\"els\":[\"0:6200:76:653#out:1\",\"0:7007:517\"]},{\"tk\":[1632,59,1632,60],\"els\":[\"0:6200:76:653#out:1\",\"0:6200:76:653\",\"0:7007:517\"]},{\"tk\":[1633,11,1633,40],\"els\":[\"0:6200:76:653\",\"0:7007:517\"]},{\"tk\":[1633,40,1633,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1633,41,1633,52],\"els\":[\"0:6200:76:653\",\"0:7007:517\"]},{\"tk\":[1633,52,1633,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1636,9,1636,38],\"els\":[\"0:6200:76:612#out:1\",\"0:7007:517\"]},{\"tk\":[1636,38,1636,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1636,39,1636,43],\"els\":[\"0:6200:76:612#out:1\",\"0:7007:517\"]},{\"tk\":[1636,44,1636,45],\"els\":[\"0:6200:76:612#out:1\",\"0:6200:76:612\",\"0:7007:517\"]},{\"tk\":[1637,11,1637,40],\"els\":[\"0:6200:76:612\",\"0:7007:517\"]},{\"tk\":[1637,40,1637,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1637,41,1637,49],\"els\":[\"0:6200:76:612\",\"0:7007:517\"]},{\"tk\":[1637,50,1637,51],\"els\":[\"0:6200:76:612\",\"0:7007:517\"]},{\"tk\":[1638,11,1638,40],\"els\":[\"0:6200:76:612\",\"0:7007:517\"]},{\"tk\":[1638,40,1638,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1638,41,1638,60],\"els\":[\"0:6200:76:612\",\"0:7007:517\"]},{\"tk\":[1638,60,1638,61],\"els\":[\"0:7007:517\"]},{\"tk\":[1641,9,1641,38],\"els\":[\"0:6200:76:616#out:1\",\"0:7007:517\"]},{\"tk\":[1641,38,1641,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1641,39,1641,48],\"els\":[\"0:6200:76:616#out:1\",\"0:7007:517\"]},{\"tk\":[1641,49,1641,50],\"els\":[\"0:6200:76:616#out:1\",\"0:6200:76:616\",\"0:7007:517\"]},{\"tk\":[1642,11,1642,40],\"els\":[\"0:6200:76:616\",\"0:7007:517\"]},{\"tk\":[1642,40,1642,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1642,41,1642,45],\"els\":[\"0:6200:76:616\",\"0:7007:517\"]},{\"tk\":[1642,46,1642,47],\"els\":[\"0:6200:76:616\",\"0:7007:517\"]},{\"tk\":[1643,11,1643,40],\"els\":[\"0:6200:76:616\",\"0:7007:517\"]},{\"tk\":[1643,40,1643,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1643,41,1643,45],\"els\":[\"0:6200:76:616\",\"0:7007:517\"]},{\"tk\":[1643,45,1643,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1646,9,1646,38],\"els\":[\"0:6200:76:615#out:1\",\"0:7007:517\"]},{\"tk\":[1646,38,1646,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1646,39,1646,43],\"els\":[\"0:6200:76:615#out:1\",\"0:7007:517\"]},{\"tk\":[1646,44,1646,45],\"els\":[\"0:6200:76:615#out:1\",\"0:6200:76:615\",\"0:7007:517\"]},{\"tk\":[1647,11,1647,40],\"els\":[\"0:6200:76:615\",\"0:7007:517\"]},{\"tk\":[1647,40,1647,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1647,41,1647,50],\"els\":[\"0:6200:76:615\",\"0:7007:517\"]},{\"tk\":[1647,51,1647,52],\"els\":[\"0:6200:76:615\",\"0:7007:517\"]},{\"tk\":[1648,11,1648,40],\"els\":[\"0:6200:76:615\",\"0:7007:517\"]},{\"tk\":[1648,40,1648,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1648,41,1648,47],\"els\":[\"0:6200:76:615\",\"0:7007:517\"]},{\"tk\":[1648,47,1648,48],\"els\":[\"0:6200:76:615\",\"0:7007:517\"]},{\"tk\":[1648,48,1648,49],\"els\":[\"0:6200:76:615\",\"0:7007:517\"]},{\"tk\":[1648,49,1648,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1648,50,1648,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1651,9,1651,38],\"els\":[\"0:6200:76:622#out:1\",\"0:7007:517\"]},{\"tk\":[1651,38,1651,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1651,39,1651,43],\"els\":[\"0:6200:76:622#out:1\",\"0:7007:517\"]},{\"tk\":[1651,44,1651,45],\"els\":[\"0:6200:76:622#out:1\",\"0:6200:76:622\",\"0:7007:517\"]},{\"tk\":[1652,11,1652,40],\"els\":[\"0:6200:76:622\",\"0:7007:517\"]},{\"tk\":[1652,40,1652,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1652,41,1652,47],\"els\":[\"0:6200:76:622\",\"0:7007:517\"]},{\"tk\":[1652,47,1652,48],\"els\":[\"0:6200:76:622\",\"0:7007:517\"]},{\"tk\":[1652,48,1652,49],\"els\":[\"0:6200:76:622\",\"0:7007:517\"]},{\"tk\":[1652,49,1652,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1652,51,1652,52],\"els\":[\"0:6200:76:622\",\"0:7007:517\"]},{\"tk\":[1653,11,1653,40],\"els\":[\"0:6200:76:622\",\"0:7007:517\"]},{\"tk\":[1653,40,1653,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1653,41,1653,47],\"els\":[\"0:6200:76:622\",\"0:7007:517\"]},{\"tk\":[1653,47,1653,48],\"els\":[\"0:6200:76:622\",\"0:7007:517\"]},{\"tk\":[1653,48,1653,49],\"els\":[\"0:6200:76:622\",\"0:7007:517\"]},{\"tk\":[1653,49,1653,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1653,50,1653,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1656,9,1656,38],\"els\":[\"0:6200:76:621#out:1\",\"0:7007:517\"]},{\"tk\":[1656,38,1656,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1656,39,1656,47],\"els\":[\"0:6200:76:621#out:1\",\"0:7007:517\"]},{\"tk\":[1656,48,1656,49],\"els\":[\"0:6200:76:621#out:1\",\"0:6200:76:621\",\"0:7007:517\"]},{\"tk\":[1657,11,1657,40],\"els\":[\"0:6200:76:621\",\"0:7007:517\"]},{\"tk\":[1657,40,1657,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1657,41,1657,45],\"els\":[\"0:6200:76:621\",\"0:7007:517\"]},{\"tk\":[1657,46,1657,47],\"els\":[\"0:6200:76:621\",\"0:7007:517\"]},{\"tk\":[1658,11,1658,40],\"els\":[\"0:6200:76:621\",\"0:7007:517\"]},{\"tk\":[1658,40,1658,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1658,41,1658,45],\"els\":[\"0:6200:76:621\",\"0:7007:517\"]},{\"tk\":[1658,45,1658,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1661,9,1661,38],\"els\":[\"0:6200:76:623#out:1\",\"0:7007:517\"]},{\"tk\":[1661,38,1661,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1661,39,1661,43],\"els\":[\"0:6200:76:623#out:1\",\"0:7007:517\"]},{\"tk\":[1661,44,1661,45],\"els\":[\"0:6200:76:623#out:1\",\"0:6200:76:623\",\"0:7007:517\"]},{\"tk\":[1662,11,1662,40],\"els\":[\"0:6200:76:623\",\"0:7007:517\"]},{\"tk\":[1662,40,1662,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1662,41,1662,49],\"els\":[\"0:6200:76:623\",\"0:7007:517\"]},{\"tk\":[1662,50,1662,51],\"els\":[\"0:6200:76:623\",\"0:7007:517\"]},{\"tk\":[1663,11,1663,40],\"els\":[\"0:6200:76:623\",\"0:7007:517\"]},{\"tk\":[1663,40,1663,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1663,41,1663,47],\"els\":[\"0:6200:76:623\",\"0:7007:517\"]},{\"tk\":[1663,47,1663,48],\"els\":[\"0:6200:76:623\",\"0:7007:517\"]},{\"tk\":[1663,48,1663,49],\"els\":[\"0:6200:76:623\",\"0:7007:517\"]},{\"tk\":[1663,49,1663,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1663,50,1663,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1669,9,1669,38],\"els\":[\"0:6181:434#out:1\",\"0:7007:517\"]},{\"tk\":[1669,38,1669,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1669,39,1669,43],\"els\":[\"0:6181:434#out:1\",\"0:7007:517\"]},{\"tk\":[1669,44,1669,45],\"els\":[\"0:6181:434#out:1\",\"0:6181:434\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1669,46,1669,50],\"els\":[\"0:6181:434\",\"0:6181:778\",\"0:6636\",\"0:7007:517\"]},{\"tk\":[1669,51,1669,52],\"els\":[\"0:6181:434\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1670,11,1670,40],\"els\":[\"0:6181:434\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1670,40,1670,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1670,41,1670,45],\"els\":[\"0:6181:434\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1670,45,1670,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1675,9,1675,38],\"els\":[\"0:6181:435#out:1\",\"0:7007:517\"]},{\"tk\":[1675,38,1675,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1675,39,1675,43],\"els\":[\"0:6181:435#out:1\",\"0:7007:517\"]},{\"tk\":[1675,44,1675,45],\"els\":[\"0:6181:435#out:1\",\"0:6181:435\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1675,46,1675,51],\"els\":[\"0:6181:435\",\"0:6181:778\",\"0:6983\",\"0:7007:517\"]},{\"tk\":[1675,52,1675,53],\"els\":[\"0:6181:435\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1676,11,1676,40],\"els\":[\"0:6181:435\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1676,40,1676,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1676,41,1676,45],\"els\":[\"0:6181:435\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1676,45,1676,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1679,9,1679,38],\"els\":[\"0:6181:436#out:1\",\"0:7007:517\"]},{\"tk\":[1679,38,1679,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1679,39,1679,47],\"els\":[\"0:6181:436#out:1\",\"0:7007:517\"]},{\"tk\":[1679,48,1679,49],\"els\":[\"0:6181:436#out:1\",\"0:6181:436\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1680,11,1680,40],\"els\":[\"0:6181:436\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1680,40,1680,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1680,41,1680,45],\"els\":[\"0:6181:436\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1680,46,1680,47],\"els\":[\"0:6181:436\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1681,11,1681,40],\"els\":[\"0:6181:436\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1681,40,1681,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1681,41,1681,45],\"els\":[\"0:6181:436\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1681,45,1681,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1686,9,1686,38],\"els\":[\"0:6181:431#out:1\",\"0:7007:517\"]},{\"tk\":[1686,38,1686,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1686,39,1686,43],\"els\":[\"0:6181:431#out:1\",\"0:7007:517\"]},{\"tk\":[1686,44,1686,45],\"els\":[\"0:6181:431#out:1\",\"0:6181:431\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1686,46,1686,51],\"els\":[\"0:6181:431\",\"0:6181:778\",\"0:6983\",\"0:7007:517\"]},{\"tk\":[1686,52,1686,53],\"els\":[\"0:6181:431\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1687,11,1687,40],\"els\":[\"0:6181:431\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1687,40,1687,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1687,41,1687,45],\"els\":[\"0:6181:431\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1687,45,1687,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1692,9,1692,38],\"els\":[\"0:6181:433#out:1\",\"0:7007:517\"]},{\"tk\":[1692,38,1692,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1692,39,1692,43],\"els\":[\"0:6181:433#out:1\",\"0:7007:517\"]},{\"tk\":[1692,44,1692,45],\"els\":[\"0:6181:433#out:1\",\"0:6181:433\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1692,46,1692,50],\"els\":[\"0:6181:433\",\"0:6181:778\",\"0:6636\",\"0:7007:517\"]},{\"tk\":[1692,51,1692,52],\"els\":[\"0:6181:433\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1693,11,1693,40],\"els\":[\"0:6181:433\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1693,40,1693,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1693,41,1693,45],\"els\":[\"0:6181:433\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1693,45,1693,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1696,9,1696,38],\"els\":[\"0:6181:432#out:1\",\"0:7007:517\"]},{\"tk\":[1696,38,1696,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1696,39,1696,48],\"els\":[\"0:6181:432#out:1\",\"0:7007:517\"]},{\"tk\":[1696,49,1696,50],\"els\":[\"0:6181:432#out:1\",\"0:6181:432\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1697,11,1697,40],\"els\":[\"0:6181:432\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1697,40,1697,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1697,41,1697,45],\"els\":[\"0:6181:432\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1697,46,1697,47],\"els\":[\"0:6181:432\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1698,11,1698,40],\"els\":[\"0:6181:432\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1698,40,1698,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1698,41,1698,45],\"els\":[\"0:6181:432\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1698,45,1698,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1701,9,1701,38],\"els\":[\"0:6181:755#out:1\",\"0:7007:517\"]},{\"tk\":[1701,38,1701,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1701,39,1701,48],\"els\":[\"0:6181:755#out:1\",\"0:7007:517\"]},{\"tk\":[1701,48,1701,49],\"els\":[\"0:6181:755#out:1\",\"0:7007:517\"]},{\"tk\":[1701,49,1701,50],\"els\":[\"0:6181:755#out:1\",\"0:7007:517\"]},{\"tk\":[1701,50,1701,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1701,52,1701,53],\"els\":[\"0:6181:755#out:1\",\"0:6181:755\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1702,11,1702,40],\"els\":[\"0:6181:755\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1702,40,1702,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1702,41,1702,50],\"els\":[\"0:6181:755\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1702,50,1702,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1703,9,1703,38],\"els\":[\"0:6181:755#out:1\",\"0:7007:517\"]},{\"tk\":[1703,38,1703,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1703,39,1703,48],\"els\":[\"0:6181:755#out:1\",\"0:7007:517\"]},{\"tk\":[1703,48,1703,49],\"els\":[\"0:6181:755#out:1\",\"0:7007:517\"]},{\"tk\":[1703,49,1703,50],\"els\":[\"0:6181:755#out:1\",\"0:7007:517\"]},{\"tk\":[1703,50,1703,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1703,52,1703,53],\"els\":[\"0:6181:755#out:1\",\"0:6181:755\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1704,11,1704,40],\"els\":[\"0:6181:755\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1704,40,1704,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1704,41,1704,49],\"els\":[\"0:6181:755\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1704,49,1704,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1707,9,1707,38],\"els\":[\"0:6181:761\",\"0:7007:517\"]},{\"tk\":[1707,38,1707,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1707,39,1707,47],\"els\":[\"0:6181:761\",\"0:7007:517\"]},{\"tk\":[1707,48,1707,49],\"els\":[\"0:6181:761\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1708,11,1708,40],\"els\":[\"0:6181:761\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1708,40,1708,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1708,41,1708,50],\"els\":[\"0:6181:761\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1708,50,1708,51],\"els\":[\"0:6181:761\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1708,51,1708,52],\"els\":[\"0:6181:761\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1708,52,1708,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1708,53,1708,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1711,9,1711,38],\"els\":[\"0:6181:761\",\"0:7007:517\"]},{\"tk\":[1711,38,1711,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1711,39,1711,47],\"els\":[\"0:6181:761\",\"0:7007:517\"]},{\"tk\":[1711,48,1711,49],\"els\":[\"0:6181:761\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1712,11,1712,40],\"els\":[\"0:6181:761\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1712,40,1712,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1712,41,1712,50],\"els\":[\"0:6181:761\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1712,50,1712,51],\"els\":[\"0:6181:761\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1712,51,1712,52],\"els\":[\"0:6181:761\",\"0:6181:778\",\"0:7007:517\"]},{\"tk\":[1712,52,1712,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1712,53,1712,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1717,9,1717,11],\"els\":[\"0:6360\",\"0:7007:517\"]},{\"tk\":[1717,12,1717,13],\"els\":[\"0:7007:517\"]},{\"tk\":[1717,13,1717,42],\"els\":[\"0:6360\",\"0:7007:517\"]},{\"tk\":[1717,42,1717,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1717,43,1717,52],\"els\":[\"0:6360\",\"0:7007:517\"]},{\"tk\":[1717,52,1717,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1717,54,1717,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1719,11,1719,40],\"els\":[\"0:6201:1632:492#out:1\",\"0:7007:517\"]},{\"tk\":[1719,40,1719,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1719,41,1719,53],\"els\":[\"0:6201:1632:492#out:1\",\"0:7007:517\"]},{\"tk\":[1719,54,1719,55],\"els\":[\"0:6201:1632:492#out:1\",\"0:6201:1632:492\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1719,56,1719,68],\"els\":[\"0:6201:1632:492\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1719,69,1719,70],\"els\":[\"0:6201:1632:492\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1720,13,1720,42],\"els\":[\"0:6201:1632:492\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1720,42,1720,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1720,43,1720,51],\"els\":[\"0:6201:1632:492\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1720,51,1720,52],\"els\":[\"0:7007:517\"]},{\"tk\":[1723,11,1723,40],\"els\":[\"0:6201:1632:493#out:1\",\"0:7007:517\"]},{\"tk\":[1723,40,1723,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1723,41,1723,51],\"els\":[\"0:6201:1632:493#out:1\",\"0:7007:517\"]},{\"tk\":[1723,52,1723,53],\"els\":[\"0:6201:1632:493#out:1\",\"0:6201:1632:493\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1723,54,1723,58],\"els\":[\"0:6201:1632:493\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1723,59,1723,60],\"els\":[\"0:6201:1632:493\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1724,13,1724,42],\"els\":[\"0:6201:1632:493\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1724,42,1724,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1724,43,1724,51],\"els\":[\"0:6201:1632:493\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1724,51,1724,52],\"els\":[\"0:7007:517\"]},{\"tk\":[1727,11,1727,40],\"els\":[\"0:6201:1632:499#out:1\",\"0:7007:517\"]},{\"tk\":[1727,40,1727,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1727,41,1727,46],\"els\":[\"0:6201:1632:499#out:1\",\"0:7007:517\"]},{\"tk\":[1727,47,1727,48],\"els\":[\"0:6201:1632:499#out:1\",\"0:6201:1632:499\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1727,49,1727,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1727,50,1727,54],\"els\":[\"0:6201:1632:499\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1727,55,1727,56],\"els\":[\"0:6201:1632:499\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1728,13,1728,42],\"els\":[\"0:6201:1632:499\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1728,42,1728,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1728,43,1728,53],\"els\":[\"0:6201:1632:499\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1728,53,1728,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1728,55,1728,56],\"els\":[\"0:6201:1632:499\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1729,13,1729,42],\"els\":[\"0:6201:1632:499\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1729,42,1729,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1729,43,1729,55],\"els\":[\"0:6201:1632:499\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1729,55,1729,56],\"els\":[\"0:7007:517\"]},{\"tk\":[1732,11,1732,40],\"els\":[\"0:6201:1632:490#out:1\",\"0:7007:517\"]},{\"tk\":[1732,40,1732,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1732,41,1732,46],\"els\":[\"0:6201:1632:490#out:1\",\"0:7007:517\"]},{\"tk\":[1732,47,1732,48],\"els\":[\"0:6201:1632:490#out:1\",\"0:6201:1632:490\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1733,13,1733,42],\"els\":[\"0:6201:1632:490\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1733,42,1733,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1733,43,1733,55],\"els\":[\"0:6201:1632:490\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1733,56,1733,57],\"els\":[\"0:6201:1632:490\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1734,13,1734,42],\"els\":[\"0:6201:1632:490\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1734,42,1734,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1734,43,1734,53],\"els\":[\"0:6201:1632:490\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1734,53,1734,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1739,11,1739,15],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1739,16,1739,17],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1739,18,1739,47],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1739,47,1739,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1739,48,1739,56],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1739,56,1739,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1740,11,1740,15],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1740,16,1740,17],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1740,18,1740,47],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1740,47,1740,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1740,48,1740,53],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1740,53,1740,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1741,11,1741,16],\"els\":[\"0:6201:1404\",\"0:7007:517\"]},{\"tk\":[1741,17,1741,18],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:6201:1403\",\"0:7007:517\"]},{\"tk\":[1741,19,1741,27],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1741,27,1741,28],\"els\":[\"0:7007:517\"]},{\"tk\":[1741,28,1741,32],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1741,32,1741,33],\"els\":[\"0:7007:517\"]},{\"tk\":[1741,33,1741,34],\"els\":[\"0:7007:517\"]},{\"tk\":[1742,11,1742,13],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1742,14,1742,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1742,15,1742,16],\"els\":[\"0:7007:517\"]},{\"tk\":[1742,16,1742,20],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1742,21,1742,23],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1742,24,1742,28],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1742,28,1742,29],\"els\":[\"0:7007:517\"]},{\"tk\":[1742,30,1742,32],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1742,33,1742,38],\"els\":[\"0:6201:1404\",\"0:7007:517\"]},{\"tk\":[1742,38,1742,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1742,40,1742,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1743,13,1743,17],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1743,18,1743,19],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1743,20,1743,24],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1743,24,1743,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1744,11,1744,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1746,11,1746,15],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1746,16,1746,17],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1746,18,1746,47],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1746,47,1746,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1746,48,1746,53],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1746,53,1746,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1747,11,1747,16],\"els\":[\"0:6201:1404\",\"0:7007:517\"]},{\"tk\":[1747,17,1747,18],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:6201:1403\",\"0:7007:517\"]},{\"tk\":[1747,19,1747,27],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1747,27,1747,28],\"els\":[\"0:7007:517\"]},{\"tk\":[1747,28,1747,32],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1747,32,1747,33],\"els\":[\"0:7007:517\"]},{\"tk\":[1747,33,1747,34],\"els\":[\"0:7007:517\"]},{\"tk\":[1748,11,1748,13],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1748,14,1748,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1748,15,1748,16],\"els\":[\"0:7007:517\"]},{\"tk\":[1748,16,1748,17],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1748,17,1748,18],\"els\":[\"0:7007:517\"]},{\"tk\":[1748,18,1748,22],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1748,23,1748,25],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1748,26,1748,30],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1748,30,1748,31],\"els\":[\"0:7007:517\"]},{\"tk\":[1748,31,1748,32],\"els\":[\"0:7007:517\"]},{\"tk\":[1748,33,1748,35],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1748,36,1748,37],\"els\":[\"0:7007:517\"]},{\"tk\":[1748,37,1748,38],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1748,38,1748,43],\"els\":[\"0:6201:1404\",\"0:7007:517\"]},{\"tk\":[1748,43,1748,44],\"els\":[\"0:7007:517\"]},{\"tk\":[1748,44,1748,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1748,46,1748,47],\"els\":[\"0:7007:517\"]},{\"tk\":[1749,13,1749,17],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1749,18,1749,19],\"els\":[\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1749,20,1749,24],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1749,24,1749,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1750,11,1750,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1753,11,1753,40],\"els\":[\"0:6201:1404#out:1\",\"0:7007:517\"]},{\"tk\":[1753,40,1753,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1753,41,1753,44],\"els\":[\"0:6201:1404#out:1\",\"0:7007:517\"]},{\"tk\":[1753,45,1753,46],\"els\":[\"0:6201:1404#out:1\",\"0:6201:1404\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1753,47,1753,51],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1753,51,1753,52],\"els\":[\"0:7007:517\"]},{\"tk\":[1756,11,1756,15],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1756,16,1756,17],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1756,18,1756,47],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1756,47,1756,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1756,48,1756,56],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1756,56,1756,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1757,11,1757,15],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1757,16,1757,17],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1757,18,1757,47],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1757,47,1757,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1757,48,1757,53],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1757,53,1757,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1758,11,1758,13],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1758,14,1758,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1758,15,1758,16],\"els\":[\"0:7007:517\"]},{\"tk\":[1758,16,1758,20],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1758,21,1758,23],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1758,24,1758,28],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1758,28,1758,29],\"els\":[\"0:7007:517\"]},{\"tk\":[1758,30,1758,32],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1758,33,1758,38],\"els\":[\"0:7007:517\"]},{\"tk\":[1758,38,1758,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1758,40,1758,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1759,13,1759,17],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1759,18,1759,19],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1759,20,1759,24],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1759,24,1759,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1760,11,1760,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1762,11,1762,15],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1762,16,1762,17],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1762,18,1762,47],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1762,47,1762,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1762,48,1762,53],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1762,53,1762,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1763,11,1763,13],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1763,14,1763,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1763,15,1763,16],\"els\":[\"0:7007:517\"]},{\"tk\":[1763,16,1763,17],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1763,17,1763,18],\"els\":[\"0:7007:517\"]},{\"tk\":[1763,18,1763,22],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1763,23,1763,25],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1763,26,1763,30],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1763,30,1763,31],\"els\":[\"0:7007:517\"]},{\"tk\":[1763,31,1763,32],\"els\":[\"0:7007:517\"]},{\"tk\":[1763,33,1763,35],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1763,36,1763,37],\"els\":[\"0:7007:517\"]},{\"tk\":[1763,37,1763,38],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1763,38,1763,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1763,43,1763,44],\"els\":[\"0:7007:517\"]},{\"tk\":[1763,44,1763,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1763,46,1763,47],\"els\":[\"0:7007:517\"]},{\"tk\":[1764,13,1764,17],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1764,18,1764,19],\"els\":[\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1764,20,1764,24],\"els\":[\"0:6708\",\"0:7007:517\"]},{\"tk\":[1764,24,1764,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1765,11,1765,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1768,11,1768,40],\"els\":[\"0:6201:1403#out:1\",\"0:7007:517\"]},{\"tk\":[1768,40,1768,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1768,41,1768,44],\"els\":[\"0:6201:1403#out:1\",\"0:7007:517\"]},{\"tk\":[1768,45,1768,46],\"els\":[\"0:6201:1403#out:1\",\"0:6201:1403\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1768,47,1768,51],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1768,51,1768,52],\"els\":[\"0:7007:517\"]},{\"tk\":[1771,11,1771,40],\"els\":[\"0:6201:1400#out:1\",\"0:7007:517\"]},{\"tk\":[1771,40,1771,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1771,41,1771,46],\"els\":[\"0:6201:1400#out:1\",\"0:7007:517\"]},{\"tk\":[1771,47,1771,48],\"els\":[\"0:6201:1400#out:1\",\"0:6201:1400\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1772,13,1772,42],\"els\":[\"0:6201:1400\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1772,42,1772,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1772,43,1772,46],\"els\":[\"0:6201:1400\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1772,47,1772,48],\"els\":[\"0:6201:1400\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1773,13,1773,42],\"els\":[\"0:6201:1400\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1773,42,1773,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1773,43,1773,46],\"els\":[\"0:6201:1400\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1773,46,1773,47],\"els\":[\"0:7007:517\"]},{\"tk\":[1776,11,1776,40],\"els\":[\"0:6201:1405#out:1\",\"0:7007:517\"]},{\"tk\":[1776,40,1776,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1776,41,1776,53],\"els\":[\"0:6201:1405#out:1\",\"0:7007:517\"]},{\"tk\":[1776,54,1776,55],\"els\":[\"0:6201:1405#out:1\",\"0:6201:1405\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1776,56,1776,57],\"els\":[\"0:6201:1405\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1776,57,1776,61],\"els\":[\"0:7007:517\"]},{\"tk\":[1776,62,1776,63],\"els\":[\"0:6201:1405\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1777,13,1777,42],\"els\":[\"0:6201:1405\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1777,42,1777,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1777,43,1777,48],\"els\":[\"0:6201:1405\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1777,48,1777,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1780,11,1780,40],\"els\":[\"0:6201:1408#out:1\",\"0:7007:517\"]},{\"tk\":[1780,40,1780,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1780,41,1780,45],\"els\":[\"0:6201:1408#out:1\",\"0:7007:517\"]},{\"tk\":[1780,46,1780,47],\"els\":[\"0:6201:1408#out:1\",\"0:6201:1408\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1781,13,1781,42],\"els\":[\"0:6201:1408\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1781,42,1781,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1781,43,1781,55],\"els\":[\"0:6201:1408\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1781,56,1781,57],\"els\":[\"0:6201:1408\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1782,13,1782,42],\"els\":[\"0:6201:1408\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1782,42,1782,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1782,43,1782,48],\"els\":[\"0:6201:1408\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1782,48,1782,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1785,11,1785,40],\"els\":[\"0:6201:1407#out:1\",\"0:7007:517\"]},{\"tk\":[1785,40,1785,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1785,41,1785,47],\"els\":[\"0:6201:1407#out:1\",\"0:7007:517\"]},{\"tk\":[1785,48,1785,49],\"els\":[\"0:6201:1407#out:1\",\"0:6201:1407\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1786,13,1786,42],\"els\":[\"0:6201:1407\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1786,42,1786,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1786,43,1786,48],\"els\":[\"0:6201:1407\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1786,49,1786,50],\"els\":[\"0:6201:1407\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1787,13,1787,42],\"els\":[\"0:6201:1407\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1787,42,1787,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1787,43,1787,55],\"els\":[\"0:6201:1407\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1787,55,1787,56],\"els\":[\"0:7007:517\"]},{\"tk\":[1790,11,1790,40],\"els\":[\"0:6201:1409#out:1\",\"0:7007:517\"]},{\"tk\":[1790,40,1790,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1790,41,1790,45],\"els\":[\"0:6201:1409#out:1\",\"0:7007:517\"]},{\"tk\":[1790,46,1790,47],\"els\":[\"0:6201:1409#out:1\",\"0:6201:1409\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1791,13,1791,42],\"els\":[\"0:6201:1409\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1791,42,1791,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1791,43,1791,51],\"els\":[\"0:6201:1409\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1791,52,1791,53],\"els\":[\"0:6201:1409\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1792,13,1792,42],\"els\":[\"0:6201:1409\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1792,42,1792,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1792,43,1792,55],\"els\":[\"0:6201:1409\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1792,55,1792,56],\"els\":[\"0:7007:517\"]},{\"tk\":[1795,11,1795,40],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1795,40,1795,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1795,41,1795,45],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1795,45,1795,46],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1795,46,1795,47],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1795,47,1795,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1795,49,1795,50],\"els\":[\"0:6201:1551#out:1\",\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1795,51,1795,62],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1795,63,1795,64],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1796,13,1796,42],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1796,42,1796,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1796,43,1796,47],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1796,47,1796,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1797,11,1797,40],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1797,40,1797,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1797,41,1797,45],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1797,45,1797,46],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1797,46,1797,47],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1797,47,1797,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1797,49,1797,50],\"els\":[\"0:6201:1551#out:1\",\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1797,51,1797,62],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1797,63,1797,64],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1798,13,1798,42],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1798,42,1798,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1798,43,1798,49],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1798,49,1798,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1799,11,1799,40],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1799,40,1799,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1799,41,1799,45],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1799,45,1799,46],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1799,46,1799,47],\"els\":[\"0:6201:1551#out:1\",\"0:7007:517\"]},{\"tk\":[1799,47,1799,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1799,49,1799,50],\"els\":[\"0:6201:1551#out:1\",\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1799,51,1799,62],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1799,63,1799,64],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1800,13,1800,42],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1800,42,1800,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1800,43,1800,47],\"els\":[\"0:6201:1551\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1800,47,1800,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1805,11,1805,15],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1805,16,1805,17],\"els\":[\"0:6359#out:1\",\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1805,18,1805,47],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1805,47,1805,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1805,48,1805,52],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1805,52,1805,53],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1805,53,1805,54],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1805,54,1805,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1805,56,1805,57],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1805,58,1805,62],\"els\":[\"0:6359\",\"0:6360\",\"0:6352\",\"0:7007:517\"]},{\"tk\":[1805,62,1805,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1806,11,1806,40],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1806,40,1806,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1806,41,1806,46],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1806,46,1806,47],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1806,47,1806,48],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1806,48,1806,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1806,50,1806,51],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1806,52,1806,56],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1806,56,1806,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1809,11,1809,15],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1809,16,1809,18],\"els\":[\"0:6356#out:1\",\"0:6356\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1809,19,1809,23],\"els\":[\"0:6356\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1809,23,1809,24],\"els\":[\"0:7007:517\"]},{\"tk\":[1810,11,1810,40],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1810,40,1810,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1810,41,1810,47],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1810,47,1810,48],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1810,48,1810,49],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1810,49,1810,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1810,51,1810,52],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1810,53,1810,57],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1810,57,1810,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1813,11,1813,13],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[1813,14,1813,15],\"els\":[\"0:6358#out:1\",\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1813,16,1813,17],\"els\":[\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1813,17,1813,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1813,25,1813,26],\"els\":[\"0:7007:517\"]},{\"tk\":[1813,26,1813,27],\"els\":[\"0:7007:517\"]},{\"tk\":[1813,27,1813,34],\"els\":[\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1813,35,1813,36],\"els\":[\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1813,37,1813,41],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1813,41,1813,42],\"els\":[\"0:7007:517\"]},{\"tk\":[1813,42,1813,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1814,11,1814,40],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1814,40,1814,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1814,41,1814,65],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1814,65,1814,66],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1814,66,1814,67],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1814,67,1814,68],\"els\":[\"0:7007:517\"]},{\"tk\":[1814,69,1814,70],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1814,71,1814,73],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[1814,73,1814,74],\"els\":[\"0:7007:517\"]},{\"tk\":[1817,11,1817,40],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1817,40,1817,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1817,41,1817,48],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1817,48,1817,49],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1817,49,1817,50],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1817,50,1817,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1817,52,1817,53],\"els\":[\"0:6360#out:1\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1817,54,1817,56],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[1817,56,1817,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1822,11,1822,15],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1822,16,1822,17],\"els\":[\"0:6359#out:1\",\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1822,18,1822,47],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1822,47,1822,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1822,48,1822,52],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1822,52,1822,53],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1822,53,1822,54],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1822,54,1822,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1822,56,1822,57],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1822,58,1822,62],\"els\":[\"0:6359\",\"0:6360\",\"0:6352\",\"0:7007:517\"]},{\"tk\":[1822,62,1822,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1823,11,1823,40],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1823,40,1823,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1823,41,1823,46],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1823,46,1823,47],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1823,47,1823,48],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1823,48,1823,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1823,50,1823,51],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1823,52,1823,56],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1823,56,1823,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1826,11,1826,15],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1826,16,1826,18],\"els\":[\"0:6356#out:1\",\"0:6356\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1826,19,1826,23],\"els\":[\"0:6356\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1826,23,1826,24],\"els\":[\"0:7007:517\"]},{\"tk\":[1827,11,1827,40],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1827,40,1827,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1827,41,1827,47],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1827,47,1827,48],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1827,48,1827,49],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1827,49,1827,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1827,51,1827,52],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1827,53,1827,57],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1827,57,1827,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1830,11,1830,13],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[1830,14,1830,15],\"els\":[\"0:6358#out:1\",\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1830,16,1830,17],\"els\":[\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1830,17,1830,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1830,25,1830,26],\"els\":[\"0:7007:517\"]},{\"tk\":[1830,26,1830,27],\"els\":[\"0:7007:517\"]},{\"tk\":[1830,27,1830,34],\"els\":[\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1830,35,1830,36],\"els\":[\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1830,37,1830,41],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1830,41,1830,42],\"els\":[\"0:7007:517\"]},{\"tk\":[1830,42,1830,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1831,11,1831,40],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1831,40,1831,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1831,41,1831,65],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1831,65,1831,66],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1831,66,1831,67],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1831,67,1831,68],\"els\":[\"0:7007:517\"]},{\"tk\":[1831,69,1831,70],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1831,71,1831,73],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[1831,73,1831,74],\"els\":[\"0:7007:517\"]},{\"tk\":[1834,11,1834,40],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1834,40,1834,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1834,41,1834,48],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1834,48,1834,49],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1834,49,1834,50],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1834,50,1834,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1834,52,1834,53],\"els\":[\"0:6360#out:1\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1834,54,1834,56],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[1834,56,1834,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1839,11,1839,15],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1839,16,1839,17],\"els\":[\"0:6359#out:1\",\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1839,18,1839,47],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1839,47,1839,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1839,48,1839,52],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1839,52,1839,53],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1839,53,1839,54],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1839,54,1839,55],\"els\":[\"0:7007:517\"]},{\"tk\":[1839,56,1839,57],\"els\":[\"0:6359\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1839,58,1839,62],\"els\":[\"0:6359\",\"0:6360\",\"0:6352\",\"0:7007:517\"]},{\"tk\":[1839,62,1839,63],\"els\":[\"0:7007:517\"]},{\"tk\":[1840,11,1840,40],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1840,40,1840,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1840,41,1840,46],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1840,46,1840,47],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1840,47,1840,48],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1840,48,1840,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1840,50,1840,51],\"els\":[\"0:6359#out:1\",\"0:7007:517\"]},{\"tk\":[1840,52,1840,56],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1840,56,1840,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1843,11,1843,15],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1843,16,1843,18],\"els\":[\"0:6356#out:1\",\"0:6356\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1843,19,1843,23],\"els\":[\"0:6356\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1843,23,1843,24],\"els\":[\"0:7007:517\"]},{\"tk\":[1844,11,1844,40],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1844,40,1844,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1844,41,1844,47],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1844,47,1844,48],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1844,48,1844,49],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1844,49,1844,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1844,51,1844,52],\"els\":[\"0:6356#out:1\",\"0:7007:517\"]},{\"tk\":[1844,53,1844,57],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1844,57,1844,58],\"els\":[\"0:7007:517\"]},{\"tk\":[1847,11,1847,13],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[1847,14,1847,15],\"els\":[\"0:6358#out:1\",\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1847,16,1847,17],\"els\":[\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1847,17,1847,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1847,25,1847,26],\"els\":[\"0:7007:517\"]},{\"tk\":[1847,26,1847,27],\"els\":[\"0:7007:517\"]},{\"tk\":[1847,27,1847,34],\"els\":[\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1847,35,1847,36],\"els\":[\"0:6358\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1847,37,1847,41],\"els\":[\"0:6201:1632:499\",\"0:7007:517\"]},{\"tk\":[1847,41,1847,42],\"els\":[\"0:7007:517\"]},{\"tk\":[1847,42,1847,43],\"els\":[\"0:7007:517\"]},{\"tk\":[1848,11,1848,40],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1848,40,1848,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1848,41,1848,65],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1848,65,1848,66],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1848,66,1848,67],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1848,67,1848,68],\"els\":[\"0:7007:517\"]},{\"tk\":[1848,69,1848,70],\"els\":[\"0:6358#out:1\",\"0:7007:517\"]},{\"tk\":[1848,71,1848,73],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[1848,73,1848,74],\"els\":[\"0:7007:517\"]},{\"tk\":[1851,11,1851,40],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1851,40,1851,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1851,41,1851,48],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1851,48,1851,49],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1851,49,1851,50],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1851,50,1851,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1851,52,1851,53],\"els\":[\"0:6360#out:1\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1851,54,1851,56],\"els\":[\"0:6254:142\",\"0:7007:517\"]},{\"tk\":[1851,56,1851,57],\"els\":[\"0:7007:517\"]},{\"tk\":[1852,9,1852,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1852,11,1852,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1852,16,1852,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1856,11,1856,40],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1856,40,1856,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1856,41,1856,48],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1856,48,1856,49],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1856,49,1856,50],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1856,50,1856,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1856,52,1856,53],\"els\":[\"0:6360#out:1\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1856,54,1856,58],\"els\":[\"0:6360\",\"0:6361\",\"0:7007:517\"]},{\"tk\":[1856,58,1856,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1857,11,1857,40],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1857,40,1857,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1857,41,1857,48],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1857,48,1857,49],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1857,49,1857,50],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1857,50,1857,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1857,52,1857,53],\"els\":[\"0:6360#out:1\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1857,54,1857,58],\"els\":[\"0:6360\",\"0:6361\",\"0:7007:517\"]},{\"tk\":[1857,58,1857,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1858,11,1858,40],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1858,40,1858,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1858,41,1858,48],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1858,48,1858,49],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1858,49,1858,50],\"els\":[\"0:6360#out:1\",\"0:7007:517\"]},{\"tk\":[1858,50,1858,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1858,52,1858,53],\"els\":[\"0:6360#out:1\",\"0:6360\",\"0:7007:517\"]},{\"tk\":[1858,54,1858,58],\"els\":[\"0:6360\",\"0:6361\",\"0:7007:517\"]},{\"tk\":[1858,58,1858,59],\"els\":[\"0:7007:517\"]},{\"tk\":[1859,9,1859,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1864,9,1864,17],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1864,18,1864,36],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1864,37,1864,38],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1864,39,1864,48],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1864,48,1864,49],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1864,49,1864,54],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1864,54,1864,55],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1867,9,1867,10],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,11,1868,20],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,20,1868,21],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,21,1868,25],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,25,1868,26],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,26,1868,29],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,29,1868,30],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,30,1868,34],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,35,1868,36],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,37,1868,38],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,38,1868,46],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1868,46,1868,47],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1869,13,1869,14],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1869,14,1869,43],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1869,43,1869,44],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1869,44,1869,51],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1869,51,1869,52],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1869,52,1869,53],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1869,53,1869,54],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1869,54,1869,55],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1869,55,1869,56],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1870,9,1870,10],\"els\":[\"0:6383\",\"0:7007:517\"]},{\"tk\":[1873,9,1873,17],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1873,18,1873,36],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1873,37,1873,38],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1873,39,1873,48],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1873,48,1873,49],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1873,49,1873,54],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1873,54,1873,55],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1876,9,1876,10],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,11,1877,20],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,20,1877,21],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,21,1877,25],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,25,1877,26],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,26,1877,29],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,29,1877,30],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,30,1877,34],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,35,1877,36],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,37,1877,38],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,38,1877,46],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1877,46,1877,47],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1878,13,1878,14],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1878,14,1878,43],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1878,43,1878,44],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1878,44,1878,51],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1878,51,1878,52],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1878,52,1878,53],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1878,53,1878,54],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1878,54,1878,55],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1878,55,1878,56],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1879,9,1879,10],\"els\":[\"0:6384\",\"0:7007:517\"]},{\"tk\":[1882,9,1882,17],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1882,18,1882,36],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1882,37,1882,38],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1882,39,1882,48],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1882,48,1882,49],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1882,49,1882,54],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1882,54,1882,55],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1885,9,1885,10],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,11,1886,20],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,20,1886,21],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,21,1886,25],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,25,1886,26],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,26,1886,29],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,29,1886,30],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,30,1886,34],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,35,1886,36],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,37,1886,38],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,38,1886,46],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1886,46,1886,47],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1887,13,1887,14],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1887,14,1887,43],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1887,43,1887,44],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1887,44,1887,51],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1887,51,1887,52],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1887,52,1887,53],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1887,53,1887,54],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1887,54,1887,55],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1887,55,1887,56],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1888,9,1888,10],\"els\":[\"0:6385\",\"0:7007:517\"]},{\"tk\":[1891,9,1891,38],\"els\":[\"0:6919#out:1\",\"0:7007:517\"]},{\"tk\":[1891,38,1891,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1891,39,1891,47],\"els\":[\"0:6919#out:1\",\"0:7007:517\"]},{\"tk\":[1891,48,1891,49],\"els\":[\"0:6919#out:1\",\"0:6919\",\"0:7007:517\"]},{\"tk\":[1892,11,1892,40],\"els\":[\"0:6919\",\"0:7007:517\"]},{\"tk\":[1892,40,1892,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1892,41,1892,50],\"els\":[\"0:6919\",\"0:7007:517\"]},{\"tk\":[1892,50,1892,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1895,9,1895,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1896,11,1896,13],\"els\":[\"0:7007:517\"]},{\"tk\":[1896,14,1896,15],\"els\":[\"0:7007:517\"]},{\"tk\":[1896,15,1896,44],\"els\":[\"0:6747\",\"0:7007:517\"]},{\"tk\":[1896,44,1896,45],\"els\":[\"0:7007:517\"]},{\"tk\":[1896,45,1896,53],\"els\":[\"0:6747\",\"0:7007:517\"]},{\"tk\":[1896,53,1896,54],\"els\":[\"0:7007:517\"]},{\"tk\":[1896,55,1896,56],\"els\":[\"0:7007:517\"]},{\"tk\":[1897,13,1897,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1897,25,1897,26],\"els\":[\"0:7007:517\"]},{\"tk\":[1897,26,1897,32],\"els\":[\"0:7007:517\"]},{\"tk\":[1897,32,1897,33],\"els\":[\"0:7007:517\"]},{\"tk\":[1897,33,1897,36],\"els\":[\"0:7007:517\"]},{\"tk\":[1897,36,1897,37],\"els\":[\"0:7007:517\"]},{\"tk\":[1897,37,1897,44],\"els\":[\"0:7007:517\"]},{\"tk\":[1897,45,1897,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1897,47,1897,49],\"els\":[\"0:7007:517\"]},{\"tk\":[1897,49,1897,50],\"els\":[\"0:7007:517\"]},{\"tk\":[1898,11,1898,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1898,13,1898,17],\"els\":[\"0:7007:517\"]},{\"tk\":[1898,18,1898,19],\"els\":[\"0:7007:517\"]},{\"tk\":[1899,13,1899,25],\"els\":[\"0:7007:517\"]},{\"tk\":[1899,25,1899,26],\"els\":[\"0:7007:517\"]},{\"tk\":[1899,26,1899,34],\"els\":[\"0:7007:517\"]},{\"tk\":[1899,34,1899,35],\"els\":[\"0:7007:517\"]},{\"tk\":[1899,35,1899,38],\"els\":[\"0:7007:517\"]},{\"tk\":[1899,38,1899,39],\"els\":[\"0:7007:517\"]},{\"tk\":[1899,39,1899,46],\"els\":[\"0:7007:517\"]},{\"tk\":[1899,47,1899,48],\"els\":[\"0:7007:517\"]},{\"tk\":[1899,49,1899,51],\"els\":[\"0:7007:517\"]},{\"tk\":[1899,51,1899,52],\"els\":[\"0:7007:517\"]},{\"tk\":[1900,11,1900,12],\"els\":[\"0:7007:517\"]},{\"tk\":[1901,9,1901,10],\"els\":[\"0:7007:517\"]},{\"tk\":[1904,9,1904,10],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1907,11,1907,40],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1907,40,1907,41],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1907,41,1907,50],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1907,51,1907,52],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1907,53,1907,54],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1907,54,1907,68],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1907,68,1907,69],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1907,69,1907,79],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1907,79,1907,80],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1907,80,1907,81],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1908,9,1908,10],\"els\":[\"0:6379\",\"0:7007:517\"]},{\"tk\":[1911,9,1911,10],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1914,11,1914,40],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1914,40,1914,41],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1914,41,1914,50],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1914,51,1914,52],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1914,53,1914,54],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1914,54,1914,68],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1914,68,1914,69],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1914,69,1914,79],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1914,79,1914,80],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1914,80,1914,81],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1915,9,1915,10],\"els\":[\"0:6380\",\"0:7007:517\"]},{\"tk\":[1918,9,1918,40],\"els\":[\"0:6873:4\",\"0:7007:517\"]},{\"tk\":[1918,40,1918,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1918,41,1918,54],\"els\":[\"0:6873:4\",\"0:7007:517\"]},{\"tk\":[1918,55,1918,56],\"els\":[\"0:6873:4\",\"0:7007:517\"]},{\"tk\":[1919,11,1919,40],\"els\":[\"0:6873:4\",\"0:7007:517\"]},{\"tk\":[1919,40,1919,41],\"els\":[\"0:7007:517\"]},{\"tk\":[1919,41,1919,52],\"els\":[\"0:6873:4\",\"0:7007:517\"]},{\"tk\":[1919,52,1919,53],\"els\":[\"0:7007:517\"]},{\"tk\":[1920,7,1920,8],\"els\":[\"0:7007:517\"]},{\"tk\":[1951,7,1951,8],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1952,9,1952,16],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1952,17,1952,18],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1952,18,1952,19],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1953,9,1953,16],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1953,17,1953,23],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1953,24,1953,25],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1953,26,1953,33],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1953,33,1953,34],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1954,9,1954,17],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1954,18,1954,32],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1954,33,1954,34],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1954,35,1954,37],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1954,37,1954,38],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1957,9,1957,17],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1957,18,1957,25],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1957,25,1957,26],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1957,26,1957,27],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1957,27,1957,28],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1957,28,1957,29],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,9,1958,12],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,13,1958,14],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,14,1958,15],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,16,1958,17],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,18,1958,19],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,19,1958,20],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,21,1958,22],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,23,1958,24],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,25,1958,26],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,26,1958,27],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,28,1958,29],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,29,1958,31],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,31,1958,32],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1958,33,1958,34],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1959,11,1959,18],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1959,18,1959,19],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1959,19,1959,20],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1959,20,1959,21],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1959,22,1959,23],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1959,24,1959,26],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1959,26,1959,27],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1960,9,1960,10],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1962,9,1962,15],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1962,16,1962,17],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1962,18,1962,25],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1962,25,1962,26],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1965,9,1965,11],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1965,12,1965,13],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1965,13,1965,27],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1965,27,1965,28],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1965,29,1965,30],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,11,1966,17],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,18,1966,19],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,20,1966,28],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,28,1966,29],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,29,1966,36],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,36,1966,37],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,38,1966,39],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,39,1966,40],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,41,1966,42],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,42,1966,43],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1966,43,1966,44],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,11,1967,13],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,14,1967,15],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,15,1967,16],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,16,1967,22],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,23,1967,25],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,26,1967,33],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,33,1967,34],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,35,1967,37],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,38,1967,39],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,39,1967,45],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,46,1967,48],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,49,1967,60],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,60,1967,61],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,61,1967,62],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1967,63,1967,64],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1968,13,1968,42],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1968,42,1968,43],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1968,43,1968,53],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1968,54,1968,55],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1968,56,1968,59],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1968,59,1968,60],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1969,11,1969,12],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,11,1971,13],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,14,1971,15],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,15,1971,16],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,16,1971,22],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,23,1971,25],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,26,1971,33],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,33,1971,34],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,35,1971,37],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,38,1971,39],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,39,1971,45],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,46,1971,48],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,49,1971,60],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,60,1971,61],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,61,1971,62],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1971,63,1971,64],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,13,1972,19],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,19,1972,20],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,21,1972,22],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,22,1972,51],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,51,1972,52],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,52,1972,62],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,62,1972,63],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,64,1972,71],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,71,1972,72],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,72,1972,73],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,73,1972,74],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1972,74,1972,75],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1973,11,1973,12],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1974,9,1974,10],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1975,7,1975,8],\"els\":[\"0:6844\",\"0:7009:517\"]},{\"tk\":[1978,7,1978,36],\"els\":[\"0:7003#out:1\",\"0:7009:517\"]},{\"tk\":[1978,36,1978,37],\"els\":[\"0:7009:517\"]},{\"tk\":[1978,37,1978,57],\"els\":[\"0:7003#out:1\",\"0:7009:517\"]},{\"tk\":[1978,58,1978,59],\"els\":[\"0:7003#out:1\",\"0:7003\",\"0:7009:517\"]},{\"tk\":[1979,9,1979,10],\"els\":[\"0:7009:517\"]},{\"tk\":[1979,10,1979,39],\"els\":[\"0:7003\",\"0:7009:517\"]},{\"tk\":[1979,39,1979,40],\"els\":[\"0:7009:517\"]},{\"tk\":[1979,40,1979,50],\"els\":[\"0:7003\",\"0:7009:517\"]},{\"tk\":[1979,51,1979,53],\"els\":[\"0:7003\",\"0:7009:517\"]},{\"tk\":[1979,54,1979,58],\"els\":[\"0:7003\",\"0:7009:517\"]},{\"tk\":[1979,58,1979,59],\"els\":[\"0:7009:517\"]},{\"tk\":[1979,59,1979,60],\"els\":[\"0:7009:517\"]},{\"tk\":[1982,7,1982,38],\"els\":[\"0:6969\",\"0:7009:517\"]},{\"tk\":[1982,38,1982,39],\"els\":[\"0:7009:517\"]},{\"tk\":[1982,39,1982,45],\"els\":[\"0:6969\",\"0:7009:517\"]},{\"tk\":[1982,46,1982,47],\"els\":[\"0:6969\",\"0:7009:517\"]},{\"tk\":[1983,9,1983,38],\"els\":[\"0:6969\",\"0:7009:517\"]},{\"tk\":[1983,38,1983,39],\"els\":[\"0:7009:517\"]},{\"tk\":[1983,39,1983,59],\"els\":[\"0:6969\",\"0:7009:517\"]},{\"tk\":[1983,59,1983,60],\"els\":[\"0:7009:517\"]}]}}}","blocks":[{"RTWName":"<Root>/Combo Box1","SIDString":"mcb_pmsm_qep_offset_f28379d:6921"},{"RTWName":"<Root>/Combo Box2","SIDString":"mcb_pmsm_qep_offset_f28379d:6933"},{"RTWName":"<Root>/Data Store\nMemory29","SIDString":"mcb_pmsm_qep_offset_f28379d:6967"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:7013"},{"RTWName":"<Root>/Edit1","SIDString":"mcb_pmsm_qep_offset_f28379d:7001"},{"RTWName":"<Root>/Edit2","SIDString":"mcb_pmsm_qep_offset_f28379d:6923"},{"RTWName":"<Root>/Edit3","SIDString":"mcb_pmsm_qep_offset_f28379d:6924"},{"RTWName":"<Root>/Edit5","SIDString":"mcb_pmsm_qep_offset_f28379d:6925"},{"RTWName":"<S5>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:21"},{"RTWName":"<S7>/data","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:514"},{"RTWName":"<S8>/data","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:516"},{"RTWName":"<S8>/Hardware Interrupt","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:517"},{"RTWName":"<S8>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:518"},{"RTWName":"<S8>/msg","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:519"},{"RTWName":"<S4294967295>/data","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:521"},{"RTWName":"<S4294967295>/msg","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:522"},{"RTWName":"<S7>/msg","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:523"},{"RTWName":"<S5>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:177"},{"RTWName":"<S5>/event1 Task","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:970"},{"RTWName":"<S5>/event1","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:101"},{"RTWName":"<S6>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:21"},{"RTWName":"<S9>/data","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:514"},{"RTWName":"<S10>/data","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:516"},{"RTWName":"<S10>/Hardware Interrupt","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:517"},{"RTWName":"<S10>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:518"},{"RTWName":"<S10>/msg","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:519"},{"RTWName":"<S4294967295>/data","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:521"},{"RTWName":"<S4294967295>/msg","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:522"},{"RTWName":"<S9>/msg","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:523"},{"RTWName":"<S6>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:177"},{"RTWName":"<S6>/event1 Task","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:970"},{"RTWName":"<S6>/event1","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:101"},{"RTWName":"<S1>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:7010"},{"RTWName":"<S1>/HW_INT","SIDString":"mcb_pmsm_qep_offset_f28379d:7012"},{"RTWName":"<S2>/Digital Output2","SIDString":"mcb_pmsm_qep_offset_f28379d:6728"},{"RTWName":"<S2>/LED 1 Hz","SIDString":"mcb_pmsm_qep_offset_f28379d:6729"},{"RTWName":"<S3>/Trigger","SIDString":"mcb_pmsm_qep_offset_f28379d:6136"},{"RTWName":"<S3>/ADC_B_IN2","SIDString":"mcb_pmsm_qep_offset_f28379d:6379"},{"RTWName":"<S3>/ADC_C_IN2","SIDString":"mcb_pmsm_qep_offset_f28379d:6380"},{"RTWName":"<S3>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6963"},{"RTWName":"<S11>/Pos_PU","SIDString":"mcb_pmsm_qep_offset_f28379d:6139"},{"RTWName":"<S11>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6636"},{"RTWName":"<S11>/Data Store\nRead","SIDString":"mcb_pmsm_qep_offset_f28379d:6968"},{"RTWName":"<S17>/Ds","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:252"},{"RTWName":"<S17>/Qs","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1014"},{"RTWName":"<S17>/Sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:430"},{"RTWName":"<S17>/Cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1021"},{"RTWName":"<S4294967295>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:501"},{"RTWName":"<S26>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:517"},{"RTWName":"<S26>/SinCos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:518"},{"RTWName":"<S26>/thetaUnit","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:524"},{"RTWName":"<S26>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:519"},{"RTWName":"<S26>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:520"},{"RTWName":"<S27>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:458"},{"RTWName":"<S27>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:545"},{"RTWName":"<S27>/Data Type\nPropagation","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:673"},{"RTWName":"<S27>/Data Type Conversion1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:653"},{"RTWName":"<S27>/Get_FractionVal","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:630"},{"RTWName":"<S27>/Get_Integer","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:608"},{"RTWName":"<S29>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:706"},{"RTWName":"<S29>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:707"},{"RTWName":"<S29>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:613"},{"RTWName":"<S29>/Product","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:616"},{"RTWName":"<S29>/Product1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:621"},{"RTWName":"<S29>/Sum3","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:614"},{"RTWName":"<S29>/Sum4","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:615"},{"RTWName":"<S29>/Sum5","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:622"},{"RTWName":"<S29>/Sum6","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:623"},{"RTWName":"<S29>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:708"},{"RTWName":"<S29>/Out2","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:709"},{"RTWName":"<S27>/Lookup","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:557"},{"RTWName":"<S27>/Sum","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:610"},{"RTWName":"<S27>/Sum2","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:612"},{"RTWName":"<S30>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:668"},{"RTWName":"<S30>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:692"},{"RTWName":"<S30>/Data Type Conversion","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:702"},{"RTWName":"<S30>/If","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:683"},{"RTWName":"<S32>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:685"},{"RTWName":"<S32>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:686"},{"RTWName":"<S32>/Convert_back","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:695"},{"RTWName":"<S32>/Convert_uint16","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:694"},{"RTWName":"<S32>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:679"},{"RTWName":"<S32>/Sum","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:693"},{"RTWName":"<S32>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:687"},{"RTWName":"<S33>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:689"},{"RTWName":"<S33>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:690"},{"RTWName":"<S33>/Convert_back","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:698"},{"RTWName":"<S33>/Convert_uint16","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:697"},{"RTWName":"<S33>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:699"},{"RTWName":"<S33>/Sum","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:700"},{"RTWName":"<S33>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:691"},{"RTWName":"<S30>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:696"},{"RTWName":"<S30>/convert_pu","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:652"},{"RTWName":"<S30>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:669"},{"RTWName":"<S31>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:714"},{"RTWName":"<S34>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:716"},{"RTWName":"<S34>/Data Type Conversion","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:723"},{"RTWName":"<S34>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:717"},{"RTWName":"<S35>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:719"},{"RTWName":"<S35>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:720"},{"RTWName":"<S31>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:721"},{"RTWName":"<S27>/indexing","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:605"},{"RTWName":"<S27>/offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:657"},{"RTWName":"<S27>/sine_table_values","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:549"},{"RTWName":"<S27>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:248"},{"RTWName":"<S27>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:531"},{"RTWName":"<S28>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:529"},{"RTWName":"<S28>/Trig Fcn IQN","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:530"},{"RTWName":"<S28>/Trig Fcn IQN1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:533"},{"RTWName":"<S28>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:531"},{"RTWName":"<S28>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:532"},{"RTWName":"<S4294967295>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:508"},{"RTWName":"<S4294967295>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:510"},{"RTWName":"<S4294967295>/Ds","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:907"},{"RTWName":"<S4294967295>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:905"},{"RTWName":"<S4294967295>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:906"},{"RTWName":"<S4294967295>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:933"},{"RTWName":"<S4294967295>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:931"},{"RTWName":"<S36>/Ds","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:985"},{"RTWName":"<S36>/Qs","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:986"},{"RTWName":"<S36>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:987"},{"RTWName":"<S36>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:988"},{"RTWName":"<S36>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:989"},{"RTWName":"<S36>/Data Type\nDuplicate1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:990"},{"RTWName":"<S37>/A","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:992"},{"RTWName":"<S37>/B","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:993"},{"RTWName":"<S37>/D_axis_aligned","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:994"},{"RTWName":"<S37>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:995"},{"RTWName":"<S37>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:996"},{"RTWName":"<S37>/Q_axis_aligned","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:997"},{"RTWName":"<S37>/Switch","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:998"},{"RTWName":"<S37>/Unary_Minus","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:999"},{"RTWName":"<S37>/Alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1000"},{"RTWName":"<S37>/Beta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1001"},{"RTWName":"<S36>/a16","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1002"},{"RTWName":"<S36>/dcos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1003"},{"RTWName":"<S36>/dsin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1004"},{"RTWName":"<S36>/qcos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1005"},{"RTWName":"<S36>/qsin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1006"},{"RTWName":"<S36>/sum_alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1007"},{"RTWName":"<S36>/sum_beta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1008"},{"RTWName":"<S36>/Alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1009"},{"RTWName":"<S36>/Beta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1010"},{"RTWName":"<S4294967295>/Alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:929"},{"RTWName":"<S21>/Ds","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:779"},{"RTWName":"<S21>/Qs","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:780"},{"RTWName":"<S21>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:781"},{"RTWName":"<S21>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:782"},{"RTWName":"<S21>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:760"},{"RTWName":"<S21>/Data Type\nDuplicate1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:762"},{"RTWName":"<S22>/A","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:749"},{"RTWName":"<S22>/B","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:750"},{"RTWName":"<S22>/D_axis_aligned","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:751"},{"RTWName":"<S22>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:752"},{"RTWName":"<S22>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:753"},{"RTWName":"<S22>/Q_axis_aligned","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:754"},{"RTWName":"<S22>/Switch","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:755"},{"RTWName":"<S22>/Unary_Minus","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:756"},{"RTWName":"<S22>/Alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:757"},{"RTWName":"<S22>/Beta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:758"},{"RTWName":"<S21>/a16","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:761"},{"RTWName":"<S21>/dcos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:431"},{"RTWName":"<S21>/dsin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:435"},{"RTWName":"<S21>/qcos","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:434"},{"RTWName":"<S21>/qsin","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:433"},{"RTWName":"<S21>/sum_alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:432"},{"RTWName":"<S21>/sum_beta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:436"},{"RTWName":"<S21>/Alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:783"},{"RTWName":"<S21>/Beta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:784"},{"RTWName":"<S17>/Alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:268"},{"RTWName":"<S17>/Beta","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:1013"},{"RTWName":"<S11>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6182"},{"RTWName":"<S18>/Pos_In","SIDString":"mcb_pmsm_qep_offset_f28379d:6682"},{"RTWName":"<S18>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6744"},{"RTWName":"<S23>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6684:1"},{"RTWName":"<S23>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6684:2"},{"RTWName":"<S23>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6684:3"},{"RTWName":"<S23>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6684:4"},{"RTWName":"<S18>/NOT","SIDString":"mcb_pmsm_qep_offset_f28379d:6974"},{"RTWName":"<S24>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6973"},{"RTWName":"<S24>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6971"},{"RTWName":"<S24>/Data Store\nWrite","SIDString":"mcb_pmsm_qep_offset_f28379d:6970"},{"RTWName":"<S25>/ThetaIn","SIDString":"mcb_pmsm_qep_offset_f28379d:6688"},{"RTWName":"<S25>/Count","SIDString":"mcb_pmsm_qep_offset_f28379d:6689"},{"RTWName":"<S27>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6957:1"},{"RTWName":"<S27>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6957:2"},{"RTWName":"<S27>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6957:3"},{"RTWName":"<S27>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6957:4"},{"RTWName":"<S25>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6771"},{"RTWName":"<S25>/Count for 10 sec","SIDString":"mcb_pmsm_qep_offset_f28379d:6955"},{"RTWName":"<S25>/Count for 2 sec","SIDString":"mcb_pmsm_qep_offset_f28379d:6956"},{"RTWName":"<S25>/If","SIDString":"mcb_pmsm_qep_offset_f28379d:6690"},{"RTWName":"<S28>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6692"},{"RTWName":"<S28>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6693"},{"RTWName":"<S28>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6694"},{"RTWName":"<S29>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6703"},{"RTWName":"<S29>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6704"},{"RTWName":"<S29>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6705"},{"RTWName":"<S29>/Delay","SIDString":"mcb_pmsm_qep_offset_f28379d:6706"},{"RTWName":"<S29>/Multiply","SIDString":"mcb_pmsm_qep_offset_f28379d:6707"},{"RTWName":"<S29>/Saturate to\n'motor.calibSpeed' RPM","SIDString":"mcb_pmsm_qep_offset_f28379d:6708"},{"RTWName":"<S29>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6709"},{"RTWName":"<S25>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6710"},{"RTWName":"<S30>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1214"},{"RTWName":"<S32>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1181"},{"RTWName":"<S32>/Theta_e_prev","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1194"},{"RTWName":"<S32>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1182"},{"RTWName":"<S32>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1183"},{"RTWName":"<S32>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1184"},{"RTWName":"<S32>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1209"},{"RTWName":"<S32>/Data Type Conversion","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1195"},{"RTWName":"<S32>/Data Type Conversion1","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1215"},{"RTWName":"<S32>/Delay","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1210"},{"RTWName":"<S33>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1211"},{"RTWName":"<S33>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1207"},{"RTWName":"<S33>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1206"},{"RTWName":"<S32>/theta_e","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1188"},{"RTWName":"<S30>/Constant_Reset","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1216"},{"RTWName":"<S30>/Data Type\nDuplicate2","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1192"},{"RTWName":"<S30>/NOT","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1179"},{"RTWName":"<S30>/Unit Delay","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1187"},{"RTWName":"<S30>/scaleIn","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1202"},{"RTWName":"<S30>/scaleOut","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1189"},{"RTWName":"<S30>/eps","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:863"},{"RTWName":"<S31>/ThetaIn","SIDString":"mcb_pmsm_qep_offset_f28379d:6773"},{"RTWName":"<S31>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6775"},{"RTWName":"<S31>/Multiply","SIDString":"mcb_pmsm_qep_offset_f28379d:6699"},{"RTWName":"<S31>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6774"},{"RTWName":"<S25>/Switch","SIDString":"mcb_pmsm_qep_offset_f28379d:6770"},{"RTWName":"<S25>/Eps","SIDString":"mcb_pmsm_qep_offset_f28379d:6712"},{"RTWName":"<S25>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6713"},{"RTWName":"<S26>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6760"},{"RTWName":"<S26>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6683"},{"RTWName":"<S26>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6685"},{"RTWName":"<S26>/Delay","SIDString":"mcb_pmsm_qep_offset_f28379d:6686"},{"RTWName":"<S26>/Count","SIDString":"mcb_pmsm_qep_offset_f28379d:6759"},{"RTWName":"<S18>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6714"},{"RTWName":"<S18>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6715"},{"RTWName":"<S18>/EnPWM","SIDString":"mcb_pmsm_qep_offset_f28379d:6716"},{"RTWName":"<S19>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:501"},{"RTWName":"<S4294967295>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:517"},{"RTWName":"<S4294967295>/SinCos","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:518"},{"RTWName":"<S4294967295>/thetaUnit","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:524"},{"RTWName":"<S4294967295>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:519"},{"RTWName":"<S4294967295>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:520"},{"RTWName":"<S34>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:458"},{"RTWName":"<S34>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:545"},{"RTWName":"<S34>/Data Type\nPropagation","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:673"},{"RTWName":"<S34>/Data Type Conversion1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:653"},{"RTWName":"<S34>/Get_FractionVal","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:630"},{"RTWName":"<S34>/Get_Integer","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:608"},{"RTWName":"<S35>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:706"},{"RTWName":"<S35>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:707"},{"RTWName":"<S35>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:613"},{"RTWName":"<S35>/Product","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:616"},{"RTWName":"<S35>/Product1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:621"},{"RTWName":"<S35>/Sum3","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:614"},{"RTWName":"<S35>/Sum4","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:615"},{"RTWName":"<S35>/Sum5","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:622"},{"RTWName":"<S35>/Sum6","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:623"},{"RTWName":"<S35>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:708"},{"RTWName":"<S35>/Out2","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:709"},{"RTWName":"<S34>/Lookup","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:557"},{"RTWName":"<S34>/Sum","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:610"},{"RTWName":"<S34>/Sum2","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:612"},{"RTWName":"<S36>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:668"},{"RTWName":"<S38>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:692:1"},{"RTWName":"<S38>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:692:2"},{"RTWName":"<S38>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:692:3"},{"RTWName":"<S38>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:692:5"},{"RTWName":"<S36>/Data Type Conversion","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:702"},{"RTWName":"<S36>/If","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:683"},{"RTWName":"<S39>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:685"},{"RTWName":"<S39>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:686"},{"RTWName":"<S39>/Convert_back","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:695"},{"RTWName":"<S39>/Convert_uint16","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:694"},{"RTWName":"<S39>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:679"},{"RTWName":"<S39>/Sum","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:693"},{"RTWName":"<S39>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:687"},{"RTWName":"<S40>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:689"},{"RTWName":"<S40>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:690"},{"RTWName":"<S40>/Convert_back","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:698"},{"RTWName":"<S40>/Convert_uint16","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:697"},{"RTWName":"<S40>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:699"},{"RTWName":"<S40>/Sum","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:700"},{"RTWName":"<S40>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:691"},{"RTWName":"<S36>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:696"},{"RTWName":"<S36>/convert_pu","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:652"},{"RTWName":"<S36>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:669"},{"RTWName":"<S37>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:714"},{"RTWName":"<S4294967295>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:716"},{"RTWName":"<S4294967295>/Data Type Conversion","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:723"},{"RTWName":"<S4294967295>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:717"},{"RTWName":"<S41>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:719"},{"RTWName":"<S41>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:720"},{"RTWName":"<S37>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:721"},{"RTWName":"<S34>/indexing","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:605"},{"RTWName":"<S34>/offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:657"},{"RTWName":"<S34>/sine_table_values","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:549"},{"RTWName":"<S34>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:248"},{"RTWName":"<S34>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:531"},{"RTWName":"<S4294967295>/Theta","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:529"},{"RTWName":"<S4294967295>/Trig Fcn IQN","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:530"},{"RTWName":"<S4294967295>/Trig Fcn IQN1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:533"},{"RTWName":"<S4294967295>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:531"},{"RTWName":"<S4294967295>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:532"},{"RTWName":"<S19>/sin","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:508"},{"RTWName":"<S19>/cos","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:510"},{"RTWName":"<S20>/Va","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:831"},{"RTWName":"<S20>/Vb","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:832"},{"RTWName":"<S20>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1549"},{"RTWName":"<S20>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:834"},{"RTWName":"<S42>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1210"},{"RTWName":"<S4294967295>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1212"},{"RTWName":"<S4294967295>/Gain1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1631"},{"RTWName":"<S71>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1612"},{"RTWName":"<Root>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1112"},{"RTWName":"<Root>/AND","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1113"},{"RTWName":"<Root>/AND1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1114"},{"RTWName":"<Root>/AND2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1115"},{"RTWName":"<Root>/AND3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1116"},{"RTWName":"<Root>/AND4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1117"},{"RTWName":"<Root>/AND5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1118"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1119"},{"RTWName":"<Root>/Relational\nOperator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1120"},{"RTWName":"<Root>/Relational\nOperator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1121"},{"RTWName":"<Root>/Relational\nOperator10","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1122"},{"RTWName":"<Root>/Relational\nOperator11","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1123"},{"RTWName":"<Root>/Relational\nOperator2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1124"},{"RTWName":"<Root>/Relational\nOperator3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1125"},{"RTWName":"<Root>/Relational\nOperator4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1126"},{"RTWName":"<Root>/Relational\nOperator5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1127"},{"RTWName":"<Root>/Relational\nOperator6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1128"},{"RTWName":"<Root>/Relational\nOperator7","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1129"},{"RTWName":"<Root>/Relational\nOperator8","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1130"},{"RTWName":"<Root>/Relational\nOperator9","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1131"},{"RTWName":"<Root>/Sec1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1132"},{"RTWName":"<Root>/Sec2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1133"},{"RTWName":"<Root>/Sec3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1134"},{"RTWName":"<Root>/Sec4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1135"},{"RTWName":"<Root>/Sec5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1136"},{"RTWName":"<Root>/Sec6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213:1137"},{"RTWName":"<S71>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1214"},{"RTWName":"<S71>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1613"},{"RTWName":"<S71>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1614"},{"RTWName":"<S71>/U_3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1615"},{"RTWName":"<S71>/U_4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1616"},{"RTWName":"<S71>/U_5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1617"},{"RTWName":"<S71>/U_6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1618"},{"RTWName":"<S72>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1222"},{"RTWName":"<S72>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1223"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1224:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1224:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1224:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1224:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1225:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1225:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1225:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1225:5"},{"RTWName":"<S72>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1226"},{"RTWName":"<S72>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1227"},{"RTWName":"<S72>/In3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1228"},{"RTWName":"<S72>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1229"},{"RTWName":"<S72>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1230"},{"RTWName":"<S72>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1231"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232:933"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232:934"},{"RTWName":"<Root>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232:935"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232:936"},{"RTWName":"<Root>/Add3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232:937"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232:938"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232:939"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232:940"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232:941"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232:942"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233:1002"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233:1005"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233:1006"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233:1007"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233:1008"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233:1009"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233:1010"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233:1013"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233:1011"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233:1012"},{"RTWName":"<S72>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1234"},{"RTWName":"<S73>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1236"},{"RTWName":"<S73>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1237"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1238:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1238:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1238:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1238:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1239:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1239:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1239:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1239:5"},{"RTWName":"<S73>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1240"},{"RTWName":"<S73>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1241"},{"RTWName":"<S73>/In3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1242"},{"RTWName":"<S73>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1243"},{"RTWName":"<S73>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1244"},{"RTWName":"<S73>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1245"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246:990"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246:993"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246:994"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246:995"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246:996"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246:997"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246:998"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246:1001"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246:999"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246:1000"},{"RTWName":"<Root>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247:964"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247:967"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247:968"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247:969"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247:970"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247:971"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247:972"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247:975"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247:973"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247:974"},{"RTWName":"<S73>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1248"},{"RTWName":"<S74>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1250"},{"RTWName":"<S74>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1251"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1252:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1252:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1252:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1252:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1253:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1253:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1253:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1253:5"},{"RTWName":"<S74>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1254"},{"RTWName":"<S74>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1255"},{"RTWName":"<S74>/In3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1256"},{"RTWName":"<S74>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1257"},{"RTWName":"<S74>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1258"},{"RTWName":"<S74>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1259"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260:990"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260:993"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260:994"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260:995"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260:996"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260:997"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260:998"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260:1001"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260:999"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260:1000"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261:959"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261:950"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261:951"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261:952"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261:953"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261:954"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261:955"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261:958"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261:956"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261:957"},{"RTWName":"<S74>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1262"},{"RTWName":"<S75>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1264"},{"RTWName":"<S75>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1265"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1266:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1266:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1266:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1266:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1267:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1267:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1267:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1267:5"},{"RTWName":"<S75>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1268"},{"RTWName":"<S75>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1269"},{"RTWName":"<S75>/In3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1270"},{"RTWName":"<S75>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1271"},{"RTWName":"<S75>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1272"},{"RTWName":"<S75>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1273"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274:1014"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274:1017"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274:1018"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274:1019"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274:1020"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274:1021"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274:1022"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274:1025"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274:1023"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274:1024"},{"RTWName":"<Root>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275:964"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275:967"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275:968"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275:969"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275:970"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275:971"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275:972"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275:975"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275:973"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275:974"},{"RTWName":"<S75>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1276"},{"RTWName":"<S76>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1278"},{"RTWName":"<S76>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1279"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1280:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1280:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1280:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1280:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1281:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1281:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1281:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1281:5"},{"RTWName":"<S76>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1282"},{"RTWName":"<S76>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1283"},{"RTWName":"<S76>/In3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1284"},{"RTWName":"<S76>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1285"},{"RTWName":"<S76>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1286"},{"RTWName":"<S76>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1287"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288:933"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288:934"},{"RTWName":"<Root>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288:935"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288:936"},{"RTWName":"<Root>/Add3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288:937"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288:938"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288:939"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288:940"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288:941"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288:942"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289:1014"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289:1017"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289:1018"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289:1019"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289:1020"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289:1021"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289:1022"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289:1025"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289:1023"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289:1024"},{"RTWName":"<S76>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1290"},{"RTWName":"<S77>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1292"},{"RTWName":"<S77>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1293"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1294:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1294:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1294:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1294:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1295:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1295:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1295:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1295:5"},{"RTWName":"<S77>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1296"},{"RTWName":"<S77>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1297"},{"RTWName":"<S77>/In3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1298"},{"RTWName":"<S77>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1299"},{"RTWName":"<S77>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1300"},{"RTWName":"<S77>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1301"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302:959"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302:950"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302:951"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302:952"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302:953"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302:954"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302:955"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302:958"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302:956"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302:957"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303:1002"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303:1005"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303:1006"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303:1007"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303:1008"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303:1009"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303:1010"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303:1013"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303:1011"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303:1012"},{"RTWName":"<S77>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1304"},{"RTWName":"<S71>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1619"},{"RTWName":"<S4294967295>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1305"},{"RTWName":"<S4294967295>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1307"},{"RTWName":"<S78>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1592"},{"RTWName":"<Root>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1112"},{"RTWName":"<Root>/AND","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1113"},{"RTWName":"<Root>/AND1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1114"},{"RTWName":"<Root>/AND2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1115"},{"RTWName":"<Root>/AND3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1116"},{"RTWName":"<Root>/AND4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1117"},{"RTWName":"<Root>/AND5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1118"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1119"},{"RTWName":"<Root>/Relational\nOperator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1120"},{"RTWName":"<Root>/Relational\nOperator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1121"},{"RTWName":"<Root>/Relational\nOperator10","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1122"},{"RTWName":"<Root>/Relational\nOperator11","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1123"},{"RTWName":"<Root>/Relational\nOperator2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1124"},{"RTWName":"<Root>/Relational\nOperator3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1125"},{"RTWName":"<Root>/Relational\nOperator4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1126"},{"RTWName":"<Root>/Relational\nOperator5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1127"},{"RTWName":"<Root>/Relational\nOperator6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1128"},{"RTWName":"<Root>/Relational\nOperator7","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1129"},{"RTWName":"<Root>/Relational\nOperator8","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1130"},{"RTWName":"<Root>/Relational\nOperator9","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1131"},{"RTWName":"<Root>/Sec1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1132"},{"RTWName":"<Root>/Sec2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1133"},{"RTWName":"<Root>/Sec3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1134"},{"RTWName":"<Root>/Sec4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1135"},{"RTWName":"<Root>/Sec5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1136"},{"RTWName":"<Root>/Sec6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308:1137"},{"RTWName":"<S78>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1309"},{"RTWName":"<S78>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1593"},{"RTWName":"<S78>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1594"},{"RTWName":"<S78>/U_3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1595"},{"RTWName":"<S78>/U_4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1596"},{"RTWName":"<S78>/U_5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1597"},{"RTWName":"<S78>/U_6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1598"},{"RTWName":"<S79>/1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1443"},{"RTWName":"<S79>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1447"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1437:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1437:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1437:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1437:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1438:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1438:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1438:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1438:5"},{"RTWName":"<S79>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1434"},{"RTWName":"<S79>/Merge1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1432"},{"RTWName":"<S79>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1435"},{"RTWName":"<S79>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1436"},{"RTWName":"<S79>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1444"},{"RTWName":"<S79>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1445"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316:933"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316:934"},{"RTWName":"<Root>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316:935"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316:936"},{"RTWName":"<Root>/Add3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316:937"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316:938"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316:939"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316:940"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316:941"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316:942"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430:1002"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430:1005"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430:1006"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430:1007"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430:1008"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430:1009"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430:1010"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430:1013"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430:1011"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430:1012"},{"RTWName":"<S79>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1446"},{"RTWName":"<S80>/1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1495"},{"RTWName":"<S80>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1493"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1496:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1496:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1496:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1496:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1497:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1497:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1497:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1497:5"},{"RTWName":"<S80>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1498"},{"RTWName":"<S80>/Merge1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1499"},{"RTWName":"<S80>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1500"},{"RTWName":"<S80>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1501"},{"RTWName":"<S80>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1502"},{"RTWName":"<S80>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1503"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507:990"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507:993"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507:994"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507:995"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507:996"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507:997"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507:998"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507:1001"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507:999"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507:1000"},{"RTWName":"<Root>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508:964"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508:967"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508:968"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508:969"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508:970"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508:971"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508:972"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508:975"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508:973"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508:974"},{"RTWName":"<S80>/Out2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1506"},{"RTWName":"<S81>/1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1476"},{"RTWName":"<S81>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1477"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1478:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1478:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1478:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1478:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1479:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1479:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1479:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1479:5"},{"RTWName":"<S81>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1480"},{"RTWName":"<S81>/Merge1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1481"},{"RTWName":"<S81>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1482"},{"RTWName":"<S81>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1483"},{"RTWName":"<S81>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1484"},{"RTWName":"<S81>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1485"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490:990"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490:993"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490:994"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490:995"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490:996"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490:997"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490:998"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490:1001"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490:999"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490:1000"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489:959"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489:950"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489:951"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489:952"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489:953"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489:954"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489:955"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489:958"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489:956"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489:957"},{"RTWName":"<S81>/Out2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1488"},{"RTWName":"<S82>/1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1533"},{"RTWName":"<S82>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1534"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1535:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1535:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1535:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1535:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1536:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1536:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1536:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1536:5"},{"RTWName":"<S82>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1537"},{"RTWName":"<S82>/Merge1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1538"},{"RTWName":"<S82>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1539"},{"RTWName":"<S82>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1540"},{"RTWName":"<S82>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1541"},{"RTWName":"<S82>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1542"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547:933"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547:934"},{"RTWName":"<Root>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547:935"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547:936"},{"RTWName":"<Root>/Add3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547:937"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547:938"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547:939"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547:940"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547:941"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547:942"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546:1014"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546:1017"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546:1018"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546:1019"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546:1020"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546:1021"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546:1022"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546:1025"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546:1023"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546:1024"},{"RTWName":"<S82>/Out2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1545"},{"RTWName":"<S83>/1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1514"},{"RTWName":"<S83>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1515"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1516:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1516:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1516:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1516:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1517:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1517:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1517:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1517:5"},{"RTWName":"<S83>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1518"},{"RTWName":"<S83>/Merge1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1519"},{"RTWName":"<S83>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1520"},{"RTWName":"<S83>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1521"},{"RTWName":"<S83>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1522"},{"RTWName":"<S83>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1523"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528:1014"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528:1017"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528:1018"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528:1019"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528:1020"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528:1021"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528:1022"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528:1025"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528:1023"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528:1024"},{"RTWName":"<Root>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527:964"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527:967"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527:968"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527:969"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527:970"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527:971"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527:972"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527:975"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527:973"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527:974"},{"RTWName":"<S83>/Out2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1526"},{"RTWName":"<S84>/1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1458"},{"RTWName":"<S84>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1452"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1459:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1459:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1459:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1459:5"},{"RTWName":"<Root>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1460:1"},{"RTWName":"<Root>/Compare","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1460:2"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1460:3"},{"RTWName":"<Root>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1460:5"},{"RTWName":"<S84>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1461"},{"RTWName":"<S84>/Merge1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1462"},{"RTWName":"<S84>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1463"},{"RTWName":"<S84>/Terminator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1464"},{"RTWName":"<S84>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1465"},{"RTWName":"<S84>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1466"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471:959"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471:950"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471:951"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471:952"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471:953"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471:954"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471:955"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471:958"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471:956"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471:957"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470:1002"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470:1005"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470:1006"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470:1007"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470:1008"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470:1009"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470:1010"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470:1013"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470:1011"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470:1012"},{"RTWName":"<S84>/Out2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1469"},{"RTWName":"<S78>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1599"},{"RTWName":"<S4294967295>/Gain","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1629"},{"RTWName":"<S4294967295>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1322"},{"RTWName":"<S4294967295>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1325"},{"RTWName":"<S85>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1561"},{"RTWName":"<Root>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1112"},{"RTWName":"<Root>/AND","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1113"},{"RTWName":"<Root>/AND1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1114"},{"RTWName":"<Root>/AND2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1115"},{"RTWName":"<Root>/AND3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1116"},{"RTWName":"<Root>/AND4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1117"},{"RTWName":"<Root>/AND5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1118"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1119"},{"RTWName":"<Root>/Relational\nOperator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1120"},{"RTWName":"<Root>/Relational\nOperator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1121"},{"RTWName":"<Root>/Relational\nOperator10","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1122"},{"RTWName":"<Root>/Relational\nOperator11","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1123"},{"RTWName":"<Root>/Relational\nOperator2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1124"},{"RTWName":"<Root>/Relational\nOperator3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1125"},{"RTWName":"<Root>/Relational\nOperator4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1126"},{"RTWName":"<Root>/Relational\nOperator5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1127"},{"RTWName":"<Root>/Relational\nOperator6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1128"},{"RTWName":"<Root>/Relational\nOperator7","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1129"},{"RTWName":"<Root>/Relational\nOperator8","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1130"},{"RTWName":"<Root>/Relational\nOperator9","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1131"},{"RTWName":"<Root>/Sec1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1132"},{"RTWName":"<Root>/Sec2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1133"},{"RTWName":"<Root>/Sec3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1134"},{"RTWName":"<Root>/Sec4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1135"},{"RTWName":"<Root>/Sec5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1136"},{"RTWName":"<Root>/Sec6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326:1137"},{"RTWName":"<S85>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1327"},{"RTWName":"<S85>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1562"},{"RTWName":"<S85>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1563"},{"RTWName":"<S85>/U_3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1564"},{"RTWName":"<S85>/U_4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1565"},{"RTWName":"<S85>/U_5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1566"},{"RTWName":"<S85>/U_6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1567"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334:933"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334:934"},{"RTWName":"<Root>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334:935"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334:936"},{"RTWName":"<Root>/Add3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334:937"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334:938"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334:939"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334:940"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334:941"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334:942"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335:990"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335:993"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335:994"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335:995"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335:996"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335:997"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335:998"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335:1001"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335:999"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335:1000"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336:959"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336:950"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336:951"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336:952"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336:953"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336:954"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336:955"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336:958"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336:956"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336:957"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337:1014"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337:1017"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337:1018"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337:1019"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337:1020"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337:1021"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337:1022"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337:1025"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337:1023"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337:1024"},{"RTWName":"<Root>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338:964"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338:967"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338:968"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338:969"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338:970"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338:971"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338:972"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338:975"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338:973"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338:974"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339:1002"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339:1005"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339:1006"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339:1007"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339:1008"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339:1009"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339:1010"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339:1013"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339:1011"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339:1012"},{"RTWName":"<S85>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1568"},{"RTWName":"<S4294967295>/Gain","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1569"},{"RTWName":"<S4294967295>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1340"},{"RTWName":"<S4294967295>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1343"},{"RTWName":"<S86>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1572"},{"RTWName":"<Root>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1112"},{"RTWName":"<Root>/AND","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1113"},{"RTWName":"<Root>/AND1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1114"},{"RTWName":"<Root>/AND2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1115"},{"RTWName":"<Root>/AND3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1116"},{"RTWName":"<Root>/AND4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1117"},{"RTWName":"<Root>/AND5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1118"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1119"},{"RTWName":"<Root>/Relational\nOperator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1120"},{"RTWName":"<Root>/Relational\nOperator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1121"},{"RTWName":"<Root>/Relational\nOperator10","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1122"},{"RTWName":"<Root>/Relational\nOperator11","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1123"},{"RTWName":"<Root>/Relational\nOperator2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1124"},{"RTWName":"<Root>/Relational\nOperator3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1125"},{"RTWName":"<Root>/Relational\nOperator4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1126"},{"RTWName":"<Root>/Relational\nOperator5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1127"},{"RTWName":"<Root>/Relational\nOperator6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1128"},{"RTWName":"<Root>/Relational\nOperator7","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1129"},{"RTWName":"<Root>/Relational\nOperator8","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1130"},{"RTWName":"<Root>/Relational\nOperator9","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1131"},{"RTWName":"<Root>/Sec1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1132"},{"RTWName":"<Root>/Sec2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1133"},{"RTWName":"<Root>/Sec3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1134"},{"RTWName":"<Root>/Sec4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1135"},{"RTWName":"<Root>/Sec5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1136"},{"RTWName":"<Root>/Sec6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344:1137"},{"RTWName":"<S86>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1345"},{"RTWName":"<S86>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1573"},{"RTWName":"<S86>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1574"},{"RTWName":"<S86>/U_3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1575"},{"RTWName":"<S86>/U_4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1576"},{"RTWName":"<S86>/U_5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1577"},{"RTWName":"<S86>/U_6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1578"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352:933"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352:934"},{"RTWName":"<Root>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352:935"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352:936"},{"RTWName":"<Root>/Add3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352:937"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352:938"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352:939"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352:940"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352:941"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352:942"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353:990"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353:993"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353:994"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353:995"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353:996"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353:997"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353:998"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353:1001"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353:999"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353:1000"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354:959"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354:950"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354:951"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354:952"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354:953"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354:954"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354:955"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354:958"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354:956"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354:957"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355:1014"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355:1017"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355:1018"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355:1019"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355:1020"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355:1021"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355:1022"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355:1025"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355:1023"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355:1024"},{"RTWName":"<Root>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356:964"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356:967"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356:968"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356:969"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356:970"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356:971"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356:972"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356:975"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356:973"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356:974"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357:1002"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357:1005"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357:1006"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357:1007"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357:1008"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357:1009"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357:1010"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357:1013"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357:1011"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357:1012"},{"RTWName":"<S86>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1579"},{"RTWName":"<S4294967295>/Gain1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1627"},{"RTWName":"<S4294967295>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1358"},{"RTWName":"<S4294967295>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1361"},{"RTWName":"<S87>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1582"},{"RTWName":"<Root>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1112"},{"RTWName":"<Root>/AND","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1113"},{"RTWName":"<Root>/AND1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1114"},{"RTWName":"<Root>/AND2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1115"},{"RTWName":"<Root>/AND3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1116"},{"RTWName":"<Root>/AND4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1117"},{"RTWName":"<Root>/AND5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1118"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1119"},{"RTWName":"<Root>/Relational\nOperator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1120"},{"RTWName":"<Root>/Relational\nOperator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1121"},{"RTWName":"<Root>/Relational\nOperator10","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1122"},{"RTWName":"<Root>/Relational\nOperator11","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1123"},{"RTWName":"<Root>/Relational\nOperator2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1124"},{"RTWName":"<Root>/Relational\nOperator3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1125"},{"RTWName":"<Root>/Relational\nOperator4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1126"},{"RTWName":"<Root>/Relational\nOperator5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1127"},{"RTWName":"<Root>/Relational\nOperator6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1128"},{"RTWName":"<Root>/Relational\nOperator7","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1129"},{"RTWName":"<Root>/Relational\nOperator8","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1130"},{"RTWName":"<Root>/Relational\nOperator9","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1131"},{"RTWName":"<Root>/Sec1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1132"},{"RTWName":"<Root>/Sec2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1133"},{"RTWName":"<Root>/Sec3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1134"},{"RTWName":"<Root>/Sec4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1135"},{"RTWName":"<Root>/Sec5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1136"},{"RTWName":"<Root>/Sec6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362:1137"},{"RTWName":"<S87>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1363"},{"RTWName":"<S87>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1583"},{"RTWName":"<S87>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1584"},{"RTWName":"<S87>/U_3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1585"},{"RTWName":"<S87>/U_4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1586"},{"RTWName":"<S87>/U_5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1587"},{"RTWName":"<S87>/U_6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1588"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370:933"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370:934"},{"RTWName":"<Root>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370:935"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370:936"},{"RTWName":"<Root>/Add3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370:937"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370:938"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370:939"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370:940"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370:941"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370:942"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371:933"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371:934"},{"RTWName":"<Root>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371:935"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371:936"},{"RTWName":"<Root>/Add3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371:937"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371:938"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371:939"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371:940"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371:941"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371:942"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372:959"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372:950"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372:951"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372:952"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372:953"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372:954"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372:955"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372:958"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372:956"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372:957"},{"RTWName":"<Root>/Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373:959"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373:950"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373:951"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373:952"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373:953"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373:954"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373:955"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373:958"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373:956"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373:957"},{"RTWName":"<Root>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374:964"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374:967"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374:968"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374:969"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374:970"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374:971"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374:972"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374:975"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374:973"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374:974"},{"RTWName":"<Root>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375:964"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375:967"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375:968"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375:969"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375:970"},{"RTWName":"<Root>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375:971"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375:972"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375:975"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375:973"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375:974"},{"RTWName":"<S87>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1589"},{"RTWName":"<S4294967295>/Gain","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1628"},{"RTWName":"<S4294967295>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1376"},{"RTWName":"<S4294967295>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1379"},{"RTWName":"<S88>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1602"},{"RTWName":"<Root>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1112"},{"RTWName":"<Root>/AND","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1113"},{"RTWName":"<Root>/AND1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1114"},{"RTWName":"<Root>/AND2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1115"},{"RTWName":"<Root>/AND3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1116"},{"RTWName":"<Root>/AND4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1117"},{"RTWName":"<Root>/AND5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1118"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1119"},{"RTWName":"<Root>/Relational\nOperator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1120"},{"RTWName":"<Root>/Relational\nOperator1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1121"},{"RTWName":"<Root>/Relational\nOperator10","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1122"},{"RTWName":"<Root>/Relational\nOperator11","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1123"},{"RTWName":"<Root>/Relational\nOperator2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1124"},{"RTWName":"<Root>/Relational\nOperator3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1125"},{"RTWName":"<Root>/Relational\nOperator4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1126"},{"RTWName":"<Root>/Relational\nOperator5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1127"},{"RTWName":"<Root>/Relational\nOperator6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1128"},{"RTWName":"<Root>/Relational\nOperator7","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1129"},{"RTWName":"<Root>/Relational\nOperator8","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1130"},{"RTWName":"<Root>/Relational\nOperator9","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1131"},{"RTWName":"<Root>/Sec1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1132"},{"RTWName":"<Root>/Sec2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1133"},{"RTWName":"<Root>/Sec3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1134"},{"RTWName":"<Root>/Sec4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1135"},{"RTWName":"<Root>/Sec5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1136"},{"RTWName":"<Root>/Sec6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380:1137"},{"RTWName":"<S88>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1381"},{"RTWName":"<S88>/U_1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1603"},{"RTWName":"<S88>/U_2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1604"},{"RTWName":"<S88>/U_3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1605"},{"RTWName":"<S88>/U_4","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1606"},{"RTWName":"<S88>/U_5","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1607"},{"RTWName":"<S88>/U_6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1608"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388:990"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388:993"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388:994"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388:995"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388:996"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388:997"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388:998"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388:1001"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388:999"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388:1000"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389:990"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389:993"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389:994"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389:995"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389:996"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389:997"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389:998"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389:1001"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389:999"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389:1000"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390:1014"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390:1017"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390:1018"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390:1019"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390:1020"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390:1021"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390:1022"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390:1025"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390:1023"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390:1024"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391:1014"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391:1017"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391:1018"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391:1019"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391:1020"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391:1021"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391:1022"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391:1025"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391:1023"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391:1024"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392:1002"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392:1005"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392:1006"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392:1007"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392:1008"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392:1009"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392:1010"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392:1013"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392:1011"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392:1012"},{"RTWName":"<Root>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393:1002"},{"RTWName":"<Root>/Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393:1005"},{"RTWName":"<Root>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393:1006"},{"RTWName":"<Root>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393:1007"},{"RTWName":"<Root>/Add6","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393:1008"},{"RTWName":"<Root>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393:1009"},{"RTWName":"<Root>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393:1010"},{"RTWName":"<Root>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393:1013"},{"RTWName":"<Root>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393:1011"},{"RTWName":"<Root>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393:1012"},{"RTWName":"<S88>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1609"},{"RTWName":"<S4294967295>/Gain","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1630"},{"RTWName":"<S4294967295>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1394"},{"RTWName":"<S44>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1397"},{"RTWName":"<S44>/Add1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1407"},{"RTWName":"<S44>/Add2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1408"},{"RTWName":"<S44>/Add3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1409"},{"RTWName":"<S44>/Demux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1410"},{"RTWName":"<S44>/Gain","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1551"},{"RTWName":"<S45>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1399"},{"RTWName":"<S45>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1400"},{"RTWName":"<S45>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1401"},{"RTWName":"<S45>/Demux2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1402"},{"RTWName":"<S45>/Max","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1403"},{"RTWName":"<S45>/Min","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1404"},{"RTWName":"<S45>/one_by_two","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1405"},{"RTWName":"<S45>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1406"},{"RTWName":"<S44>/Mux2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1411"},{"RTWName":"<S44>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1412"},{"RTWName":"<S4294967295>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1414"},{"RTWName":"<S4294967295>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1415"},{"RTWName":"<S42>/modWave","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1416"},{"RTWName":"<S20>/Vc","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1644"},{"RTWName":"<S43>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1194"},{"RTWName":"<S43>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1195"},{"RTWName":"<S43>/In3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1196"},{"RTWName":"<S4294967295>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1198"},{"RTWName":"<S4294967295>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1199"},{"RTWName":"<S4294967295>/In3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1200"},{"RTWName":"<S4294967295>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1201"},{"RTWName":"<S4294967295>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1202"},{"RTWName":"<S46>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1204"},{"RTWName":"<S46>/In2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1205"},{"RTWName":"<S46>/In3","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1558"},{"RTWName":"<S47>/alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:272"},{"RTWName":"<S47>/beta","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:585"},{"RTWName":"<S4294967295>/alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:534"},{"RTWName":"<S4294967295>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:540"},{"RTWName":"<S4294967295>/Gain","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:543"},{"RTWName":"<S4294967295>/Gain1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:544"},{"RTWName":"<S4294967295>/Kabc","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:581"},{"RTWName":"<S4294967295>/Kc","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:571"},{"RTWName":"<S4294967295>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:541"},{"RTWName":"<S4294967295>/Sum","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:542"},{"RTWName":"<S4294967295>/Sum1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:545"},{"RTWName":"<S4294967295>/Sum2","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:546"},{"RTWName":"<S4294967295>/a","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:536"},{"RTWName":"<S48>/alpha","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:507"},{"RTWName":"<S48>/beta","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:508"},{"RTWName":"<S48>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:500"},{"RTWName":"<S48>/Ka","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:565"},{"RTWName":"<S48>/Kb","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:566"},{"RTWName":"<S48>/Kc","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:567"},{"RTWName":"<S48>/add_b","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:490"},{"RTWName":"<S48>/add_c","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:499"},{"RTWName":"<S48>/one_by_two","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:493"},{"RTWName":"<S48>/sqrt3_by_two","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:492"},{"RTWName":"<S48>/a","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:509"},{"RTWName":"<S48>/b","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:510"},{"RTWName":"<S48>/c","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:511"},{"RTWName":"<S47>/a","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:288"},{"RTWName":"<S47>/b","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:586"},{"RTWName":"<S47>/c","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:587"},{"RTWName":"<S46>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1207"},{"RTWName":"<S46>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1559"},{"RTWName":"<S46>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1208"},{"RTWName":"<S43>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1209"},{"RTWName":"<S20>/Va0","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:835"},{"RTWName":"<S20>/Vb0","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:836"},{"RTWName":"<S20>/Vc0","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:837"},{"RTWName":"<S11>/Vd_Ref","SIDString":"mcb_pmsm_qep_offset_f28379d:6983"},{"RTWName":"<S11>/Vabc in PU","SIDString":"mcb_pmsm_qep_offset_f28379d:6214"},{"RTWName":"<S11>/EnPWM","SIDString":"mcb_pmsm_qep_offset_f28379d:6717"},{"RTWName":"<S11>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6664"},{"RTWName":"<S12>/Data2_Log","SIDString":"mcb_pmsm_qep_offset_f28379d:6638"},{"RTWName":"<S12>/Data1_Log","SIDString":"mcb_pmsm_qep_offset_f28379d:6551"},{"RTWName":"<S49>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6860"},{"RTWName":"<S4294967295>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6862"},{"RTWName":"<S4294967295>/Data Type Conversion","SIDString":"mcb_pmsm_qep_offset_f28379d:6863"},{"RTWName":"<S4294967295>/Data Type Conversion3","SIDString":"mcb_pmsm_qep_offset_f28379d:6864"},{"RTWName":"<S4294967295>/Data_Log","SIDString":"mcb_pmsm_qep_offset_f28379d:6865"},{"RTWName":"<S52>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6867"},{"RTWName":"<S52>/Byte Pack","SIDString":"mcb_pmsm_qep_offset_f28379d:6868"},{"RTWName":"<S52>/Data_Log","SIDString":"mcb_pmsm_qep_offset_f28379d:6869"},{"RTWName":"<S49>/Data_Log","SIDString":"mcb_pmsm_qep_offset_f28379d:6870"},{"RTWName":"<S50>/Data_Log","SIDString":"mcb_pmsm_qep_offset_f28379d:6872"},{"RTWName":"<S53>/Data Type\nPropagation","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:1"},{"RTWName":"<S53>/Force to be scalar","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:2"},{"RTWName":"<S57>/u","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:3:1"},{"RTWName":"<S57>/FixPt\nConstant","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:3:2"},{"RTWName":"<S57>/FixPt\nData Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:3:3"},{"RTWName":"<S57>/FixPt\nSum1","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:3:4"},{"RTWName":"<S57>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:3:5"},{"RTWName":"<S53>/Output","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:4"},{"RTWName":"<S58>/U","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:5:1"},{"RTWName":"<S58>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:5:4"},{"RTWName":"<S58>/FixPt\nData Type\nDuplicate1","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:5:2"},{"RTWName":"<S58>/FixPt\nSwitch","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:5:3"},{"RTWName":"<S58>/Y","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:5:5"},{"RTWName":"<S53>/y","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:6"},{"RTWName":"<S54>/Data","SIDString":"mcb_pmsm_qep_offset_f28379d:6875"},{"RTWName":"<S54>/Data_width","SIDString":"mcb_pmsm_qep_offset_f28379d:6876"},{"RTWName":"<S54>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6877"},{"RTWName":"<S54>/Dummy","SIDString":"mcb_pmsm_qep_offset_f28379d:6878"},{"RTWName":"<S54>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:6879"},{"RTWName":"<S54>/Data_out","SIDString":"mcb_pmsm_qep_offset_f28379d:6880"},{"RTWName":"<S54>/Iteration","SIDString":"mcb_pmsm_qep_offset_f28379d:6881"},{"RTWName":"<S55>/Data","SIDString":"mcb_pmsm_qep_offset_f28379d:6883"},{"RTWName":"<S55>/Data_width","SIDString":"mcb_pmsm_qep_offset_f28379d:6884"},{"RTWName":"<S55>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6885"},{"RTWName":"<S55>/Bias","SIDString":"mcb_pmsm_qep_offset_f28379d:6886"},{"RTWName":"<S55>/End","SIDString":"mcb_pmsm_qep_offset_f28379d:6887"},{"RTWName":"<S55>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:6888"},{"RTWName":"<S55>/Data_out","SIDString":"mcb_pmsm_qep_offset_f28379d:6889"},{"RTWName":"<S55>/Iteration","SIDString":"mcb_pmsm_qep_offset_f28379d:6890"},{"RTWName":"<S50>/If","SIDString":"mcb_pmsm_qep_offset_f28379d:6891"},{"RTWName":"<S50>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6892"},{"RTWName":"<S50>/Merge1","SIDString":"mcb_pmsm_qep_offset_f28379d:6893"},{"RTWName":"<S50>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:6894"},{"RTWName":"<S56>/Data","SIDString":"mcb_pmsm_qep_offset_f28379d:6896"},{"RTWName":"<S56>/Data_width","SIDString":"mcb_pmsm_qep_offset_f28379d:6897"},{"RTWName":"<S56>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6898"},{"RTWName":"<S56>/Bias","SIDString":"mcb_pmsm_qep_offset_f28379d:6899"},{"RTWName":"<S56>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:6900"},{"RTWName":"<S56>/Start","SIDString":"mcb_pmsm_qep_offset_f28379d:6901"},{"RTWName":"<S56>/Data_out","SIDString":"mcb_pmsm_qep_offset_f28379d:6902"},{"RTWName":"<S56>/Iteration","SIDString":"mcb_pmsm_qep_offset_f28379d:6903"},{"RTWName":"<S50>/Width","SIDString":"mcb_pmsm_qep_offset_f28379d:6904"},{"RTWName":"<S50>/SCI_Tx","SIDString":"mcb_pmsm_qep_offset_f28379d:6905"},{"RTWName":"<S12>/Demux2","SIDString":"mcb_pmsm_qep_offset_f28379d:6907"},{"RTWName":"<S12>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:6908"},{"RTWName":"<S51>/Data","SIDString":"mcb_pmsm_qep_offset_f28379d:6910"},{"RTWName":"<S51>/Iteration","SIDString":"mcb_pmsm_qep_offset_f28379d:6911"},{"RTWName":"<S51>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6912"},{"RTWName":"<S51>/Index\nVector","SIDString":"mcb_pmsm_qep_offset_f28379d:6913"},{"RTWName":"<S51>/SCI Transmit","SIDString":"mcb_pmsm_qep_offset_f28379d:6914"},{"RTWName":"<S51>/While Iterator","SIDString":"mcb_pmsm_qep_offset_f28379d:6915"},{"RTWName":"<S13>/Iab_meas_ADC","SIDString":"mcb_pmsm_qep_offset_f28379d:6487"},{"RTWName":"<S13>/Pos_meas_eQEP","SIDString":"mcb_pmsm_qep_offset_f28379d:6488"},{"RTWName":"<S13>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6264"},{"RTWName":"<S13>/Terminator","SIDString":"mcb_pmsm_qep_offset_f28379d:6838"},{"RTWName":"<S59>/Count","SIDString":"mcb_pmsm_qep_offset_f28379d:6249"},{"RTWName":"<S59>/Index","SIDString":"mcb_pmsm_qep_offset_f28379d:6250"},{"RTWName":"<S60>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:873"},{"RTWName":"<S62>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:876"},{"RTWName":"<S62>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:994"},{"RTWName":"<S62>/Npp","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:997"},{"RTWName":"<S4294967295>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:879"},{"RTWName":"<S4294967295>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:992"},{"RTWName":"<S4294967295>/Npp","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:999"},{"RTWName":"<S4294967295>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:881"},{"RTWName":"<S4294967295>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:882"},{"RTWName":"<S4294967295>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:883"},{"RTWName":"<S4294967295>/Data Type Conversion","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1040"},{"RTWName":"<S4294967295>/Data Type Conversion1","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:884"},{"RTWName":"<S4294967295>/Data Type Conversion2","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:885"},{"RTWName":"<S4294967295>/Data Type Conversion4","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:886"},{"RTWName":"<S4294967295>/Sum1","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:888"},{"RTWName":"<S4294967295>/Switch","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:889"},{"RTWName":"<S112>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1028"},{"RTWName":"<S112>/Npp","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1029"},{"RTWName":"<S113>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1031"},{"RTWName":"<S113>/Number of pole pairs","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:887"},{"RTWName":"<S113>/Npp*ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1033"},{"RTWName":"<S114>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1035"},{"RTWName":"<S114>/Npp","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1036"},{"RTWName":"<S114>/Product","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1037"},{"RTWName":"<S114>/Npp*ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1038"},{"RTWName":"<S112>/Npp*ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1039"},{"RTWName":"<S4294967295>/ϴe","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:890"},{"RTWName":"<S63>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:892"},{"RTWName":"<S63>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:993"},{"RTWName":"<S63>/Npp","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:998"},{"RTWName":"<S64>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:895"},{"RTWName":"<S64>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:896"},{"RTWName":"<S64>/If","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:897"},{"RTWName":"<S66>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:899"},{"RTWName":"<S66>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:900"},{"RTWName":"<S66>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:901"},{"RTWName":"<S66>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:902"},{"RTWName":"<S66>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:903"},{"RTWName":"<S66>/ϴm_out","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:904"},{"RTWName":"<S67>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:906"},{"RTWName":"<S67>/Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:907"},{"RTWName":"<S67>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:908"},{"RTWName":"<S67>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:909"},{"RTWName":"<S67>/ϴm_out","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:910"},{"RTWName":"<S64>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:911"},{"RTWName":"<S64>/ϴm_out","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:912"},{"RTWName":"<S63>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:913"},{"RTWName":"<S63>/Constant1","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:914"},{"RTWName":"<S63>/Data Type\nDuplicate","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:915"},{"RTWName":"<S65>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:917"},{"RTWName":"<S65>/Npp","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1013"},{"RTWName":"<S65>/Add","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:918"},{"RTWName":"<S65>/Floor","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:919"},{"RTWName":"<S65>/Multiply","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:920"},{"RTWName":"<S65>/Multiply1","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:921"},{"RTWName":"<S68>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1015"},{"RTWName":"<S68>/Npp","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1024"},{"RTWName":"<S69>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1017"},{"RTWName":"<S69>/Number of pole pairs","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:922"},{"RTWName":"<S69>/Npp*ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1018"},{"RTWName":"<S4294967295>/ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1020"},{"RTWName":"<S4294967295>/Npp","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1025"},{"RTWName":"<S4294967295>/Product","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1026"},{"RTWName":"<S4294967295>/Npp*ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1021"},{"RTWName":"<S68>/Npp*ϴm","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1022"},{"RTWName":"<S65>/ϴe","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:924"},{"RTWName":"<S63>/Switch","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:925"},{"RTWName":"<S63>/ϴe","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:926"},{"RTWName":"<S62>/ϴe","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:927"},{"RTWName":"<S60>/ReplaceInport_Npp","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1064"},{"RTWName":"<S60>/ReplaceInport_Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1065"},{"RTWName":"<S60>/ϴe","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:875"},{"RTWName":"<S61>/Count","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:118"},{"RTWName":"<S61>/IndexCount","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:257"},{"RTWName":"<S70>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:158"},{"RTWName":"<S4294967295>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:160"},{"RTWName":"<S4294967295>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:161"},{"RTWName":"<S74>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:163"},{"RTWName":"<S74>/DTC","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:164"},{"RTWName":"<S74>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:165"},{"RTWName":"<S70>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:166"},{"RTWName":"<S61>/If1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:120"},{"RTWName":"<S61>/Merge","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:121"},{"RTWName":"<S71>/Index","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:124"},{"RTWName":"<S71>/Count","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:125"},{"RTWName":"<S71>/CountsPerRev","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:198"},{"RTWName":"<S71>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:126"},{"RTWName":"<S71>/MinMax","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:142"},{"RTWName":"<S71>/Sum3","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:130"},{"RTWName":"<S71>/Sum7","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:131"},{"RTWName":"<S75>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:212:213"},{"RTWName":"<S76>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:212:215"},{"RTWName":"<S76>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:212:216"},{"RTWName":"<S4294967295>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:212:218"},{"RTWName":"<S4294967295>/Data Type Conversion","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:212:219"},{"RTWName":"<S4294967295>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:212:220"},{"RTWName":"<S75>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:212:221"},{"RTWName":"<S71>/Position","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:132"},{"RTWName":"<S72>/Count","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:134"},{"RTWName":"<S72>/Action Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:135"},{"RTWName":"<S72>/Position","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:136"},{"RTWName":"<S61>/Product","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:211"},{"RTWName":"<S61>/ReplaceInport_CountsPerRev","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:318"},{"RTWName":"<S61>/ReplaceInport_OneByCountsPerRev","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:319"},{"RTWName":"<S61>/ResetMode","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:137"},{"RTWName":"<S73>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:199:200"},{"RTWName":"<S77>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:199:202"},{"RTWName":"<S77>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:199:203"},{"RTWName":"<S4294967295>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:199:205"},{"RTWName":"<S4294967295>/Gain","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:199:207"},{"RTWName":"<S4294967295>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:199:208"},{"RTWName":"<S73>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:199:209"},{"RTWName":"<S61>/Position","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:138"},{"RTWName":"<S59>/Theta_e","SIDString":"mcb_pmsm_qep_offset_f28379d:6256"},{"RTWName":"<S13>/Pos_PU","SIDString":"mcb_pmsm_qep_offset_f28379d:6492"},{"RTWName":"<S3>/Mux","SIDString":"mcb_pmsm_qep_offset_f28379d:6218"},{"RTWName":"<S3>/Mux1","SIDString":"mcb_pmsm_qep_offset_f28379d:6381"},{"RTWName":"<S14>/PWM_Duty","SIDString":"mcb_pmsm_qep_offset_f28379d:6351"},{"RTWName":"<S14>/EnPWM","SIDString":"mcb_pmsm_qep_offset_f28379d:6718"},{"RTWName":"<S14>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6352"},{"RTWName":"<S14>/Gain","SIDString":"mcb_pmsm_qep_offset_f28379d:6356"},{"RTWName":"<S14>/Mux2","SIDString":"mcb_pmsm_qep_offset_f28379d:6357"},{"RTWName":"<S14>/Scale_to_PWM_Counter_PRD","SIDString":"mcb_pmsm_qep_offset_f28379d:6358"},{"RTWName":"<S14>/Sum","SIDString":"mcb_pmsm_qep_offset_f28379d:6359"},{"RTWName":"<S14>/Switch4","SIDString":"mcb_pmsm_qep_offset_f28379d:6360"},{"RTWName":"<S14>/stop","SIDString":"mcb_pmsm_qep_offset_f28379d:6361"},{"RTWName":"<S14>/Duty Output","SIDString":"mcb_pmsm_qep_offset_f28379d:6362"},{"RTWName":"<S14>/EnPWMOut","SIDString":"mcb_pmsm_qep_offset_f28379d:6958"},{"RTWName":"<S15>/PWM Duty Cycle","SIDString":"mcb_pmsm_qep_offset_f28379d:6365"},{"RTWName":"<S15>/EnPWM","SIDString":"mcb_pmsm_qep_offset_f28379d:6959"},{"RTWName":"<S15>/Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6916"},{"RTWName":"<S15>/DRV830x Enable","SIDString":"mcb_pmsm_qep_offset_f28379d:6747"},{"RTWName":"<S15>/Demux","SIDString":"mcb_pmsm_qep_offset_f28379d:6366"},{"RTWName":"<S15>/NOT","SIDString":"mcb_pmsm_qep_offset_f28379d:6918"},{"RTWName":"<S15>/Switch","SIDString":"mcb_pmsm_qep_offset_f28379d:6919"},{"RTWName":"<S15>/ePWM1","SIDString":"mcb_pmsm_qep_offset_f28379d:6383"},{"RTWName":"<S15>/ePWM2","SIDString":"mcb_pmsm_qep_offset_f28379d:6384"},{"RTWName":"<S15>/ePWM3","SIDString":"mcb_pmsm_qep_offset_f28379d:6385"},{"RTWName":"<S16>/Data Type","SIDString":"mcb_pmsm_qep_offset_f28379d:6986"},{"RTWName":"<S16>/Event Listener","SIDString":"mcb_pmsm_qep_offset_f28379d:6998"},{"RTWName":"<S16>/Inverter","SIDString":"mcb_pmsm_qep_offset_f28379d:6987"},{"RTWName":"<S16>/Number of pole pairs","SIDString":"mcb_pmsm_qep_offset_f28379d:6988"},{"RTWName":"<S16>/PWM Frequency","SIDString":"mcb_pmsm_qep_offset_f28379d:6989"},{"RTWName":"<S16>/QEP Slits","SIDString":"mcb_pmsm_qep_offset_f28379d:6991"},{"RTWName":"<S16>/Terminator2","SIDString":"mcb_pmsm_qep_offset_f28379d:6993"},{"RTWName":"<S16>/Terminator3","SIDString":"mcb_pmsm_qep_offset_f28379d:6994"},{"RTWName":"<S16>/Terminator4","SIDString":"mcb_pmsm_qep_offset_f28379d:6995"},{"RTWName":"<S16>/Terminator5","SIDString":"mcb_pmsm_qep_offset_f28379d:6996"},{"RTWName":"<S16>/Terminator6","SIDString":"mcb_pmsm_qep_offset_f28379d:6997"},{"RTWName":"<S3>/Switch","SIDString":"mcb_pmsm_qep_offset_f28379d:6966"},{"RTWName":"<S3>/eQEP","SIDString":"mcb_pmsm_qep_offset_f28379d:6382"},{"RTWName":"<S4>/SCI_Rx_INT","SIDString":"mcb_pmsm_qep_offset_f28379d:6734"},{"RTWName":"<S4294967295>/SCI Receive","SIDString":"mcb_pmsm_qep_offset_f28379d:6841"},{"RTWName":"<S4294967295>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6842"},{"RTWName":"<S80>/SCI Receive","SIDString":"mcb_pmsm_qep_offset_f28379d:6844"},{"RTWName":"<S80>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6845"},{"RTWName":"<S78>/Out1","SIDString":"mcb_pmsm_qep_offset_f28379d:6846"},{"RTWName":"<S4>/Data Store\nWrite","SIDString":"mcb_pmsm_qep_offset_f28379d:6969"},{"RTWName":"<S4>/Data Type Conversion","SIDString":"mcb_pmsm_qep_offset_f28379d:7003"},{"RTWName":"<S79>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6849"},{"RTWName":"<S4294967295>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6851"},{"RTWName":"<S4294967295>/Data Type Conversion1","SIDString":"mcb_pmsm_qep_offset_f28379d:6852"},{"RTWName":"<S4294967295>/Data Type Conversion2","SIDString":"mcb_pmsm_qep_offset_f28379d:6853"},{"RTWName":"<S4294967295>/Out","SIDString":"mcb_pmsm_qep_offset_f28379d:6854"},{"RTWName":"<S81>/In1","SIDString":"mcb_pmsm_qep_offset_f28379d:6856"},{"RTWName":"<S81>/Out","SIDString":"mcb_pmsm_qep_offset_f28379d:6857"},{"RTWName":"<S79>/Out","SIDString":"mcb_pmsm_qep_offset_f28379d:6858"},{"RTWName":"<Root>/HW Interrupt","SIDString":"mcb_pmsm_qep_offset_f28379d:7011"},{"RTWName":"<S1>/HWI_ADCB1_INT","SIDString":"mcb_pmsm_qep_offset_f28379d:7007"},{"RTWName":"<S5>/ECSoC","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:513"},{"RTWName":"<S7>/ECSimCodegen","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:515"},{"RTWName":"<S7>/SoCSim","SIDString":"mcb_pmsm_qep_offset_f28379d:7007:520"},{"RTWName":"<S1>/HWI_SCIA_RX_INT","SIDString":"mcb_pmsm_qep_offset_f28379d:7009"},{"RTWName":"<S6>/ECSoC","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:513"},{"RTWName":"<S9>/ECSimCodegen","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:515"},{"RTWName":"<S9>/SoCSim","SIDString":"mcb_pmsm_qep_offset_f28379d:7009:520"},{"RTWName":"<Root>/Heartbeat LED","SIDString":"mcb_pmsm_qep_offset_f28379d:6727"},{"RTWName":"<Root>/Offset Calculation","SIDString":"mcb_pmsm_qep_offset_f28379d:6132"},{"RTWName":"<S3>/Control_System","SIDString":"mcb_pmsm_qep_offset_f28379d:6137"},{"RTWName":"<S11>/Inverse Park Transform","SIDString":"mcb_pmsm_qep_offset_f28379d:6181"},{"RTWName":"<S17>/Sine Cosine","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850"},{"RTWName":"<S4294967295>/SinCos_Subsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:516"},{"RTWName":"<S4294967295>/Sine-Cosine Lookup","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76"},{"RTWName":"<S27>/Interpolation","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:705"},{"RTWName":"<S27>/WrapUp","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:667"},{"RTWName":"<S30>/If Action\nSubsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:684"},{"RTWName":"<S30>/If Action\nSubsystem1","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:688"},{"RTWName":"<S27>/datatype","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:713"},{"RTWName":"<S31>/datatype backpropogation","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:715"},{"RTWName":"<S31>/datatype no change","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:76:718"},{"RTWName":"<S4294967295>/Trig Fcn IQN","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:850:528"},{"RTWName":"<S17>/Three inputs","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:904"},{"RTWName":"<S4294967295>/Two inputs CRL","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:984"},{"RTWName":"<S36>/Switch_Axis","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:991"},{"RTWName":"<S17>/Two inputs CRL","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:778"},{"RTWName":"<S21>/Switch_Axis","SIDString":"mcb_pmsm_qep_offset_f28379d:6181:748"},{"RTWName":"<S11>/PosGen","SIDString":"mcb_pmsm_qep_offset_f28379d:6681"},{"RTWName":"<S18>/Enable PWM for 15 seconds","SIDString":"mcb_pmsm_qep_offset_f28379d:6684"},{"RTWName":"<S18>/Subsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6972"},{"RTWName":"<S18>/Subsystem1","SIDString":"mcb_pmsm_qep_offset_f28379d:6687"},{"RTWName":"<S25>/Compare\nTo Constant","SIDString":"mcb_pmsm_qep_offset_f28379d:6957"},{"RTWName":"<S25>/If Action\nSubsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6691"},{"RTWName":"<S25>/If Action\nSubsystem2","SIDString":"mcb_pmsm_qep_offset_f28379d:6702"},{"RTWName":"<S25>/Position Generator","SIDString":"mcb_pmsm_qep_offset_f28379d:6711"},{"RTWName":"<S30>/Accumulate","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1180"},{"RTWName":"<S32>/Subsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6711:1204"},{"RTWName":"<S25>/Subsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6772"},{"RTWName":"<S18>/Up Counter","SIDString":"mcb_pmsm_qep_offset_f28379d:6758"},{"RTWName":"<S11>/Sine-Cosine Lookup","SIDString":"mcb_pmsm_qep_offset_f28379d:6200"},{"RTWName":"<S19>/SinCos_Subsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:516"},{"RTWName":"<S19>/Sine-Cosine Lookup","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76"},{"RTWName":"<S34>/Interpolation","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:705"},{"RTWName":"<S34>/WrapUp","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:667"},{"RTWName":"<S36>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:692"},{"RTWName":"<S36>/If Action\nSubsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:684"},{"RTWName":"<S36>/If Action\nSubsystem1","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:688"},{"RTWName":"<S34>/datatype","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:713"},{"RTWName":"<S37>/datatype backpropogation","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:715"},{"RTWName":"<S37>/datatype no change","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:76:718"},{"RTWName":"<S19>/Trig Fcn IQN","SIDString":"mcb_pmsm_qep_offset_f28379d:6200:528"},{"RTWName":"<S11>/Space Vector Generator","SIDString":"mcb_pmsm_qep_offset_f28379d:6201"},{"RTWName":"<S20>/Modulation method","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:869"},{"RTWName":"<S42>/30 DPWM","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1211"},{"RTWName":"<S4294967295>/Subsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1611"},{"RTWName":"<S71>/Identify Sector","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1213"},{"RTWName":"<S71>/a+ c-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1221"},{"RTWName":"<S72>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1224"},{"RTWName":"<S72>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1225"},{"RTWName":"<S72>/a+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1232"},{"RTWName":"<S72>/c-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1233"},{"RTWName":"<S71>/a- c+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1235"},{"RTWName":"<S73>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1238"},{"RTWName":"<S73>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1239"},{"RTWName":"<S73>/a-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1246"},{"RTWName":"<S73>/c+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1247"},{"RTWName":"<S71>/b+ a-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1249"},{"RTWName":"<S74>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1252"},{"RTWName":"<S74>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1253"},{"RTWName":"<S74>/a-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1260"},{"RTWName":"<S74>/b+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1261"},{"RTWName":"<S71>/c+ b-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1263"},{"RTWName":"<S75>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1266"},{"RTWName":"<S75>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1267"},{"RTWName":"<S75>/b-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1274"},{"RTWName":"<S75>/c+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1275"},{"RTWName":"<S71>/c- a+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1277"},{"RTWName":"<S76>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1280"},{"RTWName":"<S76>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1281"},{"RTWName":"<S76>/a+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1288"},{"RTWName":"<S76>/b-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1289"},{"RTWName":"<S71>/c- b+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1291"},{"RTWName":"<S77>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1294"},{"RTWName":"<S77>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1295"},{"RTWName":"<S77>/b+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1302"},{"RTWName":"<S77>/c-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1303"},{"RTWName":"<S42>/60 DPWM","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1306"},{"RTWName":"<S4294967295>/60 DPWM","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1591"},{"RTWName":"<S78>/Identify Sector","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1308"},{"RTWName":"<S78>/a+ c-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1442"},{"RTWName":"<S79>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1437"},{"RTWName":"<S79>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1438"},{"RTWName":"<S79>/a+ ","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1316"},{"RTWName":"<S79>/c- ","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1430"},{"RTWName":"<S78>/a- c+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1491"},{"RTWName":"<S80>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1496"},{"RTWName":"<S80>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1497"},{"RTWName":"<S80>/a-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1507"},{"RTWName":"<S80>/c+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1508"},{"RTWName":"<S78>/b+ a-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1472"},{"RTWName":"<S81>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1478"},{"RTWName":"<S81>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1479"},{"RTWName":"<S81>/a-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1490"},{"RTWName":"<S81>/b+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1489"},{"RTWName":"<S78>/b- a+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1529"},{"RTWName":"<S82>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1535"},{"RTWName":"<S82>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1536"},{"RTWName":"<S82>/a+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1547"},{"RTWName":"<S82>/b-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1546"},{"RTWName":"<S78>/c+ b-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1510"},{"RTWName":"<S83>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1516"},{"RTWName":"<S83>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1517"},{"RTWName":"<S83>/b-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1528"},{"RTWName":"<S83>/c+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1527"},{"RTWName":"<S78>/c- b+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1450"},{"RTWName":"<S84>/Compare\nTo Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1459"},{"RTWName":"<S84>/Compare\nTo Zero1","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1460"},{"RTWName":"<S84>/b+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1471"},{"RTWName":"<S84>/c-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1470"},{"RTWName":"<S42>/60 DPWM (+30 degree shift)","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1324"},{"RTWName":"<S4294967295>/60 DPWM (+30 degree shift)","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1560"},{"RTWName":"<S85>/Identify Sector","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1326"},{"RTWName":"<S85>/a+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1334"},{"RTWName":"<S85>/a-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1335"},{"RTWName":"<S85>/b+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1336"},{"RTWName":"<S85>/b-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1337"},{"RTWName":"<S85>/c+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1338"},{"RTWName":"<S85>/c-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1339"},{"RTWName":"<S42>/60 DPWM (-30 degree shift)","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1342"},{"RTWName":"<S4294967295>/60 DPWM (-30 degree shift)\n","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1571"},{"RTWName":"<S86>/Identify Sector","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1344"},{"RTWName":"<S86>/a+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1352"},{"RTWName":"<S86>/a-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1353"},{"RTWName":"<S86>/b+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1354"},{"RTWName":"<S86>/b-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1355"},{"RTWName":"<S86>/c+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1356"},{"RTWName":"<S86>/c-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1357"},{"RTWName":"<S42>/Flat high 120 deg DD","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1360"},{"RTWName":"<S4294967295>/Flat high 120 deg DD","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1581"},{"RTWName":"<S87>/Identify Sector","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1362"},{"RTWName":"<S87>/a+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1370"},{"RTWName":"<S87>/a+ ","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1371"},{"RTWName":"<S87>/b+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1372"},{"RTWName":"<S87>/b+ ","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1373"},{"RTWName":"<S87>/c+","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1374"},{"RTWName":"<S87>/c+ ","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1375"},{"RTWName":"<S42>/Flat low 120 deg DD","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1378"},{"RTWName":"<S4294967295>/Flat low 120 deg DD","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1601"},{"RTWName":"<S88>/Identify Sector","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1380"},{"RTWName":"<S88>/a-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1388"},{"RTWName":"<S88>/a- ","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1389"},{"RTWName":"<S88>/b-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1390"},{"RTWName":"<S88>/b- ","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1391"},{"RTWName":"<S88>/c-","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1392"},{"RTWName":"<S88>/c- ","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1393"},{"RTWName":"<S42>/SVPWM","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1396"},{"RTWName":"<S44>/Half(Vmin+Vmax)","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1398"},{"RTWName":"<S42>/Sine PWM","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1413"},{"RTWName":"<S20>/Voltage Input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:844"},{"RTWName":"<S43>/Vabc","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1197"},{"RTWName":"<S43>/Valphabeta","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1203"},{"RTWName":"<S46>/Inverse Clarke Transform","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632"},{"RTWName":"<S47>/Three phase input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:533"},{"RTWName":"<S47>/Two phase input","SIDString":"mcb_pmsm_qep_offset_f28379d:6201:1632:506"},{"RTWName":"<S3>/Data Serial Output","SIDString":"mcb_pmsm_qep_offset_f28379d:6550"},{"RTWName":"<S12>/Data_Conditioning_Tx","SIDString":"mcb_pmsm_qep_offset_f28379d:6859"},{"RTWName":"<S49>/Data_Type_Fixed_Point","SIDString":"mcb_pmsm_qep_offset_f28379d:6861"},{"RTWName":"<S49>/Data_Type_Float","SIDString":"mcb_pmsm_qep_offset_f28379d:6866"},{"RTWName":"<S12>/Data_Logging","SIDString":"mcb_pmsm_qep_offset_f28379d:6871"},{"RTWName":"<S50>/Counter\nLimited","SIDString":"mcb_pmsm_qep_offset_f28379d:6873"},{"RTWName":"<S53>/Increment\nReal World","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:3"},{"RTWName":"<S53>/Wrap To Zero","SIDString":"mcb_pmsm_qep_offset_f28379d:6873:5"},{"RTWName":"<S50>/Data","SIDString":"mcb_pmsm_qep_offset_f28379d:6874"},{"RTWName":"<S50>/End","SIDString":"mcb_pmsm_qep_offset_f28379d:6882"},{"RTWName":"<S50>/Start","SIDString":"mcb_pmsm_qep_offset_f28379d:6895"},{"RTWName":"<S12>/While Iterator\nSubsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6909"},{"RTWName":"<S3>/Input Scaling","SIDString":"mcb_pmsm_qep_offset_f28379d:6486"},{"RTWName":"<S13>/eQEP_Decoder","SIDString":"mcb_pmsm_qep_offset_f28379d:6248"},{"RTWName":"<S59>/Mechanical to Electrical Position","SIDString":"mcb_pmsm_qep_offset_f28379d:6253"},{"RTWName":"<S60>/MechToElec","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:871"},{"RTWName":"<S62>/fixed-point","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:878"},{"RTWName":"<S4294967295>/Variant Subsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027"},{"RTWName":"<S112>/Dialog","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1030"},{"RTWName":"<S112>/Input Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1027:1034"},{"RTWName":"<S62>/floating-point","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:891"},{"RTWName":"<S63>/Compensate Offset","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:894"},{"RTWName":"<S64>/If Action\nSubsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:898"},{"RTWName":"<S64>/If Action\nSubsystem1","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:905"},{"RTWName":"<S63>/Mech To Elec","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:916"},{"RTWName":"<S65>/Variant Subsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014"},{"RTWName":"<S68>/Dialog","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1016"},{"RTWName":"<S68>/Input Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6253:1014:1019"},{"RTWName":"<S59>/Quadrature Decoder","SIDString":"mcb_pmsm_qep_offset_f28379d:6254"},{"RTWName":"<S61>/DT_Handle","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:157"},{"RTWName":"<S70>/fixed-point","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:159"},{"RTWName":"<S70>/floating-point","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:162"},{"RTWName":"<S61>/PositionNoReset","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:123"},{"RTWName":"<S71>/Variant Subsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:212"},{"RTWName":"<S75>/Dialog","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:212:214"},{"RTWName":"<S75>/Input Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:212:217"},{"RTWName":"<S61>/PositionResetAtIndex","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:133"},{"RTWName":"<S61>/Variant Subsystem","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:199"},{"RTWName":"<S73>/Dialog","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:199:201"},{"RTWName":"<S73>/Input Port","SIDString":"mcb_pmsm_qep_offset_f28379d:6254:199:204"},{"RTWName":"<S3>/Output Scaling","SIDString":"mcb_pmsm_qep_offset_f28379d:6350"},{"RTWName":"<S3>/PWM Output","SIDString":"mcb_pmsm_qep_offset_f28379d:6364"},{"RTWName":"<S3>/Parameters","SIDString":"mcb_pmsm_qep_offset_f28379d:6985"},{"RTWName":"<Root>/Serial Receive","SIDString":"mcb_pmsm_qep_offset_f28379d:6733"},{"RTWName":"<S4>/Code Generation","SIDString":"mcb_pmsm_qep_offset_f28379d:6839"},{"RTWName":"<S78>/Data_Type_Fixed_Point","SIDString":"mcb_pmsm_qep_offset_f28379d:6840"},{"RTWName":"<S78>/Data_Type_Float","SIDString":"mcb_pmsm_qep_offset_f28379d:6843"},{"RTWName":"<S4>/Data_Conditioning_Rx","SIDString":"mcb_pmsm_qep_offset_f28379d:6848"},{"RTWName":"<S79>/Data_Type_Fixed_Point","SIDString":"mcb_pmsm_qep_offset_f28379d:6850"},{"RTWName":"<S79>/Data_Type_Float","SIDString":"mcb_pmsm_qep_offset_f28379d:6855"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true,"showProtectedV2Report":true}};